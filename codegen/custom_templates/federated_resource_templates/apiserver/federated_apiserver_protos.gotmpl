syntax = "proto3";
package fed.rpc.solo.io;

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;

option go_package = "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/fed.rpc/v1";

{{- $base_group := base_group $ }}
{{- $base_Group := base_Group $ }}
{{- $base_proto_group := base_proto_group $ }}
{{- $base_proto_group_shorthand := base_proto_group_shorthand $ }}

{{- range $resource := $.Resources }}
{{- $base_kind := base_kind $resource.Kind }}
{{- $kind_snake_case := snake $base_kind }}
import "github.com/solo-io/solo-projects/projects/gloo-fed/api/fed.{{ $base_proto_group_shorthand }}/{{ base_group_version $ }}/{{ $kind_snake_case }}.proto";
{{- end }}
import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-projects/projects/apiserver/api/rpc.edge.gloo/v1/common.proto";

{{- range $resource := $.Resources }}
{{- $kind := $resource.Kind }}

message {{ $kind }} {
    .rpc.edge.gloo.solo.io.ObjectMeta metadata = 1;
    .fed.{{ $base_proto_group }}.{{ $kind }}Spec spec = 2;
    .fed.{{ $base_proto_group }}.{{ $kind }}Status status = 3;
}

{{- end }}

{{- range $resource := $.Resources }}
{{- $kind := $resource.Kind }}
{{- $kind_snake_case := snake $resource.Kind }}

message List{{ pluralize $kind }}Request {}

message List{{ pluralize $kind }}Response {
    repeated {{ $kind }} {{ pluralize $kind_snake_case }} = 1;
}

message Get{{ $kind }}YamlRequest {
    .core.skv2.solo.io.ObjectRef {{ $kind_snake_case }}_ref = 1;
}

message Get{{ $kind }}YamlResponse {
    .rpc.edge.gloo.solo.io.ResourceYaml yaml_data = 1;
}

{{- end }}

service Federated{{ $base_Group }}ResourceApi {

    {{- range $resource := $.Resources }}
    {{- $kind := $resource.Kind }}

    rpc List{{ pluralize $kind }} (List{{ pluralize $kind }}Request) returns (List{{ pluralize $kind }}Response) {}
    rpc Get{{ $kind }}Yaml (Get{{ $kind }}YamlRequest) returns (Get{{ $kind }}YamlResponse) {}
    {{- end }}
}