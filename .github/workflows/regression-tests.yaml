name: Regression Tests

on: pull_request

env:
  VERSION: '1.0.0-ci'
  GLOO_LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
  GITHUB_TOKEN: ${{ secrets.CI_ADMIN_GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  prepare_env:
    name: Prepare Environment
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    outputs:
      should-auto-succeed-regression-tests: ${{ steps.run-strategy.outputs.auto_succeed }}
    steps:
      - name: Cancel Previous Actions
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - id: checkout-code
        uses: actions/checkout@v3
        with:
          # We require gathering the branch and tag history since we rely on a `git diff`
          # which compares the state of two branches
          fetch-depth: 0
      - id: process-skip-directives
        uses: ./.github/workflows/composite-actions/process-skip-directives
        with:
          base-ref: ${{ github.base_ref }}
      - id: run-strategy
        name: Determine Test Run Strategy
        run: |
          skip_kube_tests=${{ steps.process-skip-directives.outputs.skip-kube-tests }}
          if [[ ! -z $skip_kube_tests && $skip_kube_tests = true ]] ; then
            echo "auto_succeed=true" >> $GITHUB_OUTPUT
          fi

  gloo_fed_e2e_tests:
    # when a job runs with a matrix, its name changes automatically.  HOWEVER, it can be dynamically computed
    # based on matrix variables.  Doing this (below) lets us satisfy the admin requirement of a test called
    # "Gloo Fed E2E Tests" to run during a PR's CI
    name: ${{matrix.name-helper}}
    needs: prepare_env
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        name-helper: ['Gloo Fed E2E Tests']
        kube-version: [{ node: 'v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72', kubectl: 'v1.27.3', kind: 'v0.20.0', helm: 'v3.12.2' }]
    steps:
      - uses: actions/checkout@v3
      - id: auto-succeed-tests
        if: needs.prepare_env.outputs.should-auto-succeed-regression-tests == 'true'
        run: |
          echo "Gloo Fed Regression tests auto-succeeded"
      - id: run-tests
        if: needs.prepare_env.outputs.should-auto-succeed-regression-tests != 'true'
        uses: ./.github/workflows/composite-actions/fed-regression-tests
        with:
          GLOO_EE_GCR_KEY: ${{ secrets.GLOO_EE_GCR_KEY }}
          QUAY_IO_PASSWORD: ${{ secrets.QUAY_IO_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.CI_ADMIN_GITHUB_TOKEN }}
          TESTSPACE_TOKEN: ${{ secrets.TESTSPACE_TOKEN }}

  gloo_fed_canary_tests:
    # when a job runs with a matrix, its name changes automatically.  HOWEVER, it can be dynamically computed
    # based on matrix variables.  Doing this (below) lets us satisfy the admin requirement of a test called
    # "Gloo Fed Canary Tests" to run during a PR's CI
    name: ${{matrix.name-helper}}
    needs: prepare_env
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        name-helper: ['Gloo Fed Canary Tests']
        kube-version: [{ node: 'v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72', kubectl: 'v1.27.3', kind: 'v0.20.0', helm: 'v3.12.2' }]
    steps:
      - uses: actions/checkout@v3
      - id: auto-succeed-tests
        if: needs.prepare_env.outputs.should-auto-succeed-regression-tests == 'true'
        run: |
          echo "Gloo Fed Canary tests auto-succeeded"
      - id: run-tests
        if: needs.prepare_env.outputs.should-auto-succeed-regression-tests != 'true'
        uses: ./.github/workflows/composite-actions/canary-regression-tests
        with:
          GLOO_EE_GCR_KEY: ${{ secrets.GLOO_EE_GCR_KEY }}
          QUAY_IO_PASSWORD: ${{ secrets.QUAY_IO_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.CI_ADMIN_GITHUB_TOKEN }}
          TESTSPACE_TOKEN: ${{ secrets.TESTSPACE_TOKEN }}

  regression_tests:
    name: k8s regression tests (${{matrix.kube-e2e-test-type.test}}, ${{matrix.kube-e2e-test-type.use-fips}})
    needs: prepare_env
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        # upgrade tests are not run on PRs
        kube-e2e-test-type: [{test: 'gateway', use-fips: 'true'}, {test: 'gateway', use-fips: 'false'}, {test: 'gloo-mtls', use-fips: 'false'}, {test: 'helm', use-fips: 'false'}, {test: 'redis-clientside-sharding', use-fips: 'false'}, {test: 'wasm', use-fips: 'false'}, {test: 'caching', use-fips: 'false'}, {test: 'upgrade', use-fips: 'false'}, {test: 'argocd', use-fips: 'false'}]
        kube-version: [{ node: 'v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72', kubectl: 'v1.27.3', kind: 'v0.20.0', helm: 'v3.12.2', argocd: 'v2.8.4' }]
        merge-to-lts:
          - ${{ github.event.pull_request.base.ref == 'v1.15.x' }}
        exclude:
          - merge-to-lts: false
            kube-e2e-test-type: {test: 'upgrade', use-fips: 'false'}
          # Disabling wasm tests since pulling from host webassemblyhub.io consistently fails
          - kube-e2e-test-type: {test: 'wasm', use-fips: 'false'}
    steps:
      - uses: actions/checkout@v3
      - id: auto-succeed-tests
        if: needs.prepare_env.outputs.should-auto-succeed-regression-tests == 'true'
        run: |
          echo "Regression tests auto-succeeded"
      - id: run-tests
        if: needs.prepare_env.outputs.should-auto-succeed-regression-tests != 'true'
        uses: ./.github/workflows/composite-actions/regression-tests
        with:
          # In CI we do not want to test against a released version
          # However, while developing work, you may want to set this to a previously
          # released version of Gloo Edge (ie 1.15.0-beta1) to avoid rebuilding images on each run
          RELEASED_VERSION: ""
          GLOO_EE_GCR_KEY: ${{ secrets.GLOO_EE_GCR_KEY }}
          QUAY_IO_PASSWORD: ${{ secrets.QUAY_IO_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.CI_ADMIN_GITHUB_TOKEN }}
          TESTSPACE_TOKEN: ${{ secrets.TESTSPACE_TOKEN }}
