name: Gloo-Fed Regression Tests
description: run gloo-fed regression test suite
inputs:
  GLOO_EE_GCR_KEY:
    required: true
    description: access key for Google Cloud
  QUAY_IO_PASSWORD:
    required: true
    description: access key for Quay Image repository
  GITHUB_TOKEN:
    required: true
    description: access token for use in CI
  TESTSPACE_TOKEN:
    required: true
    description: access token uploading test results
  
runs:
  using: "composite"
  steps:
  - uses: ./.github/actions/standard-gloo-ee-setup
    with:
      GLOO_EE_GCR_KEY: ${{ inputs.GLOO_EE_GCR_KEY }}
      QUAY_IO_PASSWORD: ${{ inputs.QUAY_IO_PASSWORD }}
      GO_VERSION: 1.18.2
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
  - uses: azure/setup-kubectl@v1
    with:
      version: ${{ matrix.kube-version.kubectl }}
  - uses: azure/setup-helm@v1
    with:
      version: v3.6.1
  - uses: engineerd/setup-kind@v0.5.0
    with:
      skipClusterCreation: "true"
      version: ${{ matrix.kube-version.kind }}
  - name: Yarn Install
    uses: actions/setup-node@v2
    with:
      node-version: '14'
  - run: yarn --cwd projects/ui install
    shell: bash
  - name: Setup Kind
    shell: bash
    run: ./projects/gloo-fed/ci/setup-kind.sh
    env:
      MANAGEMENT_CLUSTER: management
      REMOTE_CLUSTER: remote
      REMOVE_GLOO_FED_IMAGES: "true"
      CLUSTER_NODE_VERSION: ${{ matrix.kube-version.node }}
  # should be the same as canary-regression-tests
  - name: Clean Up Images
    shell: bash
    run: |
      docker image rm node:14
      docker image rm node:14-alpine
      docker image rm node:16
      docker image rm node:16-alpine
      docker image rm node:18
      docker image rm node:18-alpine
      # remove the dangling images and containers
      docker images | tail -n +2 | awk '$1 == "<none>" {print $3}' | xargs --no-run-if-empty docker rmi
      docker ps -a | tail -n +2 | awk '$2 ~ "^[0-9a-f]+$" {print $1}' | xargs --no-run-if-empty docker rm --volumes=true
  - name: Run tests
    shell: bash
    run: make run-ci-gloo-fed-regression-tests
    env:
      KUBE2E_TESTS: basic
      MANAGEMENT_CLUSTER: management
      REMOTE_CLUSTER: remote
  - name: Debug Info
    if: failure()
    shell: bash
    run: |
      # see what's in the cluster if we failed
      kubectl get all -A
      kubectl get configmaps -A
      kubectl port-forward -n gloo-system deploy/gateway-proxy 19000 & sleep 5; curl localhost:19000/clusters; curl localhost:19000/config_dump;
      # see the disk space of the test
  - name: System Info
    if: always()
    shell: bash
    run: |
      df -h
      docker ps -a
      docker images
  - name: save results
    if: ${{ failure() }}
    shell: bash
    run: echo '{"url":"https://github.com/solo-io/solo-projects/actions/runs/${{github.run_id}}",
            "name":"fed@k8s${{matrix.kube-version.kubectl}}"}' > test-out.json
  - uses: actions/upload-artifact@v3
    if: ${{ failure() }}
    with:
      name: fed@k8s${{matrix.kube-version.kubectl}}
      path: test-out.json
      if-no-files-found: warn