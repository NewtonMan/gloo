#----------------------------------------------------------------------------------
# Default Variables
#----------------------------------------------------------------------------------

ROOTDIR := $(shell pwd)
RELATIVE_OUTPUT_DIR ?= _output
OUTPUT_DIR ?= $(ROOTDIR)/$(RELATIVE_OUTPUT_DIR)
UNAME_M ?=$(shell uname -m)

# If you just put your username, then that refers to your account at hub.docker.com
# To use quay images, set the IMAGE_REPO to "quay.io/solo-io" (or leave unset)
# To use dockerhub images, set the IMAGE_REPO to "soloio"
# To use gcr images, set the IMAGE_REPO to "gcr.io/$PROJECT_NAME"
# leave default value unset
IMAGE_REPO_DEFAULT_VALUE := quay.io/solo-io
IMAGE_REPO ?= $(IMAGE_REPO_DEFAULT_VALUE)

GOLANG_VERSION := golang:1.16.3-alpine
GOBORING_VERSION := goboring/golang:1.16.3b7

RELEASE := "false"
ifeq ($(TAGGED_VERSION),)
	TAGGED_VERSION := "v$(shell ./git-semver.sh)"
else
	RELEASE := "true"
endif
ifeq ($(PUSH_TESTS_ARM), true)
	RELEASE := "true"
	IMAGE_REPO ?= localhost:5000
endif


VERSION ?= $(shell echo $(TAGGED_VERSION) | sed -e "s/^refs\/tags\///" | cut -c 2-)

GOARCH ?= amd64
ifneq ($(or	$(filter $(UNAME_M), arm64), $(filter $(UNAME_M), aarch64)), )
	GOARCH := arm64
	PLATFORM := --platform=linux/amd64
endif

# enable CGO for amd64 only
GO_ENABLE_CGO=0
ifeq ($(GOARCH), amd64)
	GO_ENABLE_CGO=1
endif

DOCKER_BUILD_ARGS=--build-arg DOCKER_GOARCH=$(GOARCH)
DOCKER_BUILD_ARGS_PLATFORM=$(DOCKER_BUILD_ARGS) $(PLATFORM)

DOCKER_GO_BORING_ARGS=--build-arg DOCKER_GOARCH=amd64 --build-arg DOCKER_CGO_ENABLED=1

#----------------------------------------------------------------------------------
# Kind Load Images
#----------------------------------------------------------------------------------

CLUSTER_NAME ?= kind

kind-load-%:
	kind load docker-image $(IMAGE_REPO)/$*:$(VERSION) --name $(CLUSTER_NAME)

kind-load-%-extended:
	kind load docker-image $(IMAGE_REPO)/$*:$(VERSION)-extended --name $(CLUSTER_NAME)

# Useful utility for listing images loaded into the kind cluster
.PHONY: kind-list-images
kind-list-images:
	docker exec -ti $(CLUSTER_NAME)-control-plane crictl images | grep "solo-io"

# Useful utility for pruning images that were previously loaded into the kind cluster
.PHONY: kind-prune-images
kind-prune-images:
	docker exec -ti $(CLUSTER_NAME)-control-plane crictl rmi --prune

#----------------------------------------------------------------------------------
# Push Images
#----------------------------------------------------------------------------------

push-image-%:
	docker push $(IMAGE_REPO)/$*:$(VERSION)

push-image-%-extended:
	docker push $(IMAGE_REPO)/$*:$(VERSION)-extended