#----------------------------------------------------------------------------------
# Default Variables
#----------------------------------------------------------------------------------

UNAME_M ?=$(shell uname -m)

# If you just put your username, then that refers to your account at hub.docker.com
# To use quay images, set the IMAGE_REGISTRY to "quay.io/solo-io" (or leave unset)
# To use dockerhub images, set the IMAGE_REGISTRY to "soloio"
# To use gcr images, set the IMAGE_REGISTRY to "gcr.io/$PROJECT_NAME"
# leave default value unset
IMAGE_REGISTRY ?= quay.io/solo-io

# the build image for GLOO is Debian based whereas for rate-limit and ext-auth it's Alpine based
GOLANG_IMAGE_NAME = golang:$(shell go version | egrep -o '([0-9]+\.[0-9]+)')
GOLANG_ALPINE_IMAGE_NAME = $(GOLANG_IMAGE_NAME)-alpine

# TODO(gunnar-solo): remove translation between TAGGED_VERSION and PUBLISH_CONTEXT
ifeq ($(TAGGED_VERSION),)
	ifeq ($(TEST_ASSET_ID),)
	  VERSION ?= $(shell git describe --tags --dirty | cut -c 2-)
	else
	  # If we want to create test assets, set version to be PR-unique rather than commit-unique for charts and images
	  VERSION ?= $(shell git describe --tags --abbrev=0 | cut -c 2-)-$(TEST_ASSET_ID)
	endif
else
	PUBLISH_CONTEXT := "RELEASE"
	VERSION ?= $(shell echo $(TAGGED_VERSION) | sed -e "s/^refs\/tags\///" | cut -c 2-)
endif

# if `GO_ARCH` is set, then it will keep its value. Else, it will be changed based off the machine's host architecture.
# if the machines architecture is set to arm64 then we want to set the appropriate values, else we only support amd64
IS_ARM_MACHINE := $(or	$(filter $(UNAME_M), arm64), $(filter $(UNAME_M), aarch64))
ifneq ($(IS_ARM_MACHINE), )
	PLATFORM := --platform linux/amd64
	ifeq ($(GOARCH), amd64)
		GOARCH := amd64
	else
		GOARCH := arm64
		PLATFORM := --platform linux/arm64
	endif
else
	# currently we only support arm64 and amd64 as a GOARCH option.
	ifneq ($(GOARCH), arm64)
		GOARCH := amd64
	endif
endif

GOOS ?= $(shell uname -s | tr '[:upper:]' '[:lower:]')

DOCKER_BUILD_ARGS :=--build-arg DOCKER_GOARCH=$(GOARCH) $(PLATFORM)
DOCKER_GOARCH := $(GOARCH)

# enable CGO for amd64 only
GO_ENABLE_CGO=0
ifeq ($(GOARCH), amd64)
	GO_ENABLE_CGO=1
endif

DOCKER_GO_BORING_ARGS=--build-arg GOEXPERIMENT=boringcrypto --build-arg DOCKER_GOARCH=amd64 --build-arg DOCKER_CGO_ENABLED=1 --platform linux/amd64 
# to build an image that must be a AMD64 platform
DOCKER_GO_AMD_64_ARGS=--build-arg DOCKER_GOARCH=amd64 --build-arg DOCKER_CGO_ENABLED=1