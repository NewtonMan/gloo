// Code generated by skv2. DO NOT EDIT.

package placement

import (
	"context"

	"github.com/rotisserie/eris"
	multicluster_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/multicluster.solo.io/v1alpha1/types"
	"github.com/solo-io/solo-projects/projects/multicluster-admission-webhook/pkg/rbac"
	"k8s.io/apimachinery/pkg/runtime"

	fed_enterprise_gloo_solo_io_v1_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.enterprise.gloo.solo.io/v1"

	fed_ratelimit_solo_io_v1alpha1_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.ratelimit.solo.io/v1alpha1"

	fed_gloo_solo_io_v1_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.gloo.solo.io/v1"

	fed_gateway_solo_io_v1_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.gateway.solo.io/v1"

	fed_solo_io_v1_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.solo.io/v1"
)

// Placement parser for handling typed objects. Implemented by the user.
type TypedParser interface {

	// Parsers for fed.enterprise.gloo.solo.io/v1 types.
	ParseFederatedAuthConfig(ctx context.Context, obj *fed_enterprise_gloo_solo_io_v1_types.FederatedAuthConfig) ([]*multicluster_types.Placement, error)

	// Parsers for fed.ratelimit.solo.io/v1alpha1 types.
	ParseFederatedRateLimitConfig(ctx context.Context, obj *fed_ratelimit_solo_io_v1alpha1_types.FederatedRateLimitConfig) ([]*multicluster_types.Placement, error)

	// Parsers for fed.gloo.solo.io/v1 types.
	ParseFederatedUpstream(ctx context.Context, obj *fed_gloo_solo_io_v1_types.FederatedUpstream) ([]*multicluster_types.Placement, error)
	ParseFederatedUpstreamGroup(ctx context.Context, obj *fed_gloo_solo_io_v1_types.FederatedUpstreamGroup) ([]*multicluster_types.Placement, error)
	ParseFederatedSettings(ctx context.Context, obj *fed_gloo_solo_io_v1_types.FederatedSettings) ([]*multicluster_types.Placement, error)

	// Parsers for fed.gateway.solo.io/v1 types.
	ParseFederatedGateway(ctx context.Context, obj *fed_gateway_solo_io_v1_types.FederatedGateway) ([]*multicluster_types.Placement, error)
	ParseFederatedMatchableHttpGateway(ctx context.Context, obj *fed_gateway_solo_io_v1_types.FederatedMatchableHttpGateway) ([]*multicluster_types.Placement, error)
	ParseFederatedMatchableTcpGateway(ctx context.Context, obj *fed_gateway_solo_io_v1_types.FederatedMatchableTcpGateway) ([]*multicluster_types.Placement, error)
	ParseFederatedVirtualService(ctx context.Context, obj *fed_gateway_solo_io_v1_types.FederatedVirtualService) ([]*multicluster_types.Placement, error)
	ParseFederatedRouteTable(ctx context.Context, obj *fed_gateway_solo_io_v1_types.FederatedRouteTable) ([]*multicluster_types.Placement, error)

	// Parsers for fed.solo.io/v1 types.
	ParseFailoverScheme(ctx context.Context, obj *fed_solo_io_v1_types.FailoverScheme) ([]*multicluster_types.Placement, error)
}

// Generic placement parser for handling runtime.Object.
type parser struct {
	scheme      *runtime.Scheme
	typedParser TypedParser
}

// All types must be registered with the scheme.
func NewParser(scheme *runtime.Scheme, typedParser TypedParser) rbac.Parser {
	return &parser{scheme: scheme, typedParser: typedParser}
}

func (p *parser) Parse(ctx context.Context, rawObj []byte) ([]*multicluster_types.Placement, error) {
	obj, err := rbac.FromRawToObject(p.scheme, rawObj)
	if err != nil {
		return nil, eris.Errorf("Error deserializing raw object: %+v", err)
	}
	switch objType := obj.(type) {

	case *fed_enterprise_gloo_solo_io_v1_types.FederatedAuthConfig:
		return p.typedParser.ParseFederatedAuthConfig(ctx, obj.(*fed_enterprise_gloo_solo_io_v1_types.FederatedAuthConfig))

	case *fed_ratelimit_solo_io_v1alpha1_types.FederatedRateLimitConfig:
		return p.typedParser.ParseFederatedRateLimitConfig(ctx, obj.(*fed_ratelimit_solo_io_v1alpha1_types.FederatedRateLimitConfig))

	case *fed_gloo_solo_io_v1_types.FederatedUpstream:
		return p.typedParser.ParseFederatedUpstream(ctx, obj.(*fed_gloo_solo_io_v1_types.FederatedUpstream))

	case *fed_gloo_solo_io_v1_types.FederatedUpstreamGroup:
		return p.typedParser.ParseFederatedUpstreamGroup(ctx, obj.(*fed_gloo_solo_io_v1_types.FederatedUpstreamGroup))

	case *fed_gloo_solo_io_v1_types.FederatedSettings:
		return p.typedParser.ParseFederatedSettings(ctx, obj.(*fed_gloo_solo_io_v1_types.FederatedSettings))

	case *fed_gateway_solo_io_v1_types.FederatedGateway:
		return p.typedParser.ParseFederatedGateway(ctx, obj.(*fed_gateway_solo_io_v1_types.FederatedGateway))

	case *fed_gateway_solo_io_v1_types.FederatedMatchableHttpGateway:
		return p.typedParser.ParseFederatedMatchableHttpGateway(ctx, obj.(*fed_gateway_solo_io_v1_types.FederatedMatchableHttpGateway))

	case *fed_gateway_solo_io_v1_types.FederatedMatchableTcpGateway:
		return p.typedParser.ParseFederatedMatchableTcpGateway(ctx, obj.(*fed_gateway_solo_io_v1_types.FederatedMatchableTcpGateway))

	case *fed_gateway_solo_io_v1_types.FederatedVirtualService:
		return p.typedParser.ParseFederatedVirtualService(ctx, obj.(*fed_gateway_solo_io_v1_types.FederatedVirtualService))

	case *fed_gateway_solo_io_v1_types.FederatedRouteTable:
		return p.typedParser.ParseFederatedRouteTable(ctx, obj.(*fed_gateway_solo_io_v1_types.FederatedRouteTable))

	case *fed_solo_io_v1_types.FailoverScheme:
		return p.typedParser.ParseFailoverScheme(ctx, obj.(*fed_solo_io_v1_types.FailoverScheme))

	default:
		return nil, eris.Errorf("Unrecognized object type: %T", objType)
	}
}
