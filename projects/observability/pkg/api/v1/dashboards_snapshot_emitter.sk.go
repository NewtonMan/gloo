// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"
	"go.uber.org/zap"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
	skstats "github.com/solo-io/solo-kit/pkg/stats"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/go-utils/errutils"
)

var (
	// Deprecated. See mDashboardsResourcesIn
	mDashboardsSnapshotIn = stats.Int64("dashboards_observability_solo_io/emitter/snap_in", "Deprecated. Use dashboards_observability_solo_io/emitter/resources_in. The number of snapshots in", "1")

	// metrics for emitter
	mDashboardsResourcesIn    = stats.Int64("dashboards_observability_solo_io/emitter/resources_in", "The number of resource lists received on open watch channels", "1")
	mDashboardsSnapshotOut    = stats.Int64("dashboards_observability_solo_io/emitter/snap_out", "The number of snapshots out", "1")
	mDashboardsSnapshotMissed = stats.Int64("dashboards_observability_solo_io/emitter/snap_missed", "The number of snapshots missed", "1")

	// views for emitter
	// deprecated: see dashboardsResourcesInView
	dashboardssnapshotInView = &view.View{
		Name:        "dashboards_observability_solo_io/emitter/snap_in",
		Measure:     mDashboardsSnapshotIn,
		Description: "Deprecated. Use dashboards_observability_solo_io/emitter/resources_in. The number of snapshots updates coming in.",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}

	dashboardsResourcesInView = &view.View{
		Name:        "dashboards_observability_solo_io/emitter/resources_in",
		Measure:     mDashboardsResourcesIn,
		Description: "The number of resource lists received on open watch channels",
		Aggregation: view.Count(),
		TagKeys: []tag.Key{
			skstats.NamespaceKey,
			skstats.ResourceKey,
		},
	}
	dashboardssnapshotOutView = &view.View{
		Name:        "dashboards_observability_solo_io/emitter/snap_out",
		Measure:     mDashboardsSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	dashboardssnapshotMissedView = &view.View{
		Name:        "dashboards_observability_solo_io/emitter/snap_missed",
		Measure:     mDashboardsSnapshotMissed,
		Description: "The number of snapshots updates going missed. this can happen in heavy load. missed snapshot will be re-tried after a second.",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(
		dashboardssnapshotInView,
		dashboardssnapshotOutView,
		dashboardssnapshotMissedView,
		dashboardsResourcesInView,
	)
}

type DashboardsSnapshotEmitter interface {
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *DashboardsSnapshot, <-chan error, error)
}

type DashboardsEmitter interface {
	DashboardsSnapshotEmitter
	Register() error
	Upstream() gloo_solo_io.UpstreamClient
}

func NewDashboardsEmitter(upstreamClient gloo_solo_io.UpstreamClient) DashboardsEmitter {
	return NewDashboardsEmitterWithEmit(upstreamClient, make(chan struct{}))
}

func NewDashboardsEmitterWithEmit(upstreamClient gloo_solo_io.UpstreamClient, emit <-chan struct{}) DashboardsEmitter {
	return &dashboardsEmitter{
		upstream:  upstreamClient,
		forceEmit: emit,
	}
}

type dashboardsEmitter struct {
	forceEmit <-chan struct{}
	upstream  gloo_solo_io.UpstreamClient
}

func (c *dashboardsEmitter) Register() error {
	if err := c.upstream.Register(); err != nil {
		return err
	}
	return nil
}

func (c *dashboardsEmitter) Upstream() gloo_solo_io.UpstreamClient {
	return c.upstream
}

func (c *dashboardsEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *DashboardsSnapshot, <-chan error, error) {

	if len(watchNamespaces) == 0 {
		watchNamespaces = []string{""}
	}

	for _, ns := range watchNamespaces {
		if ns == "" && len(watchNamespaces) > 1 {
			return nil, nil, errors.Errorf("the \"\" namespace is used to watch all namespaces. Snapshots can either be tracked for " +
				"specific namespaces or \"\" AllNamespaces, but not both.")
		}
	}

	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Upstream */
	type upstreamListWithNamespace struct {
		list      gloo_solo_io.UpstreamList
		namespace string
	}
	upstreamChan := make(chan upstreamListWithNamespace)

	var initialUpstreamList gloo_solo_io.UpstreamList

	currentSnapshot := DashboardsSnapshot{}
	upstreamsByNamespace := make(map[string]gloo_solo_io.UpstreamList)

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for Upstream */
		{
			upstreams, err := c.upstream.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "initial Upstream list")
			}
			initialUpstreamList = append(initialUpstreamList, upstreams...)
			upstreamsByNamespace[namespace] = upstreams
		}
		upstreamNamespacesChan, upstreamErrs, err := c.upstream.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Upstream watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, upstreamErrs, namespace+"-upstreams")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case upstreamList, ok := <-upstreamNamespacesChan:
					if !ok {
						return
					}
					select {
					case <-ctx.Done():
						return
					case upstreamChan <- upstreamListWithNamespace{list: upstreamList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}
	/* Initialize snapshot for Upstreams */
	currentSnapshot.Upstreams = initialUpstreamList.Sort()

	snapshots := make(chan *DashboardsSnapshot)
	go func() {
		// sent initial snapshot to kick off the watch
		initialSnapshot := currentSnapshot.Clone()
		snapshots <- &initialSnapshot

		timer := time.NewTicker(time.Second * 1)
		previousHash, err := currentSnapshot.Hash(nil)
		if err != nil {
			contextutils.LoggerFrom(ctx).Panicw("error while hashing, this should never happen", zap.Error(err))
		}
		sync := func() {
			currentHash, err := currentSnapshot.Hash(nil)
			// this should never happen, so panic if it does
			if err != nil {
				contextutils.LoggerFrom(ctx).Panicw("error while hashing, this should never happen", zap.Error(err))
			}
			if previousHash == currentHash {
				return
			}

			sentSnapshot := currentSnapshot.Clone()
			select {
			case snapshots <- &sentSnapshot:
				stats.Record(ctx, mDashboardsSnapshotOut.M(1))
				previousHash = currentHash
			default:
				stats.Record(ctx, mDashboardsSnapshotMissed.M(1))
			}
		}

		defer func() {
			close(snapshots)
			// we must wait for done before closing the error chan,
			// to avoid sending on close channel.
			done.Wait()
			close(errs)
		}()
		for {
			record := func() { stats.Record(ctx, mDashboardsSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case upstreamNamespacedList, ok := <-upstreamChan:
				if !ok {
					return
				}
				record()

				namespace := upstreamNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"upstream",
					mDashboardsResourcesIn,
				)

				// merge lists by namespace
				upstreamsByNamespace[namespace] = upstreamNamespacedList.list
				var upstreamList gloo_solo_io.UpstreamList
				for _, upstreams := range upstreamsByNamespace {
					upstreamList = append(upstreamList, upstreams...)
				}
				currentSnapshot.Upstreams = upstreamList.Sort()
			}
		}
	}()
	return snapshots, errs, nil
}
