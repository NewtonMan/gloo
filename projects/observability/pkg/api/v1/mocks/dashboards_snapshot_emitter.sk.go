// Code generated by MockGen. DO NOT EDIT.
// Source: ./projects/observability/pkg/api/v1/dashboards_snapshot_emitter.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v10 "github.com/solo-io/solo-projects/projects/observability/pkg/api/v1"
)

// MockDashboardsEmitter is a mock of DashboardsEmitter interface
type MockDashboardsEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardsEmitterMockRecorder
}

// MockDashboardsEmitterMockRecorder is the mock recorder for MockDashboardsEmitter
type MockDashboardsEmitterMockRecorder struct {
	mock *MockDashboardsEmitter
}

// NewMockDashboardsEmitter creates a new mock instance
func NewMockDashboardsEmitter(ctrl *gomock.Controller) *MockDashboardsEmitter {
	mock := &MockDashboardsEmitter{ctrl: ctrl}
	mock.recorder = &MockDashboardsEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardsEmitter) EXPECT() *MockDashboardsEmitterMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockDashboardsEmitter) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockDashboardsEmitterMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDashboardsEmitter)(nil).Register))
}

// Upstream mocks base method
func (m *MockDashboardsEmitter) Upstream() v1.UpstreamClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upstream")
	ret0, _ := ret[0].(v1.UpstreamClient)
	return ret0
}

// Upstream indicates an expected call of Upstream
func (mr *MockDashboardsEmitterMockRecorder) Upstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upstream", reflect.TypeOf((*MockDashboardsEmitter)(nil).Upstream))
}

// Snapshots mocks base method
func (m *MockDashboardsEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *v10.DashboardsSnapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", watchNamespaces, opts)
	ret0, _ := ret[0].(<-chan *v10.DashboardsSnapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockDashboardsEmitterMockRecorder) Snapshots(watchNamespaces, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockDashboardsEmitter)(nil).Snapshots), watchNamespaces, opts)
}
