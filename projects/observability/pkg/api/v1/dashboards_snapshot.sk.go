// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"

	"github.com/solo-io/solo-kit/pkg/utils/hashutils"
	"go.uber.org/zap"
)

type DashboardsSnapshot struct {
	Upstreams gloo_solo_io.UpstreamsByNamespace
}

func (s DashboardsSnapshot) Clone() DashboardsSnapshot {
	return DashboardsSnapshot{
		Upstreams: s.Upstreams.Clone(),
	}
}

func (s DashboardsSnapshot) Hash() uint64 {
	return hashutils.HashAll(
		s.hashUpstreams(),
	)
}

func (s DashboardsSnapshot) hashUpstreams() uint64 {
	return hashutils.HashAll(s.Upstreams.List().AsInterfaces()...)
}

func (s DashboardsSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	fields = append(fields, zap.Uint64("upstreams", s.hashUpstreams()))

	return append(fields, zap.Uint64("snapshotHash", s.Hash()))
}

type DashboardsSnapshotStringer struct {
	Version   uint64
	Upstreams []string
}

func (ss DashboardsSnapshotStringer) String() string {
	s := fmt.Sprintf("DashboardsSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Upstreams %v\n", len(ss.Upstreams))
	for _, name := range ss.Upstreams {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s DashboardsSnapshot) Stringer() DashboardsSnapshotStringer {
	return DashboardsSnapshotStringer{
		Version:   s.Hash(),
		Upstreams: s.Upstreams.List().NamespacesDotNames(),
	}
}
