// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-projects/projects/observability/pkg/grafana (interfaces: RestClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestClient is a mock of RestClient interface.
type MockRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientMockRecorder
}

// MockRestClientMockRecorder is the mock recorder for MockRestClient.
type MockRestClientMockRecorder struct {
	mock *MockRestClient
}

// NewMockRestClient creates a new mock instance.
func NewMockRestClient(ctrl *gomock.Controller) *MockRestClient {
	mock := &MockRestClient{ctrl: ctrl}
	mock.recorder = &MockRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestClient) EXPECT() *MockRestClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRestClient) Delete(arg0 string) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockRestClientMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestClient)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockRestClient) Get(arg0 string, arg1 url.Values) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRestClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRestClient)(nil).Get), arg0, arg1)
}

// Patch mocks base method.
func (m *MockRestClient) Patch(arg0 string, arg1 url.Values, arg2 []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Patch indicates an expected call of Patch.
func (mr *MockRestClientMockRecorder) Patch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRestClient)(nil).Patch), arg0, arg1, arg2)
}

// Post mocks base method.
func (m *MockRestClient) Post(arg0 string, arg1 url.Values, arg2 []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockRestClientMockRecorder) Post(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRestClient)(nil).Post), arg0, arg1, arg2)
}

// Put mocks base method.
func (m *MockRestClient) Put(arg0 string, arg1 url.Values, arg2 []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Put indicates an expected call of Put.
func (mr *MockRestClientMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRestClient)(nil).Put), arg0, arg1, arg2)
}
