// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-projects/projects/observability/pkg/grafana (interfaces: DashboardClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grafana "github.com/solo-io/solo-projects/projects/observability/pkg/grafana"
)

// MockDashboardClient is a mock of DashboardClient interface.
type MockDashboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardClientMockRecorder
}

// MockDashboardClientMockRecorder is the mock recorder for MockDashboardClient.
type MockDashboardClientMockRecorder struct {
	mock *MockDashboardClient
}

// NewMockDashboardClient creates a new mock instance.
func NewMockDashboardClient(ctrl *gomock.Controller) *MockDashboardClient {
	mock := &MockDashboardClient{ctrl: ctrl}
	mock.recorder = &MockDashboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardClient) EXPECT() *MockDashboardClientMockRecorder {
	return m.recorder
}

// DeleteDashboard mocks base method.
func (m *MockDashboardClient) DeleteDashboard(arg0 string) (grafana.StatusMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboard", arg0)
	ret0, _ := ret[0].(grafana.StatusMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockDashboardClientMockRecorder) DeleteDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockDashboardClient)(nil).DeleteDashboard), arg0)
}

// GetAllFolderIds mocks base method.
func (m *MockDashboardClient) GetAllFolderIds() ([]grafana.FolderProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFolderIds")
	ret0, _ := ret[0].([]grafana.FolderProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolderIds indicates an expected call of GetAllFolderIds.
func (mr *MockDashboardClientMockRecorder) GetAllFolderIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolderIds", reflect.TypeOf((*MockDashboardClient)(nil).GetAllFolderIds))
}

// GetDashboardVersions mocks base method.
func (m *MockDashboardClient) GetDashboardVersions(arg0 float64) ([]*grafana.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardVersions", arg0)
	ret0, _ := ret[0].([]*grafana.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardVersions indicates an expected call of GetDashboardVersions.
func (mr *MockDashboardClientMockRecorder) GetDashboardVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardVersions", reflect.TypeOf((*MockDashboardClient)(nil).GetDashboardVersions), arg0)
}

// GetRawDashboard mocks base method.
func (m *MockDashboardClient) GetRawDashboard(arg0 string) ([]byte, grafana.BoardProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawDashboard", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(grafana.BoardProperties)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRawDashboard indicates an expected call of GetRawDashboard.
func (mr *MockDashboardClientMockRecorder) GetRawDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawDashboard", reflect.TypeOf((*MockDashboardClient)(nil).GetRawDashboard), arg0)
}

// PostDashboard mocks base method.
func (m *MockDashboardClient) PostDashboard(arg0 *grafana.DashboardPostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDashboard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDashboard indicates an expected call of PostDashboard.
func (mr *MockDashboardClientMockRecorder) PostDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDashboard", reflect.TypeOf((*MockDashboardClient)(nil).PostDashboard), arg0)
}

// SearchDashboards mocks base method.
func (m *MockDashboardClient) SearchDashboards(arg0 string, arg1 bool, arg2 ...string) ([]grafana.FoundBoard, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDashboards", varargs...)
	ret0, _ := ret[0].([]grafana.FoundBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDashboards indicates an expected call of SearchDashboards.
func (mr *MockDashboardClientMockRecorder) SearchDashboards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDashboards", reflect.TypeOf((*MockDashboardClient)(nil).SearchDashboards), varargs...)
}
