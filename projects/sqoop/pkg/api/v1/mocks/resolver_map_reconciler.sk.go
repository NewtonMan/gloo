// Code generated by MockGen. DO NOT EDIT.
// Source: ./projects/sqoop/pkg/api/v1/resolver_map_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/solo-projects/projects/sqoop/pkg/api/v1"
)

// MockResolverMapReconciler is a mock of ResolverMapReconciler interface
type MockResolverMapReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMapReconcilerMockRecorder
}

// MockResolverMapReconcilerMockRecorder is the mock recorder for MockResolverMapReconciler
type MockResolverMapReconcilerMockRecorder struct {
	mock *MockResolverMapReconciler
}

// NewMockResolverMapReconciler creates a new mock instance
func NewMockResolverMapReconciler(ctrl *gomock.Controller) *MockResolverMapReconciler {
	mock := &MockResolverMapReconciler{ctrl: ctrl}
	mock.recorder = &MockResolverMapReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolverMapReconciler) EXPECT() *MockResolverMapReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockResolverMapReconciler) Reconcile(namespace string, desiredResources v1.ResolverMapList, transition v1.TransitionResolverMapFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockResolverMapReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockResolverMapReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
