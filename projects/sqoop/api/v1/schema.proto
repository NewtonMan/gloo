syntax = "proto3";
package sqoop.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/sqoop/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";

/*

* The Schema object wraps the user's GraphQL Schema, which is stored as an inline string.
* The Schema Object contains a Status field which is used by SQooP to validate the user's input schema.

* Schemas are matched to resolver maps in the same namespace with the same name
*/
message Schema {

    option (core.solo.io.resource).short_name = "sc";
    option (core.solo.io.resource).plural_name = "schemas";
    // TODO: remove when we are ready to include this resource in the docs
    option (core.solo.io.resource).skip_docs_gen = true;

    // inline the entire graphql schema as a string here
    string inline_schema = 3;

    // Status indicates the validation status of this resource.
    // Status is read-only by clients, and set by gloo during validation
    core.solo.io.Status status = 6 [(gogoproto.nullable) = false, (gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 7 [(gogoproto.nullable) = false];
}
