// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway.proto

package v1 // import "github.com/solo-io/solo-kit/projects/gateway/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import v1 "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// @solo-kit:resource.short_name=gw
// @solo-kit:resource.plural_name=gateways
// @solo-kit:resource.resource_groups=api.gateway.solo.io
//
// A gateway describes the routes to upstreams that are reachable via a specific port on the Gateway Proxy itself.
type Gateway struct {
	// names of the the virtual services, which contain the actual routes for the gateway
	// if the list is empty, the gateway will apply all virtual services to this gateway
	VirtualServices []core.ResourceRef `protobuf:"bytes,2,rep,name=virtual_services,json=virtualServices" json:"virtual_services"`
	// the bind address the gateway should serve traffic on
	BindAddress string `protobuf:"bytes,3,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	// bind ports must not conflict across gateways in a namespace
	BindPort uint32 `protobuf:"varint,4,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// top level plugin configuration for all routes on the gateway
	Plugins *v1.ListenerPlugins `protobuf:"bytes,5,opt,name=plugins" json:"plugins,omitempty"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,6,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata             core.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Gateway) Reset()         { *m = Gateway{} }
func (m *Gateway) String() string { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()    {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_8455ec6f909a94e9, []int{0}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gateway.Unmarshal(m, b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
}
func (dst *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(dst, src)
}
func (m *Gateway) XXX_Size() int {
	return xxx_messageInfo_Gateway.Size(m)
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetVirtualServices() []core.ResourceRef {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *Gateway) GetBindAddress() string {
	if m != nil {
		return m.BindAddress
	}
	return ""
}

func (m *Gateway) GetBindPort() uint32 {
	if m != nil {
		return m.BindPort
	}
	return 0
}

func (m *Gateway) GetPlugins() *v1.ListenerPlugins {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *Gateway) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *Gateway) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

//
// @solo-kit:resource.short_name=vs
// @solo-kit:resource.plural_name=virtual_services
// @solo-kit:resource.resource_groups=api.gateway.solo.io
//
// A virtual service describes the set of routes to match for a set of domains.
//
// Domains must be unique across all virtual services within a gateway (i.e. no overlap between sets).
type VirtualService struct {
	VirtualHost *v1.VirtualHost `protobuf:"bytes,1,opt,name=virtual_host,json=virtualHost" json:"virtual_host,omitempty"`
	// If provided, the Gateway will serve TLS/SSL traffic for this set of routes
	SslConfig *v1.SslConfig `protobuf:"bytes,2,opt,name=ssl_config,json=sslConfig" json:"ssl_config,omitempty"`
	// Status indicates the validation status of this resource.
	// Status is read-only by clients, and set by gloo during validation
	Status core.Status `protobuf:"bytes,6,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata contains the object metadata for this resource
	Metadata             core.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VirtualService) Reset()         { *m = VirtualService{} }
func (m *VirtualService) String() string { return proto.CompactTextString(m) }
func (*VirtualService) ProtoMessage()    {}
func (*VirtualService) Descriptor() ([]byte, []int) {
	return fileDescriptor_gateway_8455ec6f909a94e9, []int{1}
}
func (m *VirtualService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualService.Unmarshal(m, b)
}
func (m *VirtualService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualService.Marshal(b, m, deterministic)
}
func (dst *VirtualService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualService.Merge(dst, src)
}
func (m *VirtualService) XXX_Size() int {
	return xxx_messageInfo_VirtualService.Size(m)
}
func (m *VirtualService) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualService.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualService proto.InternalMessageInfo

func (m *VirtualService) GetVirtualHost() *v1.VirtualHost {
	if m != nil {
		return m.VirtualHost
	}
	return nil
}

func (m *VirtualService) GetSslConfig() *v1.SslConfig {
	if m != nil {
		return m.SslConfig
	}
	return nil
}

func (m *VirtualService) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *VirtualService) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func init() {
	proto.RegisterType((*Gateway)(nil), "gateway.solo.io.Gateway")
	proto.RegisterType((*VirtualService)(nil), "gateway.solo.io.VirtualService")
}
func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if !this.VirtualServices[i].Equal(&that1.VirtualServices[i]) {
			return false
		}
	}
	if this.BindAddress != that1.BindAddress {
		return false
	}
	if this.BindPort != that1.BindPort {
		return false
	}
	if !this.Plugins.Equal(that1.Plugins) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *VirtualService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualService)
	if !ok {
		that2, ok := that.(VirtualService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VirtualHost.Equal(that1.VirtualHost) {
		return false
	}
	if !this.SslConfig.Equal(that1.SslConfig) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor_gateway_8455ec6f909a94e9) }

var fileDescriptor_gateway_8455ec6f909a94e9 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0x5a, 0x92, 0x66, 0xdd, 0x50, 0x58, 0x55, 0xe0, 0x04, 0x41, 0x43, 0x4e, 0x39,
	0x80, 0xad, 0x16, 0x89, 0x22, 0x04, 0x07, 0xc2, 0xa1, 0x08, 0x81, 0x54, 0x6d, 0x24, 0x0e, 0x5c,
	0xa2, 0x8d, 0xbd, 0xde, 0x2e, 0x75, 0x3d, 0xd6, 0xee, 0xd8, 0xc0, 0x23, 0xf0, 0x26, 0x3c, 0x0a,
	0x57, 0x5e, 0xa0, 0x07, 0x1e, 0x81, 0x27, 0x40, 0x5e, 0xaf, 0x8b, 0x7c, 0x41, 0x39, 0xf6, 0xe4,
	0xdd, 0x99, 0xff, 0x1b, 0xcd, 0xfc, 0x9e, 0x25, 0x23, 0xc9, 0x51, 0x7c, 0xe1, 0xdf, 0xc2, 0x42,
	0x03, 0x02, 0xdd, 0x6b, 0xaf, 0x06, 0x32, 0x08, 0x15, 0x4c, 0xf6, 0x25, 0x48, 0xb0, 0xb9, 0xa8,
	0x3e, 0x35, 0xb2, 0xc9, 0xa1, 0x54, 0x78, 0x56, 0xae, 0xc3, 0x18, 0x2e, 0xa2, 0x5a, 0xf9, 0x44,
	0x41, 0xf3, 0x3d, 0x57, 0x18, 0xf1, 0x42, 0x45, 0xd5, 0x61, 0x74, 0x21, 0x90, 0x27, 0x1c, 0xb9,
	0x43, 0xa2, 0x0d, 0x10, 0x83, 0x1c, 0x4b, 0xe3, 0x80, 0xc7, 0x1b, 0x00, 0x5a, 0xa4, 0x4e, 0xed,
	0x17, 0x1a, 0xbe, 0xba, 0x29, 0x26, 0xa3, 0x22, 0x2b, 0xa5, 0xca, 0x5d, 0xa5, 0xd9, 0xaf, 0x1e,
	0x19, 0x9c, 0x34, 0x73, 0xd1, 0x77, 0xe4, 0x76, 0xa5, 0x34, 0x96, 0x3c, 0x5b, 0x19, 0xa1, 0x2b,
	0x15, 0x0b, 0x13, 0xf4, 0xa6, 0x5b, 0x73, 0xff, 0x68, 0x1c, 0xc6, 0xa0, 0x45, 0x3b, 0x78, 0xc8,
	0x84, 0x81, 0x52, 0xc7, 0x82, 0x89, 0x74, 0xb1, 0xfd, 0xf3, 0xf2, 0xe0, 0x06, 0xdb, 0x73, 0xe0,
	0xd2, 0x71, 0xf4, 0x11, 0xd9, 0x5d, 0xab, 0x3c, 0x59, 0xf1, 0x24, 0xd1, 0xc2, 0x98, 0x60, 0x6b,
	0xea, 0xcd, 0x87, 0xcc, 0xaf, 0x63, 0xaf, 0x9b, 0x10, 0xbd, 0x4f, 0x86, 0x56, 0x52, 0x80, 0xc6,
	0x60, 0x7b, 0xea, 0xcd, 0x47, 0x6c, 0xa7, 0x0e, 0x9c, 0x82, 0x46, 0x7a, 0x4c, 0x06, 0xae, 0xd1,
	0xe0, 0xe6, 0xd4, 0x9b, 0xfb, 0x47, 0x0f, 0x42, 0x99, 0x01, 0x5c, 0xb5, 0xf0, 0x5e, 0x19, 0x14,
	0xb9, 0xd0, 0xa7, 0x8d, 0x88, 0xb5, 0x6a, 0x7a, 0x42, 0xfa, 0x8d, 0x55, 0x41, 0xdf, 0x72, 0xfb,
	0xdd, 0xd6, 0x97, 0x36, 0xb7, 0x18, 0xd7, 0x5d, 0xff, 0xb9, 0x3c, 0xb8, 0x83, 0xc2, 0x60, 0xa2,
	0xd2, 0xf4, 0xc5, 0x4c, 0xc9, 0x1c, 0xb4, 0x98, 0x31, 0x87, 0xd3, 0xe7, 0x64, 0xa7, 0xfd, 0x4d,
	0xc1, 0xc0, 0x96, 0xba, 0xdb, 0x2d, 0xf5, 0xc1, 0x65, 0x9d, 0x05, 0x57, 0xea, 0xd9, 0xf7, 0x1e,
	0xb9, 0xf5, 0xb1, 0xe3, 0x07, 0x7d, 0x49, 0x76, 0x5b, 0x6b, 0xcf, 0xc0, 0x60, 0xe0, 0xd9, 0x82,
	0xe3, 0xee, 0x4c, 0x8e, 0x79, 0x0b, 0x06, 0x99, 0x5f, 0xfd, 0xbb, 0xd0, 0x67, 0x84, 0x18, 0x93,
	0xad, 0x62, 0xc8, 0x53, 0x25, 0x83, 0x9e, 0x65, 0xef, 0x75, 0xd9, 0xa5, 0xc9, 0xde, 0xd8, 0x34,
	0x1b, 0x9a, 0xf6, 0x78, 0x0d, 0xbc, 0x58, 0xbc, 0xfa, 0xf1, 0xfb, 0xa1, 0xf7, 0xe9, 0xf8, 0x7f,
	0xfb, 0x5a, 0x68, 0xf8, 0x2c, 0x62, 0x34, 0x91, 0x7b, 0x5f, 0x51, 0x71, 0x2e, 0xdd, 0x12, 0xaf,
	0xfb, 0x76, 0x4b, 0x9f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xe8, 0xf3, 0x39, 0x8b, 0x03,
	0x00, 0x00,
}
