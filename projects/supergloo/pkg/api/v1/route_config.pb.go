// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: route_config.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"
import gloo_solo_io1 "github.com/solo-io/solo-kit/projects/gloo/pkg/api/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Routing struct {
	// An ordered list of route rules for HTTP traffic inside the mesh, applied globally
	// HTTP routes will be
	// applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
	// ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
	// entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
	// an incoming request is used.
	MeshHttpRoutes []*HTTPRoute `protobuf:"bytes,2,rep,name=mesh_http_routes,json=meshHttpRoutes" json:"mesh_http_routes,omitempty"`
	// An ordered list of route rules for HTTP traffic inside the mesh, applied globally
	// HTTP routes will be
	// applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
	// ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
	// entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
	// an incoming request is used.
	IngressHttpRoutes []*HTTPRoute `protobuf:"bytes,1,rep,name=ingress_http_routes,json=ingressHttpRoutes" json:"ingress_http_routes,omitempty"`
}

func (m *Routing) Reset()                    { *m = Routing{} }
func (m *Routing) String() string            { return proto.CompactTextString(m) }
func (*Routing) ProtoMessage()               {}
func (*Routing) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{0} }

func (m *Routing) GetMeshHttpRoutes() []*HTTPRoute {
	if m != nil {
		return m.MeshHttpRoutes
	}
	return nil
}

func (m *Routing) GetIngressHttpRoutes() []*HTTPRoute {
	if m != nil {
		return m.IngressHttpRoutes
	}
	return nil
}

// Describes match conditions and actions for routing HTTP/1.1, HTTP2, and
// gRPC traffic. See VirtualService for usage examples.
type HTTPRoute struct {
	// Match conditions to be satisfied for the rule to be
	// activated. All conditions inside a single match block have AND
	// semantics, while the list of match blocks have OR semantics. The rule
	// is matched if any one of the match blocks succeed.
	Match []*HTTPMatchRequest `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
	// A http rule can either redirect or forward (default) traffic. The
	// forwarding target can be one of several versions of a service (see
	// glossary in beginning of document). Weights associated with the
	// service version determine the proportion of traffic it receives.
	Route []*HTTPRouteDestination `protobuf:"bytes,2,rep,name=route" json:"route,omitempty"`
	// A http rule can either redirect or forward (default) traffic. If
	// traffic passthrough option is specified in the rule,
	// route/redirect will be ignored. The redirect primitive can be used to
	// send a HTTP 301 redirect to a different URI or Authority.
	Redirect *HTTPRedirect `protobuf:"bytes,3,opt,name=redirect" json:"redirect,omitempty"`
	// Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
	// Redirect primitive. Rewrite will be performed before forwarding.
	Rewrite *HTTPRewrite `protobuf:"bytes,4,opt,name=rewrite" json:"rewrite,omitempty"`
	// Deprecated. Websocket upgrades are done automatically starting from Istio 1.0.
	// $hide_from_docs
	WebsocketUpgrade bool `protobuf:"varint,5,opt,name=websocket_upgrade,json=websocketUpgrade,proto3" json:"websocket_upgrade,omitempty"`
	// Timeout for HTTP requests.
	Timeout *google_protobuf1.Duration `protobuf:"bytes,6,opt,name=timeout" json:"timeout,omitempty"`
	// Retry policy for HTTP requests.
	Retries *HTTPRetry `protobuf:"bytes,7,opt,name=retries" json:"retries,omitempty"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	// Note that timeouts or retries will not be enabled when faults are
	// enabled on the client side.
	Fault *HTTPFaultInjection `protobuf:"bytes,8,opt,name=fault" json:"fault,omitempty"`
	// Mirror HTTP traffic to a another destination in addition to forwarding
	// the requests to the intended destination. Mirrored traffic is on a
	// best effort basis where the sidecar/gateway will not wait for the
	// mirrored cluster to respond before returning the response from the
	// original destination.  Statistics will be generated for the mirrored
	// destination.
	Mirror *gloo_solo_io1.Destination `protobuf:"bytes,9,opt,name=mirror" json:"mirror,omitempty"`
	// Cross-Origin Resource Sharing policy (CORS). Refer to
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	// for further details about cross origin resource sharing.
	CorsPolicy *CorsPolicy `protobuf:"bytes,10,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Use of `append_headers` is deprecated. Use the `append_request_headers`
	// field instead.
	AppendHeaders map[string]string `protobuf:"bytes,11,rep,name=append_headers,json=appendHeaders" json:"append_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,12,rep,name=remove_response_headers,json=removeResponseHeaders" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,13,rep,name=append_response_headers,json=appendResponseHeaders" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,14,rep,name=remove_request_headers,json=removeRequestHeaders" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,15,rep,name=append_request_headers,json=appendRequestHeaders" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HTTPRoute) Reset()                    { *m = HTTPRoute{} }
func (m *HTTPRoute) String() string            { return proto.CompactTextString(m) }
func (*HTTPRoute) ProtoMessage()               {}
func (*HTTPRoute) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{1} }

func (m *HTTPRoute) GetMatch() []*HTTPMatchRequest {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HTTPRoute) GetRoute() []*HTTPRouteDestination {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *HTTPRoute) GetRedirect() *HTTPRedirect {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *HTTPRoute) GetRewrite() *HTTPRewrite {
	if m != nil {
		return m.Rewrite
	}
	return nil
}

func (m *HTTPRoute) GetWebsocketUpgrade() bool {
	if m != nil {
		return m.WebsocketUpgrade
	}
	return false
}

func (m *HTTPRoute) GetTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HTTPRoute) GetRetries() *HTTPRetry {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *HTTPRoute) GetFault() *HTTPFaultInjection {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (m *HTTPRoute) GetMirror() *gloo_solo_io1.Destination {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *HTTPRoute) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *HTTPRoute) GetAppendHeaders() map[string]string {
	if m != nil {
		return m.AppendHeaders
	}
	return nil
}

func (m *HTTPRoute) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HTTPRoute) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HTTPRoute) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HTTPRoute) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

// HttpMatchRequest specifies a set of criterion to be met in order for the
// rule to be applied to the HTTP request. For example, the following
// restricts the rule to match only requests where the URL path
// starts with /ratings/v2/ and the request contains a custom `end-user` header
// with value `jason`.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - match:
//     - headers:
//         end-user:
//           exact: jason
//       uri:
//         prefix: "/ratings/v2/"
//     route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
// ```
//
// HTTPMatchRequest CANNOT be empty.
type HTTPMatchRequest struct {
	// URI to match
	// values are case-sensitive and formatted as follows:
	//
	// - `exact: "value"` for exact string match
	//
	// - `prefix: "value"` for prefix-based match
	//
	// - `regex: "value"` for ECMAscript style regex-based match
	//
	Uri *StringMatch `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// URI Scheme
	// values are case-sensitive and formatted as follows:
	//
	// - `exact: "value"` for exact string match
	//
	// - `prefix: "value"` for prefix-based match
	//
	// - `regex: "value"` for ECMAscript style regex-based match
	//
	Scheme *StringMatch `protobuf:"bytes,2,opt,name=scheme" json:"scheme,omitempty"`
	// HTTP Method
	// values are case-sensitive and formatted as follows:
	//
	// - `exact: "value"` for exact string match
	//
	// - `prefix: "value"` for prefix-based match
	//
	// - `regex: "value"` for ECMAscript style regex-based match
	//
	Method *StringMatch `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	// HTTP Authority
	// values are case-sensitive and formatted as follows:
	//
	// - `exact: "value"` for exact string match
	//
	// - `prefix: "value"` for prefix-based match
	//
	// - `regex: "value"` for ECMAscript style regex-based match
	//
	Authority *StringMatch `protobuf:"bytes,4,opt,name=authority" json:"authority,omitempty"`
	// The header keys must be lowercase and use hyphen as the separator,
	// e.g. _x-request-id_.
	//
	// Header values are case-sensitive and formatted as follows:
	//
	// - `exact: "value"` for exact string match
	//
	// - `prefix: "value"` for prefix-based match
	//
	// - `regex: "value"` for ECMAscript style regex-based match
	//
	// **Note:** The keys `uri`, `scheme`, `method`, and `authority` will be ignored.
	Headers map[string]*StringMatch `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies the ports on the host that is being addressed. Many services
	// only expose a single port or label ports with the protocols they support,
	// in these cases it is not required to explicitly select the port.
	Port uint32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// One or more labels that constrain the applicability of a rule to
	// workloads with the given labels. If the VirtualService has a list of
	// gateways specified at the top, it should include the reserved gateway
	// `mesh` in order for this field to be applicable.
	SourceLabels map[string]string `protobuf:"bytes,7,rep,name=source_labels,json=sourceLabels" json:"source_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Names of gateways where the rule should be applied to. Gateway names
	// at the top of the VirtualService (if any) are overridden. The gateway match is
	// independent of sourceLabels.
	Gateways []string `protobuf:"bytes,8,rep,name=gateways" json:"gateways,omitempty"`
}

func (m *HTTPMatchRequest) Reset()                    { *m = HTTPMatchRequest{} }
func (m *HTTPMatchRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPMatchRequest) ProtoMessage()               {}
func (*HTTPMatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{2} }

func (m *HTTPMatchRequest) GetUri() *StringMatch {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *HTTPMatchRequest) GetScheme() *StringMatch {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *HTTPMatchRequest) GetMethod() *StringMatch {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *HTTPMatchRequest) GetAuthority() *StringMatch {
	if m != nil {
		return m.Authority
	}
	return nil
}

func (m *HTTPMatchRequest) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPMatchRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HTTPMatchRequest) GetSourceLabels() map[string]string {
	if m != nil {
		return m.SourceLabels
	}
	return nil
}

func (m *HTTPMatchRequest) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

// Each routing rule is associated with one or more service versions (see
// glossary in beginning of document). Weights associated with the version
// determine the proportion of traffic it receives. For example, the
// following rule will route 25% of traffic for the "reviews" service to
// instances with the "v2" tag and the remaining traffic (i.e., 75%) to
// "v1".
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: reviews-route
// spec:
//   hosts:
//   - reviews.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: reviews.prod.svc.cluster.local
//         subset: v2
//       weight: 25
//     - destination:
//         host: reviews.prod.svc.cluster.local
//         subset: v1
//       weight: 75
// ```
//
// And the associated DestinationRule
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: DestinationRule
// metadata:
//   name: reviews-destination
// spec:
//   host: reviews.prod.svc.cluster.local
//   subsets:
//   - name: v1
//     labels:
//       version: v1
//   - name: v2
//     labels:
//       version: v2
// ```
//
// Traffic can also be split across two entirely different services without
// having to define new subsets. For example, the following rule forwards 25% of
// traffic to reviews.com to dev.reviews.com
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: reviews-route-two-domains
// spec:
//   hosts:
//   - reviews.com
//   http:
//   - route:
//     - destination:
//         host: dev.reviews.com
//       weight: 25
//     - destination:
//         host: reviews.com
//       weight: 75
// ```
type HTTPRouteDestination struct {
	// REQUIRED. Destination uniquely identifies the instances of a service
	// to which the request/connection should be forwarded to.
	Destination *gloo_solo_io1.Destination `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	// REQUIRED. The proportion of traffic to be forwarded to the service
	// version. (0-100). Sum of weights across destinations SHOULD BE == 100.
	// If there is only one destination in a rule, the weight value is assumed to
	// be 100.
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// HTTP headers to remove before returning a response to the caller.
	RemoveResponseHeaders []string `protobuf:"bytes,3,rep,name=remove_response_headers,json=removeResponseHeaders" json:"remove_response_headers,omitempty"`
	// Additional HTTP headers to add before returning a response to the
	// caller.
	AppendResponseHeaders map[string]string `protobuf:"bytes,4,rep,name=append_response_headers,json=appendResponseHeaders" json:"append_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP headers to remove before forwarding a request to the
	// destination service.
	RemoveRequestHeaders []string `protobuf:"bytes,5,rep,name=remove_request_headers,json=removeRequestHeaders" json:"remove_request_headers,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendRequestHeaders map[string]string `protobuf:"bytes,6,rep,name=append_request_headers,json=appendRequestHeaders" json:"append_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HTTPRouteDestination) Reset()                    { *m = HTTPRouteDestination{} }
func (m *HTTPRouteDestination) String() string            { return proto.CompactTextString(m) }
func (*HTTPRouteDestination) ProtoMessage()               {}
func (*HTTPRouteDestination) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{3} }

func (m *HTTPRouteDestination) GetDestination() *gloo_solo_io1.Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *HTTPRouteDestination) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *HTTPRouteDestination) GetRemoveResponseHeaders() []string {
	if m != nil {
		return m.RemoveResponseHeaders
	}
	return nil
}

func (m *HTTPRouteDestination) GetAppendResponseHeaders() map[string]string {
	if m != nil {
		return m.AppendResponseHeaders
	}
	return nil
}

func (m *HTTPRouteDestination) GetRemoveRequestHeaders() []string {
	if m != nil {
		return m.RemoveRequestHeaders
	}
	return nil
}

func (m *HTTPRouteDestination) GetAppendRequestHeaders() map[string]string {
	if m != nil {
		return m.AppendRequestHeaders
	}
	return nil
}

// L4 routing rule weighted destination.
type RouteDestination struct {
	// REQUIRED. Destination uniquely identifies the instances of a service
	// to which the request/connection should be forwarded to.
	Destination *gloo_solo_io1.Destination `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	// REQUIRED. The proportion of traffic to be forwarded to the service
	// version. If there is only one destination in a rule, all traffic will be
	// routed to it irrespective of the weight.
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *RouteDestination) Reset()                    { *m = RouteDestination{} }
func (m *RouteDestination) String() string            { return proto.CompactTextString(m) }
func (*RouteDestination) ProtoMessage()               {}
func (*RouteDestination) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{4} }

func (m *RouteDestination) GetDestination() *gloo_solo_io1.Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *RouteDestination) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// L4 connection match attributes. Note that L4 connection matching support
// is incomplete.
type L4MatchAttributes struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.  E.g.,
	// a.b.c.d/xx form or just a.b.c.d.
	DestinationSubnets []string `protobuf:"bytes,1,rep,name=destination_subnets,json=destinationSubnets" json:"destination_subnets,omitempty"`
	// Specifies the port on the host that is being addressed. Many services
	// only expose a single port or label ports with the protocols they support,
	// in these cases it is not required to explicitly select the port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx
	// form or just a.b.c.d
	// $hide_from_docs
	SourceSubnet string `protobuf:"bytes,3,opt,name=source_subnet,json=sourceSubnet,proto3" json:"source_subnet,omitempty"`
	// One or more labels that constrain the applicability of a rule to
	// workloads with the given labels. If the VirtualService has a list of
	// gateways specified at the top, it should include the reserved gateway
	// `mesh` in order for this field to be applicable.
	SourceLabels map[string]string `protobuf:"bytes,4,rep,name=source_labels,json=sourceLabels" json:"source_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Names of gateways where the rule should be applied to. Gateway names
	// at the top of the VirtualService (if any) are overridden. The gateway
	// match is independent of sourceLabels.
	Gateways []string `protobuf:"bytes,5,rep,name=gateways" json:"gateways,omitempty"`
}

func (m *L4MatchAttributes) Reset()                    { *m = L4MatchAttributes{} }
func (m *L4MatchAttributes) String() string            { return proto.CompactTextString(m) }
func (*L4MatchAttributes) ProtoMessage()               {}
func (*L4MatchAttributes) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{5} }

func (m *L4MatchAttributes) GetDestinationSubnets() []string {
	if m != nil {
		return m.DestinationSubnets
	}
	return nil
}

func (m *L4MatchAttributes) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *L4MatchAttributes) GetSourceSubnet() string {
	if m != nil {
		return m.SourceSubnet
	}
	return ""
}

func (m *L4MatchAttributes) GetSourceLabels() map[string]string {
	if m != nil {
		return m.SourceLabels
	}
	return nil
}

func (m *L4MatchAttributes) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

// TLS connection match attributes.
type TLSMatchAttributes struct {
	// REQUIRED. SNI (server name indicator) to match on. Wildcard prefixes
	// can be used in the SNI value, e.g., *.com will match foo.example.com
	// as well as example.com. An SNI value must be a subset (i.e., fall
	// within the domain) of the corresponding virtual serivce's hosts.
	SniHosts []string `protobuf:"bytes,1,rep,name=sni_hosts,json=sniHosts" json:"sni_hosts,omitempty"`
	// IPv4 or IPv6 ip addresses of destination with optional subnet.  E.g.,
	// a.b.c.d/xx form or just a.b.c.d.
	DestinationSubnets []string `protobuf:"bytes,2,rep,name=destination_subnets,json=destinationSubnets" json:"destination_subnets,omitempty"`
	// Specifies the port on the host that is being addressed. Many services
	// only expose a single port or label ports with the protocols they
	// support, in these cases it is not required to explicitly select the
	// port.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx
	// form or just a.b.c.d
	// $hide_from_docs
	SourceSubnet string `protobuf:"bytes,4,opt,name=source_subnet,json=sourceSubnet,proto3" json:"source_subnet,omitempty"`
	// One or more labels that constrain the applicability of a rule to
	// workloads with the given labels. If the VirtualService has a list of
	// gateways specified at the top, it should include the reserved gateway
	// `mesh` in order for this field to be applicable.
	SourceLabels map[string]string `protobuf:"bytes,5,rep,name=source_labels,json=sourceLabels" json:"source_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Names of gateways where the rule should be applied to. Gateway names
	// at the top of the VirtualService (if any) are overridden. The gateway
	// match is independent of sourceLabels.
	Gateways []string `protobuf:"bytes,6,rep,name=gateways" json:"gateways,omitempty"`
}

func (m *TLSMatchAttributes) Reset()                    { *m = TLSMatchAttributes{} }
func (m *TLSMatchAttributes) String() string            { return proto.CompactTextString(m) }
func (*TLSMatchAttributes) ProtoMessage()               {}
func (*TLSMatchAttributes) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{6} }

func (m *TLSMatchAttributes) GetSniHosts() []string {
	if m != nil {
		return m.SniHosts
	}
	return nil
}

func (m *TLSMatchAttributes) GetDestinationSubnets() []string {
	if m != nil {
		return m.DestinationSubnets
	}
	return nil
}

func (m *TLSMatchAttributes) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TLSMatchAttributes) GetSourceSubnet() string {
	if m != nil {
		return m.SourceSubnet
	}
	return ""
}

func (m *TLSMatchAttributes) GetSourceLabels() map[string]string {
	if m != nil {
		return m.SourceLabels
	}
	return nil
}

func (m *TLSMatchAttributes) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

// HTTPRedirect can be used to send a 301 redirect response to the caller,
// where the Authority/Host and the URI in the response can be swapped with
// the specified values. For example, the following rule redirects
// requests for /v1/getProductRatings API on the ratings service to
// /v1/bookRatings provided by the bookratings service.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - match:
//     - uri:
//         exact: /v1/getProductRatings
//   redirect:
//     uri: /v1/bookRatings
//     authority: newratings.default.svc.cluster.local
//   ...
// ```
type HTTPRedirect struct {
	// On a redirect, overwrite the Path portion of the URL with this
	// value. Note that the entire path will be replaced, irrespective of the
	// request URI being matched as an exact path or prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// On a redirect, overwrite the Authority/Host portion of the URL with
	// this value.
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *HTTPRedirect) Reset()                    { *m = HTTPRedirect{} }
func (m *HTTPRedirect) String() string            { return proto.CompactTextString(m) }
func (*HTTPRedirect) ProtoMessage()               {}
func (*HTTPRedirect) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{7} }

func (m *HTTPRedirect) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRedirect) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// HTTPRewrite can be used to rewrite specific parts of a HTTP request
// before forwarding the request to the destination. Rewrite primitive can
// be used only with HTTPRouteDestination. The following example
// demonstrates how to rewrite the URL prefix for api call (/ratings) to
// ratings service before making the actual API call.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - match:
//     - uri:
//         prefix: /ratings
//     rewrite:
//       uri: /v1/bookRatings
//     route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
// ```
//
type HTTPRewrite struct {
	// rewrite the path (or the prefix) portion of the URI with this
	// value. If the original URI was matched based on prefix, the value
	// provided in this field will replace the corresponding matched prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// rewrite the Authority/Host header with this value.
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *HTTPRewrite) Reset()                    { *m = HTTPRewrite{} }
func (m *HTTPRewrite) String() string            { return proto.CompactTextString(m) }
func (*HTTPRewrite) ProtoMessage()               {}
func (*HTTPRewrite) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{8} }

func (m *HTTPRewrite) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRewrite) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// Describes how to match a given string in HTTP headers. Match is
// case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType isStringMatch_MatchType `protobuf_oneof:"match_type"`
}

func (m *StringMatch) Reset()                    { *m = StringMatch{} }
func (m *StringMatch) String() string            { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()               {}
func (*StringMatch) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{9} }

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
	Equal(interface{}) bool
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}
type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}
type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*StringMatch_Exact) isStringMatch_MatchType()  {}
func (*StringMatch_Prefix) isStringMatch_MatchType() {}
func (*StringMatch_Regex) isStringMatch_MatchType()  {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringMatch_OneofMarshaler, _StringMatch_OneofUnmarshaler, _StringMatch_OneofSizer, []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

func _StringMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Exact)
	case *StringMatch_Prefix:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Prefix)
	case *StringMatch_Regex:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("StringMatch.MatchType has unexpected type %T", x)
	}
	return nil
}

func _StringMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringMatch)
	switch tag {
	case 1: // match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Exact{x}
		return true, err
	case 2: // match_type.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Prefix{x}
		return true, err
	case 3: // match_type.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _StringMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Exact)))
		n += len(x.Exact)
	case *StringMatch_Prefix:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *StringMatch_Regex:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     retries:
//       attempts: 3
//       perTryTimeout: 2s
// ```
//
type HTTPRetry struct {
	// REQUIRED. Number of retries for a given request. The interval
	// between retries will be determined automatically (25ms+). Actual
	// number of retries attempted depends on the httpReqTimeout.
	Attempts int32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout *google_protobuf1.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
}

func (m *HTTPRetry) Reset()                    { *m = HTTPRetry{} }
func (m *HTTPRetry) String() string            { return proto.CompactTextString(m) }
func (*HTTPRetry) ProtoMessage()               {}
func (*HTTPRetry) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{10} }

func (m *HTTPRetry) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *HTTPRetry) GetPerTryTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

// Describes the Cross-Origin Resource Sharing (CORS) policy, for a given
// service. Refer to
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
// for further details about cross origin resource sharing. For example,
// the following rule restricts cross origin requests to those originating
// from example.com domain using HTTP POST/GET, and sets the
// Access-Control-Allow-Credentials header to false. In addition, it only
// exposes X-Foo-bar header and sets an expiry period of 1 day.
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     corsPolicy:
//       allowOrigin:
//       - example.com
//       allowMethods:
//       - POST
//       - GET
//       allowCredentials: false
//       allowHeaders:
//       - X-Foo-Bar
//       maxAge: "1d"
// ```
//
type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The
	// content will be serialized into the Access-Control-Allow-Origin
	// header. Wildcard * will allow all origins.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin" json:"allow_origin,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to
	// access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders" json:"expose_headers,omitempty"`
	// Specifies how long the the results of a preflight request can be
	// cached. Translates to the Access-Control-Max-Age header.
	MaxAge *google_protobuf1.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to
	// Access-Control-Allow-Credentials header.
	AllowCredentials *google_protobuf2.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials" json:"allow_credentials,omitempty"`
}

func (m *CorsPolicy) Reset()                    { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string            { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()               {}
func (*CorsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{11} }

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *google_protobuf1.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *google_protobuf2.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// HTTPFaultInjection can be used to specify one or more faults to inject
// while forwarding http requests to the destination specified in a route.
// Fault specification is part of a VirtualService rule. Faults include
// aborting the Http request from downstream service, and/or delaying
// proxying of requests. A fault rule MUST HAVE delay or abort or both.
//
// *Note:* Delay and abort faults are independent of one another, even if
// both are specified simultaneously.
type HTTPFaultInjection struct {
	// Delay requests before forwarding, emulating various failures such as
	// network issues, overloaded upstream service, etc.
	Delay *HTTPFaultInjection_Delay `protobuf:"bytes,1,opt,name=delay" json:"delay,omitempty"`
	// Abort Http request attempts and return error codes back to downstream
	// service, giving the impression that the upstream service is faulty.
	Abort *HTTPFaultInjection_Abort `protobuf:"bytes,2,opt,name=abort" json:"abort,omitempty"`
}

func (m *HTTPFaultInjection) Reset()                    { *m = HTTPFaultInjection{} }
func (m *HTTPFaultInjection) String() string            { return proto.CompactTextString(m) }
func (*HTTPFaultInjection) ProtoMessage()               {}
func (*HTTPFaultInjection) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{12} }

func (m *HTTPFaultInjection) GetDelay() *HTTPFaultInjection_Delay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *HTTPFaultInjection) GetAbort() *HTTPFaultInjection_Abort {
	if m != nil {
		return m.Abort
	}
	return nil
}

// Delay specification is used to inject latency into the request
// forwarding path. The following example will introduce a 5 second delay
// in 1 out of every 1000 requests to the "v1" version of the "reviews"
// service from all pods with label env: prod
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: reviews-route
// spec:
//   hosts:
//   - reviews.prod.svc.cluster.local
//   http:
//   - match:
//     - sourceLabels:
//         env: prod
//     route:
//     - destination:
//         host: reviews.prod.svc.cluster.local
//         subset: v1
//     fault:
//       delay:
//         percentage:
//           value: 0.001
//         fixedDelay: 5s
// ```
//
// The _fixedDelay_ field is used to indicate the amount of delay in seconds.
// The optional _percentage_ field can be used to only delay a certain
// percentage of requests. If left unspecified, all request will be delayed.
type HTTPFaultInjection_Delay struct {
	// Percentage of requests on which the delay will be injected (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"`
	// Types that are valid to be assigned to HttpDelayType:
	//	*HTTPFaultInjection_Delay_FixedDelay
	//	*HTTPFaultInjection_Delay_ExponentialDelay
	HttpDelayType isHTTPFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
	// Percentage of requests on which the delay will be injected.
	Percentage *Percent `protobuf:"bytes,5,opt,name=percentage" json:"percentage,omitempty"`
}

func (m *HTTPFaultInjection_Delay) Reset()         { *m = HTTPFaultInjection_Delay{} }
func (m *HTTPFaultInjection_Delay) String() string { return proto.CompactTextString(m) }
func (*HTTPFaultInjection_Delay) ProtoMessage()    {}
func (*HTTPFaultInjection_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptorRouteConfig, []int{12, 0}
}

type isHTTPFaultInjection_Delay_HttpDelayType interface {
	isHTTPFaultInjection_Delay_HttpDelayType()
	Equal(interface{}) bool
}

type HTTPFaultInjection_Delay_FixedDelay struct {
	FixedDelay *google_protobuf1.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,oneof"`
}
type HTTPFaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *google_protobuf1.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,oneof"`
}

func (*HTTPFaultInjection_Delay_FixedDelay) isHTTPFaultInjection_Delay_HttpDelayType()       {}
func (*HTTPFaultInjection_Delay_ExponentialDelay) isHTTPFaultInjection_Delay_HttpDelayType() {}

func (m *HTTPFaultInjection_Delay) GetHttpDelayType() isHTTPFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Delay) GetFixedDelay() *google_protobuf1.Duration {
	if x, ok := m.GetHttpDelayType().(*HTTPFaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetExponentialDelay() *google_protobuf1.Duration {
	if x, ok := m.GetHttpDelayType().(*HTTPFaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPFaultInjection_Delay) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPFaultInjection_Delay_OneofMarshaler, _HTTPFaultInjection_Delay_OneofUnmarshaler, _HTTPFaultInjection_Delay_OneofSizer, []interface{}{
		(*HTTPFaultInjection_Delay_FixedDelay)(nil),
		(*HTTPFaultInjection_Delay_ExponentialDelay)(nil),
	}
}

func _HTTPFaultInjection_Delay_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HTTPFaultInjection_Delay_FixedDelay:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FixedDelay); err != nil {
			return err
		}
	case *HTTPFaultInjection_Delay_ExponentialDelay:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExponentialDelay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HTTPFaultInjection_Delay.HttpDelayType has unexpected type %T", x)
	}
	return nil
}

func _HTTPFaultInjection_Delay_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPFaultInjection_Delay)
	switch tag {
	case 2: // http_delay_type.fixed_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HTTPFaultInjection_Delay_FixedDelay{msg}
		return true, err
	case 3: // http_delay_type.exponential_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HTTPFaultInjection_Delay_ExponentialDelay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPFaultInjection_Delay_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HTTPFaultInjection_Delay_FixedDelay:
		s := proto.Size(x.FixedDelay)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HTTPFaultInjection_Delay_ExponentialDelay:
		s := proto.Size(x.ExponentialDelay)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Abort specification is used to prematurely abort a request with a
// pre-specified error code. The following example will return an HTTP 400
// error code for 1 out of every 1000 requests to the "ratings" service "v1".
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: VirtualService
// metadata:
//   name: ratings-route
// spec:
//   hosts:
//   - ratings.prod.svc.cluster.local
//   http:
//   - route:
//     - destination:
//         host: ratings.prod.svc.cluster.local
//         subset: v1
//     fault:
//       abort:
//         percentage:
//           value: 0.001
//         httpStatus: 400
// ```
//
// The _httpStatus_ field is used to indicate the HTTP status code to
// return to the caller. The optional _percentage_ field can be used to only
// abort a certain percentage of requests. If not specified, all requests are
// aborted.
type HTTPFaultInjection_Abort struct {
	// Percentage of requests to be aborted with the error code provided (0-100).
	// Use of integer `percent` value is deprecated. Use the double `percentage`
	// field instead.
	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"`
	// Types that are valid to be assigned to ErrorType:
	//	*HTTPFaultInjection_Abort_HttpStatus
	//	*HTTPFaultInjection_Abort_GrpcStatus
	//	*HTTPFaultInjection_Abort_Http2Error
	ErrorType isHTTPFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
	// Percentage of requests to be aborted with the error code provided.
	Percentage *Percent `protobuf:"bytes,5,opt,name=percentage" json:"percentage,omitempty"`
}

func (m *HTTPFaultInjection_Abort) Reset()         { *m = HTTPFaultInjection_Abort{} }
func (m *HTTPFaultInjection_Abort) String() string { return proto.CompactTextString(m) }
func (*HTTPFaultInjection_Abort) ProtoMessage()    {}
func (*HTTPFaultInjection_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptorRouteConfig, []int{12, 1}
}

type isHTTPFaultInjection_Abort_ErrorType interface {
	isHTTPFaultInjection_Abort_ErrorType()
	Equal(interface{}) bool
}

type HTTPFaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,proto3,oneof"`
}
type HTTPFaultInjection_Abort_GrpcStatus struct {
	GrpcStatus string `protobuf:"bytes,3,opt,name=grpc_status,json=grpcStatus,proto3,oneof"`
}
type HTTPFaultInjection_Abort_Http2Error struct {
	Http2Error string `protobuf:"bytes,4,opt,name=http2_error,json=http2Error,proto3,oneof"`
}

func (*HTTPFaultInjection_Abort_HttpStatus) isHTTPFaultInjection_Abort_ErrorType() {}
func (*HTTPFaultInjection_Abort_GrpcStatus) isHTTPFaultInjection_Abort_ErrorType() {}
func (*HTTPFaultInjection_Abort_Http2Error) isHTTPFaultInjection_Abort_ErrorType() {}

func (m *HTTPFaultInjection_Abort) GetErrorType() isHTTPFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *HTTPFaultInjection_Abort) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetGrpcStatus() string {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_GrpcStatus); ok {
		return x.GrpcStatus
	}
	return ""
}

func (m *HTTPFaultInjection_Abort) GetHttp2Error() string {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_Http2Error); ok {
		return x.Http2Error
	}
	return ""
}

func (m *HTTPFaultInjection_Abort) GetPercentage() *Percent {
	if m != nil {
		return m.Percentage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPFaultInjection_Abort) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPFaultInjection_Abort_OneofMarshaler, _HTTPFaultInjection_Abort_OneofUnmarshaler, _HTTPFaultInjection_Abort_OneofSizer, []interface{}{
		(*HTTPFaultInjection_Abort_HttpStatus)(nil),
		(*HTTPFaultInjection_Abort_GrpcStatus)(nil),
		(*HTTPFaultInjection_Abort_Http2Error)(nil),
	}
}

func _HTTPFaultInjection_Abort_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HTTPFaultInjection_Abort_HttpStatus:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.HttpStatus))
	case *HTTPFaultInjection_Abort_GrpcStatus:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.GrpcStatus)
	case *HTTPFaultInjection_Abort_Http2Error:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Http2Error)
	case nil:
	default:
		return fmt.Errorf("HTTPFaultInjection_Abort.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _HTTPFaultInjection_Abort_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPFaultInjection_Abort)
	switch tag {
	case 2: // error_type.http_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &HTTPFaultInjection_Abort_HttpStatus{int32(x)}
		return true, err
	case 3: // error_type.grpc_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HTTPFaultInjection_Abort_GrpcStatus{x}
		return true, err
	case 4: // error_type.http2_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HTTPFaultInjection_Abort_Http2Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPFaultInjection_Abort_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HTTPFaultInjection_Abort_HttpStatus:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HttpStatus))
	case *HTTPFaultInjection_Abort_GrpcStatus:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GrpcStatus)))
		n += len(x.GrpcStatus)
	case *HTTPFaultInjection_Abort_Http2Error:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Http2Error)))
		n += len(x.Http2Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// PortSelector specifies the number of a port to be used for
// matching or selection for final routing.
type PortSelector struct {
	// Types that are valid to be assigned to Port:
	//	*PortSelector_Number
	//	*PortSelector_Name
	Port isPortSelector_Port `protobuf_oneof:"port"`
}

func (m *PortSelector) Reset()                    { *m = PortSelector{} }
func (m *PortSelector) String() string            { return proto.CompactTextString(m) }
func (*PortSelector) ProtoMessage()               {}
func (*PortSelector) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{13} }

type isPortSelector_Port interface {
	isPortSelector_Port()
	Equal(interface{}) bool
}

type PortSelector_Number struct {
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3,oneof"`
}
type PortSelector_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*PortSelector_Number) isPortSelector_Port() {}
func (*PortSelector_Name) isPortSelector_Port()   {}

func (m *PortSelector) GetPort() isPortSelector_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *PortSelector) GetNumber() uint32 {
	if x, ok := m.GetPort().(*PortSelector_Number); ok {
		return x.Number
	}
	return 0
}

func (m *PortSelector) GetName() string {
	if x, ok := m.GetPort().(*PortSelector_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PortSelector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PortSelector_OneofMarshaler, _PortSelector_OneofUnmarshaler, _PortSelector_OneofSizer, []interface{}{
		(*PortSelector_Number)(nil),
		(*PortSelector_Name)(nil),
	}
}

func _PortSelector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PortSelector)
	// port
	switch x := m.Port.(type) {
	case *PortSelector_Number:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Number))
	case *PortSelector_Name:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("PortSelector.Port has unexpected type %T", x)
	}
	return nil
}

func _PortSelector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PortSelector)
	switch tag {
	case 1: // port.number
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Port = &PortSelector_Number{uint32(x)}
		return true, err
	case 2: // port.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Port = &PortSelector_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _PortSelector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PortSelector)
	// port
	switch x := m.Port.(type) {
	case *PortSelector_Number:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Number))
	case *PortSelector_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Percent specifies a percentage in the range of [0.0, 100.0].
type Percent struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Percent) Reset()                    { *m = Percent{} }
func (m *Percent) String() string            { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()               {}
func (*Percent) Descriptor() ([]byte, []int) { return fileDescriptorRouteConfig, []int{14} }

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Routing)(nil), "supergloo.solo.io.Routing")
	proto.RegisterType((*HTTPRoute)(nil), "supergloo.solo.io.HTTPRoute")
	proto.RegisterType((*HTTPMatchRequest)(nil), "supergloo.solo.io.HTTPMatchRequest")
	proto.RegisterType((*HTTPRouteDestination)(nil), "supergloo.solo.io.HTTPRouteDestination")
	proto.RegisterType((*RouteDestination)(nil), "supergloo.solo.io.RouteDestination")
	proto.RegisterType((*L4MatchAttributes)(nil), "supergloo.solo.io.L4MatchAttributes")
	proto.RegisterType((*TLSMatchAttributes)(nil), "supergloo.solo.io.TLSMatchAttributes")
	proto.RegisterType((*HTTPRedirect)(nil), "supergloo.solo.io.HTTPRedirect")
	proto.RegisterType((*HTTPRewrite)(nil), "supergloo.solo.io.HTTPRewrite")
	proto.RegisterType((*StringMatch)(nil), "supergloo.solo.io.StringMatch")
	proto.RegisterType((*HTTPRetry)(nil), "supergloo.solo.io.HTTPRetry")
	proto.RegisterType((*CorsPolicy)(nil), "supergloo.solo.io.CorsPolicy")
	proto.RegisterType((*HTTPFaultInjection)(nil), "supergloo.solo.io.HTTPFaultInjection")
	proto.RegisterType((*HTTPFaultInjection_Delay)(nil), "supergloo.solo.io.HTTPFaultInjection.Delay")
	proto.RegisterType((*HTTPFaultInjection_Abort)(nil), "supergloo.solo.io.HTTPFaultInjection.Abort")
	proto.RegisterType((*PortSelector)(nil), "supergloo.solo.io.PortSelector")
	proto.RegisterType((*Percent)(nil), "supergloo.solo.io.Percent")
}
func (this *Routing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Routing)
	if !ok {
		that2, ok := that.(Routing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MeshHttpRoutes) != len(that1.MeshHttpRoutes) {
		return false
	}
	for i := range this.MeshHttpRoutes {
		if !this.MeshHttpRoutes[i].Equal(that1.MeshHttpRoutes[i]) {
			return false
		}
	}
	if len(this.IngressHttpRoutes) != len(that1.IngressHttpRoutes) {
		return false
	}
	for i := range this.IngressHttpRoutes {
		if !this.IngressHttpRoutes[i].Equal(that1.IngressHttpRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *HTTPRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRoute)
	if !ok {
		that2, ok := that.(HTTPRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Match) != len(that1.Match) {
		return false
	}
	for i := range this.Match {
		if !this.Match[i].Equal(that1.Match[i]) {
			return false
		}
	}
	if len(this.Route) != len(that1.Route) {
		return false
	}
	for i := range this.Route {
		if !this.Route[i].Equal(that1.Route[i]) {
			return false
		}
	}
	if !this.Redirect.Equal(that1.Redirect) {
		return false
	}
	if !this.Rewrite.Equal(that1.Rewrite) {
		return false
	}
	if this.WebsocketUpgrade != that1.WebsocketUpgrade {
		return false
	}
	if !this.Timeout.Equal(that1.Timeout) {
		return false
	}
	if !this.Retries.Equal(that1.Retries) {
		return false
	}
	if !this.Fault.Equal(that1.Fault) {
		return false
	}
	if !this.Mirror.Equal(that1.Mirror) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if len(this.AppendHeaders) != len(that1.AppendHeaders) {
		return false
	}
	for i := range this.AppendHeaders {
		if this.AppendHeaders[i] != that1.AppendHeaders[i] {
			return false
		}
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	return true
}
func (this *HTTPMatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPMatchRequest)
	if !ok {
		that2, ok := that.(HTTPMatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uri.Equal(that1.Uri) {
		return false
	}
	if !this.Scheme.Equal(that1.Scheme) {
		return false
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !this.Authority.Equal(that1.Authority) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if this.Port != that1.Port {
		return false
	}
	if len(this.SourceLabels) != len(that1.SourceLabels) {
		return false
	}
	for i := range this.SourceLabels {
		if this.SourceLabels[i] != that1.SourceLabels[i] {
			return false
		}
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if this.Gateways[i] != that1.Gateways[i] {
			return false
		}
	}
	return true
}
func (this *HTTPRouteDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRouteDestination)
	if !ok {
		that2, ok := that.(HTTPRouteDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if len(this.RemoveResponseHeaders) != len(that1.RemoveResponseHeaders) {
		return false
	}
	for i := range this.RemoveResponseHeaders {
		if this.RemoveResponseHeaders[i] != that1.RemoveResponseHeaders[i] {
			return false
		}
	}
	if len(this.AppendResponseHeaders) != len(that1.AppendResponseHeaders) {
		return false
	}
	for i := range this.AppendResponseHeaders {
		if this.AppendResponseHeaders[i] != that1.AppendResponseHeaders[i] {
			return false
		}
	}
	if len(this.RemoveRequestHeaders) != len(that1.RemoveRequestHeaders) {
		return false
	}
	for i := range this.RemoveRequestHeaders {
		if this.RemoveRequestHeaders[i] != that1.RemoveRequestHeaders[i] {
			return false
		}
	}
	if len(this.AppendRequestHeaders) != len(that1.AppendRequestHeaders) {
		return false
	}
	for i := range this.AppendRequestHeaders {
		if this.AppendRequestHeaders[i] != that1.AppendRequestHeaders[i] {
			return false
		}
	}
	return true
}
func (this *RouteDestination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteDestination)
	if !ok {
		that2, ok := that.(RouteDestination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	return true
}
func (this *L4MatchAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L4MatchAttributes)
	if !ok {
		that2, ok := that.(L4MatchAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DestinationSubnets) != len(that1.DestinationSubnets) {
		return false
	}
	for i := range this.DestinationSubnets {
		if this.DestinationSubnets[i] != that1.DestinationSubnets[i] {
			return false
		}
	}
	if this.Port != that1.Port {
		return false
	}
	if this.SourceSubnet != that1.SourceSubnet {
		return false
	}
	if len(this.SourceLabels) != len(that1.SourceLabels) {
		return false
	}
	for i := range this.SourceLabels {
		if this.SourceLabels[i] != that1.SourceLabels[i] {
			return false
		}
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if this.Gateways[i] != that1.Gateways[i] {
			return false
		}
	}
	return true
}
func (this *TLSMatchAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSMatchAttributes)
	if !ok {
		that2, ok := that.(TLSMatchAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SniHosts) != len(that1.SniHosts) {
		return false
	}
	for i := range this.SniHosts {
		if this.SniHosts[i] != that1.SniHosts[i] {
			return false
		}
	}
	if len(this.DestinationSubnets) != len(that1.DestinationSubnets) {
		return false
	}
	for i := range this.DestinationSubnets {
		if this.DestinationSubnets[i] != that1.DestinationSubnets[i] {
			return false
		}
	}
	if this.Port != that1.Port {
		return false
	}
	if this.SourceSubnet != that1.SourceSubnet {
		return false
	}
	if len(this.SourceLabels) != len(that1.SourceLabels) {
		return false
	}
	for i := range this.SourceLabels {
		if this.SourceLabels[i] != that1.SourceLabels[i] {
			return false
		}
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if this.Gateways[i] != that1.Gateways[i] {
			return false
		}
	}
	return true
}
func (this *HTTPRedirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRedirect)
	if !ok {
		that2, ok := that.(HTTPRedirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *HTTPRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRewrite)
	if !ok {
		that2, ok := that.(HTTPRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}
func (this *StringMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch)
	if !ok {
		that2, ok := that.(StringMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MatchType == nil {
		if this.MatchType != nil {
			return false
		}
	} else if this.MatchType == nil {
		return false
	} else if !this.MatchType.Equal(that1.MatchType) {
		return false
	}
	return true
}
func (this *StringMatch_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch_Exact)
	if !ok {
		that2, ok := that.(StringMatch_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *StringMatch_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch_Prefix)
	if !ok {
		that2, ok := that.(StringMatch_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *StringMatch_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringMatch_Regex)
	if !ok {
		that2, ok := that.(StringMatch_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *HTTPRetry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRetry)
	if !ok {
		that2, ok := that.(HTTPRetry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Attempts != that1.Attempts {
		return false
	}
	if !this.PerTryTimeout.Equal(that1.PerTryTimeout) {
		return false
	}
	return true
}
func (this *CorsPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CorsPolicy)
	if !ok {
		that2, ok := that.(CorsPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowOrigin) != len(that1.AllowOrigin) {
		return false
	}
	for i := range this.AllowOrigin {
		if this.AllowOrigin[i] != that1.AllowOrigin[i] {
			return false
		}
	}
	if len(this.AllowMethods) != len(that1.AllowMethods) {
		return false
	}
	for i := range this.AllowMethods {
		if this.AllowMethods[i] != that1.AllowMethods[i] {
			return false
		}
	}
	if len(this.AllowHeaders) != len(that1.AllowHeaders) {
		return false
	}
	for i := range this.AllowHeaders {
		if this.AllowHeaders[i] != that1.AllowHeaders[i] {
			return false
		}
	}
	if len(this.ExposeHeaders) != len(that1.ExposeHeaders) {
		return false
	}
	for i := range this.ExposeHeaders {
		if this.ExposeHeaders[i] != that1.ExposeHeaders[i] {
			return false
		}
	}
	if !this.MaxAge.Equal(that1.MaxAge) {
		return false
	}
	if !this.AllowCredentials.Equal(that1.AllowCredentials) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection)
	if !ok {
		that2, ok := that.(HTTPFaultInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delay.Equal(that1.Delay) {
		return false
	}
	if !this.Abort.Equal(that1.Abort) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Delay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Delay)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Delay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Percent != that1.Percent {
		return false
	}
	if that1.HttpDelayType == nil {
		if this.HttpDelayType != nil {
			return false
		}
	} else if this.HttpDelayType == nil {
		return false
	} else if !this.HttpDelayType.Equal(that1.HttpDelayType) {
		return false
	}
	if !this.Percentage.Equal(that1.Percentage) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Delay_FixedDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Delay_FixedDelay)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Delay_FixedDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FixedDelay.Equal(that1.FixedDelay) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Delay_ExponentialDelay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Delay_ExponentialDelay)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Delay_ExponentialDelay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExponentialDelay.Equal(that1.ExponentialDelay) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Percent != that1.Percent {
		return false
	}
	if that1.ErrorType == nil {
		if this.ErrorType != nil {
			return false
		}
	} else if this.ErrorType == nil {
		return false
	} else if !this.ErrorType.Equal(that1.ErrorType) {
		return false
	}
	if !this.Percentage.Equal(that1.Percentage) {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort_HttpStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort_HttpStatus)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort_HttpStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpStatus != that1.HttpStatus {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort_GrpcStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort_GrpcStatus)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort_GrpcStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GrpcStatus != that1.GrpcStatus {
		return false
	}
	return true
}
func (this *HTTPFaultInjection_Abort_Http2Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPFaultInjection_Abort_Http2Error)
	if !ok {
		that2, ok := that.(HTTPFaultInjection_Abort_Http2Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Http2Error != that1.Http2Error {
		return false
	}
	return true
}
func (this *PortSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortSelector)
	if !ok {
		that2, ok := that.(PortSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Port == nil {
		if this.Port != nil {
			return false
		}
	} else if this.Port == nil {
		return false
	} else if !this.Port.Equal(that1.Port) {
		return false
	}
	return true
}
func (this *PortSelector_Number) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortSelector_Number)
	if !ok {
		that2, ok := that.(PortSelector_Number)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	return true
}
func (this *PortSelector_Name) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortSelector_Name)
	if !ok {
		that2, ok := that.(PortSelector_Name)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Percent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Percent)
	if !ok {
		that2, ok := that.(Percent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}

func init() { proto.RegisterFile("route_config.proto", fileDescriptorRouteConfig) }

var fileDescriptorRouteConfig = []byte{
	// 1532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0xdb, 0xb6,
	0x17, 0xaf, 0x3f, 0x64, 0xc7, 0xc7, 0x4e, 0x1a, 0xb3, 0x69, 0xea, 0xfa, 0xdf, 0x7f, 0x9b, 0xba,
	0x28, 0x16, 0xa0, 0x98, 0xdd, 0xa6, 0x5d, 0xd6, 0xef, 0x2e, 0xe9, 0x97, 0x37, 0xa4, 0x58, 0xa0,
	0x64, 0xbb, 0xc8, 0x06, 0x08, 0xb2, 0xcc, 0xc8, 0x6a, 0x64, 0x51, 0xa3, 0xa8, 0xc6, 0xde, 0xbb,
	0x0c, 0xbb, 0xdd, 0x1b, 0xec, 0x05, 0xf6, 0x0c, 0xc3, 0x6e, 0xb7, 0x9b, 0xbd, 0xc0, 0x2e, 0x77,
	0x31, 0xf0, 0x50, 0xb2, 0x95, 0x38, 0xfe, 0x42, 0x8b, 0x61, 0x57, 0x16, 0x0f, 0x7f, 0xbf, 0xc3,
	0xc3, 0xc3, 0xc3, 0x1f, 0x49, 0x03, 0xe1, 0x2c, 0x14, 0xd4, 0xb0, 0x98, 0x77, 0xe8, 0xd8, 0x75,
	0x9f, 0x33, 0xc1, 0x48, 0x39, 0x08, 0x7d, 0xca, 0x6d, 0x97, 0xb1, 0x7a, 0xc0, 0x5c, 0x56, 0x77,
	0x58, 0x75, 0xc5, 0x66, 0x36, 0xc3, 0xde, 0x86, 0xfc, 0x52, 0xc0, 0xea, 0x55, 0x9b, 0x31, 0xdb,
	0xa5, 0x0d, 0x6c, 0xb5, 0xc2, 0xc3, 0x46, 0x3b, 0xe4, 0xa6, 0x70, 0x98, 0x37, 0xae, 0xff, 0x98,
	0x9b, 0xbe, 0x4f, 0x79, 0x10, 0xf5, 0x3f, 0xb6, 0x1d, 0xd1, 0x09, 0x5b, 0x75, 0x8b, 0x75, 0x1b,
	0x72, 0xa4, 0x8f, 0x1d, 0xa6, 0x7e, 0x8f, 0x1c, 0x21, 0x49, 0x6f, 0xa9, 0x25, 0x82, 0x86, 0x0c,
	0xa4, 0x61, 0xfa, 0x4e, 0xe3, 0xdd, 0x1d, 0x69, 0xec, 0xf5, 0x15, 0xbb, 0xf6, 0x63, 0x0a, 0xf2,
	0x3a, 0x0b, 0x85, 0xe3, 0xd9, 0xe4, 0x15, 0x2c, 0x77, 0x69, 0xd0, 0x31, 0x3a, 0x42, 0xf8, 0x06,
	0x4e, 0x29, 0xa8, 0xa4, 0xd7, 0x32, 0xeb, 0xc5, 0x8d, 0x2b, 0xf5, 0x91, 0xd9, 0xd4, 0x9b, 0xfb,
	0xfb, 0xbb, 0x92, 0x49, 0xf5, 0x25, 0xc9, 0x6a, 0x0a, 0xe1, 0x63, 0x33, 0x20, 0x3b, 0x70, 0xc1,
	0xf1, 0x6c, 0x4e, 0x83, 0xe0, 0x84, 0xab, 0xd4, 0x0c, 0xae, 0xca, 0x11, 0x71, 0xe8, 0xad, 0xf6,
	0x4b, 0x01, 0x0a, 0x03, 0x00, 0x79, 0x00, 0x5a, 0xd7, 0x14, 0x56, 0x27, 0xf2, 0x76, 0x63, 0x8c,
	0xb7, 0x37, 0x12, 0xa3, 0xd3, 0xef, 0x42, 0x1a, 0x08, 0x5d, 0x31, 0xc8, 0x13, 0xd0, 0x30, 0x92,
	0x68, 0x4e, 0x1f, 0x4d, 0x0a, 0xe4, 0x05, 0x0d, 0x84, 0xe3, 0xe1, 0x32, 0xe8, 0x8a, 0x45, 0x1e,
	0xc1, 0x02, 0xa7, 0x6d, 0x87, 0x53, 0x4b, 0x54, 0x32, 0x6b, 0xa9, 0xf5, 0xe2, 0xc6, 0xb5, 0x71,
	0x1e, 0x22, 0x98, 0x3e, 0x20, 0x90, 0xfb, 0x90, 0xe7, 0xf4, 0x98, 0x3b, 0x82, 0x56, 0xb2, 0xc8,
	0xbd, 0x3a, 0x96, 0x8b, 0x28, 0x3d, 0x86, 0x93, 0x5b, 0x50, 0x3e, 0xa6, 0xad, 0x80, 0x59, 0x47,
	0x54, 0x18, 0xa1, 0x6f, 0x73, 0xb3, 0x4d, 0x2b, 0xda, 0x5a, 0x6a, 0x7d, 0x41, 0x5f, 0x1e, 0x74,
	0x7c, 0xa5, 0xec, 0xe4, 0x2e, 0xe4, 0x85, 0xd3, 0xa5, 0x2c, 0x14, 0x95, 0x1c, 0x0e, 0x73, 0xb9,
	0xae, 0xaa, 0xa7, 0x1e, 0x57, 0x4f, 0xfd, 0x45, 0x54, 0x5d, 0x7a, 0x8c, 0x24, 0x9b, 0x32, 0x36,
	0xc1, 0x1d, 0x1a, 0x54, 0xf2, 0x48, 0x1a, 0xbb, 0x44, 0x54, 0xf0, 0xbe, 0x1e, 0x83, 0xc9, 0x23,
	0xd0, 0x0e, 0xcd, 0xd0, 0x15, 0x95, 0x05, 0x64, 0xdd, 0x1c, 0xc3, 0x7a, 0x25, 0x31, 0x9f, 0x7b,
	0xb2, 0x0c, 0x31, 0x9b, 0xc8, 0x21, 0x77, 0x20, 0xd7, 0x75, 0x38, 0x67, 0xbc, 0x52, 0x88, 0x03,
	0x4d, 0x12, 0x93, 0xf9, 0x8f, 0x80, 0xe4, 0x29, 0x14, 0x2d, 0xc6, 0x03, 0xc3, 0x67, 0xae, 0x63,
	0xf5, 0x2b, 0x80, 0xbc, 0xff, 0x9f, 0x31, 0xea, 0x73, 0xc6, 0x83, 0x5d, 0x04, 0xe9, 0x60, 0x0d,
	0xbe, 0xc9, 0x01, 0x2c, 0xc9, 0x8d, 0xe3, 0xb5, 0x8d, 0x0e, 0x35, 0xdb, 0x94, 0x07, 0x95, 0x22,
	0x16, 0x42, 0x63, 0x52, 0x21, 0xd4, 0xb7, 0x90, 0xd2, 0x54, 0x8c, 0x97, 0x9e, 0xe0, 0xfd, 0xed,
	0x74, 0x25, 0xa5, 0x2f, 0x9a, 0x49, 0x3b, 0xd9, 0x84, 0x4b, 0x9c, 0x76, 0xd9, 0x3b, 0x6a, 0x70,
	0x1a, 0xf8, 0xcc, 0x0b, 0xe8, 0x60, 0x90, 0xd2, 0x5a, 0x66, 0xbd, 0xa0, 0x5f, 0x54, 0xdd, 0x7a,
	0xd4, 0x1b, 0xf3, 0x18, 0x5c, 0x8a, 0x62, 0x1a, 0xe1, 0x2d, 0x62, 0x70, 0x9f, 0xce, 0x10, 0xdc,
	0x29, 0xa7, 0x18, 0xa4, 0x7e, 0xd1, 0x3c, 0xab, 0x8f, 0xdc, 0x83, 0xd5, 0x41, 0xa0, 0xb8, 0x3b,
	0x06, 0xe3, 0x2d, 0x61, 0x9c, 0x2b, 0x71, 0x9c, 0xd8, 0x19, 0xb3, 0x5c, 0x58, 0x1d, 0x84, 0x79,
	0x92, 0x75, 0x1e, 0xa3, 0xdc, 0x9c, 0x29, 0xca, 0xa4, 0x4b, 0x15, 0xe4, 0x8a, 0x79, 0x46, 0x57,
	0xf5, 0x33, 0x20, 0xa3, 0x59, 0x27, 0xcb, 0x90, 0x39, 0xa2, 0xfd, 0x4a, 0x6a, 0x2d, 0xb5, 0x5e,
	0xd0, 0xe5, 0x27, 0x59, 0x01, 0xed, 0x9d, 0xe9, 0x86, 0x72, 0x43, 0x4b, 0x9b, 0x6a, 0x3c, 0x4c,
	0xdf, 0x4f, 0x55, 0x9b, 0x50, 0x1d, 0x9f, 0x9a, 0xb9, 0x3c, 0xbd, 0x86, 0xcb, 0x63, 0xc3, 0x9f,
	0xc7, 0x51, 0xed, 0xcf, 0x2c, 0x2c, 0x9f, 0x56, 0x26, 0x72, 0x1b, 0x32, 0x21, 0x77, 0xd0, 0xc1,
	0xd9, 0x92, 0xb0, 0x27, 0xb8, 0xe3, 0xd9, 0x8a, 0x23, 0xa1, 0x64, 0x13, 0x72, 0x81, 0xd5, 0xa1,
	0x5d, 0x35, 0xc2, 0x74, 0x52, 0x84, 0x96, 0xbc, 0x2e, 0x15, 0x1d, 0xd6, 0x8e, 0xb4, 0x6b, 0x2a,
	0x4f, 0xa1, 0xc9, 0x63, 0x28, 0x98, 0xa1, 0xe8, 0x30, 0xee, 0x88, 0xfe, 0x04, 0xe9, 0x4a, 0x52,
	0x87, 0x04, 0xf2, 0x05, 0xe4, 0xe3, 0x42, 0xd1, 0xb0, 0x50, 0x6e, 0xcf, 0xa0, 0xd7, 0xf5, 0x13,
	0x25, 0x12, 0x3b, 0x20, 0x04, 0xb2, 0x3e, 0xe3, 0x4a, 0xd8, 0x16, 0x75, 0xfc, 0x26, 0x07, 0xb0,
	0x18, 0xb0, 0x90, 0x5b, 0xd4, 0x70, 0xcd, 0x16, 0x75, 0xa5, 0x80, 0xc9, 0x51, 0x3e, 0x99, 0x65,
	0x94, 0x3d, 0x24, 0xee, 0x20, 0x4f, 0x0d, 0x55, 0x0a, 0x12, 0x26, 0x52, 0x85, 0x05, 0xdb, 0x14,
	0xf4, 0xd8, 0xec, 0x07, 0x95, 0x05, 0xdc, 0x1b, 0x83, 0x76, 0xf5, 0x00, 0x4a, 0x53, 0x0a, 0xe1,
	0x5e, 0xb2, 0x10, 0xa6, 0xe7, 0x2c, 0x51, 0x71, 0xcf, 0xa0, 0x3c, 0x12, 0xda, 0x5c, 0x95, 0xf6,
	0x7b, 0x16, 0x56, 0xce, 0x3a, 0xc8, 0xc8, 0x23, 0x28, 0xb6, 0x87, 0xcd, 0xa8, 0xea, 0x26, 0x08,
	0x6f, 0x12, 0x4d, 0x56, 0x21, 0x77, 0x4c, 0x1d, 0xbb, 0x23, 0x70, 0x40, 0x4d, 0x8f, 0x5a, 0x93,
	0x94, 0x2f, 0x33, 0x49, 0xf9, 0xbe, 0x1f, 0xaf, 0x7c, 0x59, 0x5c, 0xc4, 0xed, 0x19, 0xcf, 0xe7,
	0x0f, 0x2a, 0x82, 0xda, 0x04, 0x11, 0x3c, 0x1e, 0x2b, 0x82, 0x39, 0x0c, 0x78, 0x6b, 0xde, 0x80,
	0x67, 0xd5, 0xc3, 0xff, 0xa0, 0x9a, 0xd9, 0xb0, 0xfc, 0xaf, 0x94, 0x57, 0xed, 0xe7, 0x34, 0x94,
	0x77, 0xee, 0xe1, 0x26, 0xd9, 0x12, 0x82, 0x3b, 0x2d, 0xbc, 0x61, 0x36, 0xe0, 0x42, 0x82, 0x6c,
	0x04, 0x61, 0xcb, 0xa3, 0x42, 0xdd, 0x30, 0x0b, 0x3a, 0x49, 0x74, 0xed, 0xa9, 0x9e, 0x81, 0x78,
	0xa4, 0x13, 0xe2, 0x71, 0x63, 0x20, 0x1e, 0x8a, 0x8f, 0xca, 0x58, 0x88, 0x55, 0x40, 0x31, 0xc9,
	0x37, 0xa7, 0x15, 0x26, 0x3b, 0xf6, 0xc0, 0x1b, 0x09, 0x73, 0x2e, 0x89, 0xd1, 0x4e, 0x49, 0xcc,
	0x7b, 0xcb, 0xc0, 0xaf, 0x69, 0x20, 0xfb, 0x3b, 0x7b, 0xa7, 0x53, 0xf7, 0x3f, 0x28, 0x04, 0x9e,
	0x63, 0x74, 0x58, 0x30, 0x48, 0xd8, 0x42, 0xe0, 0x39, 0x4d, 0xd9, 0x1e, 0x97, 0xd7, 0xf4, 0xd4,
	0xbc, 0x66, 0x26, 0xe5, 0x35, 0x7b, 0x46, 0x5e, 0xbf, 0x3d, 0x9d, 0x57, 0x6d, 0xec, 0x75, 0x67,
	0x74, 0x12, 0x73, 0x25, 0x36, 0xf7, 0xa1, 0x13, 0xfb, 0x14, 0x4a, 0xc9, 0x5b, 0xbe, 0xe4, 0xc6,
	0x87, 0x78, 0x41, 0x1d, 0xd2, 0x57, 0x92, 0x87, 0xa6, 0xe2, 0x0f, 0x0d, 0xb5, 0x27, 0x50, 0x4c,
	0xdc, 0xf4, 0xe7, 0xa6, 0x53, 0x28, 0x26, 0x4e, 0x0e, 0xb2, 0x0a, 0x1a, 0xed, 0x99, 0x96, 0x50,
	0x0e, 0x9a, 0xe7, 0x74, 0xd5, 0x24, 0x15, 0xc8, 0xf9, 0x9c, 0x1e, 0x3a, 0x3d, 0xe5, 0xa1, 0x79,
	0x4e, 0x8f, 0xda, 0x92, 0xc1, 0xa9, 0x4d, 0x7b, 0xaa, 0xde, 0x25, 0x03, 0x9b, 0xdb, 0x25, 0x00,
	0x7c, 0x28, 0x19, 0xa2, 0xef, 0xd3, 0xda, 0xdb, 0xe8, 0xd5, 0x25, 0xef, 0xfc, 0x32, 0x9f, 0xa6,
	0x10, 0xb4, 0xeb, 0x63, 0xcd, 0xc8, 0xfd, 0x39, 0x68, 0x93, 0x2d, 0x38, 0xef, 0x53, 0x6e, 0x08,
	0xde, 0x37, 0xe2, 0xb7, 0x47, 0x7a, 0xda, 0xdb, 0x63, 0xd1, 0xa7, 0x7c, 0x9f, 0xf7, 0xf7, 0x15,
	0xbe, 0xf6, 0x43, 0x1a, 0x60, 0x78, 0x69, 0x27, 0xd7, 0xa1, 0x64, 0xba, 0x2e, 0x3b, 0x36, 0x18,
	0x77, 0x6c, 0xc7, 0x8b, 0xaa, 0xb4, 0x88, 0xb6, 0x2f, 0xd1, 0x24, 0x6b, 0x4c, 0x41, 0xd4, 0x35,
	0x25, 0x2e, 0x51, 0xc5, 0x7b, 0xa3, 0x6c, 0x43, 0xd0, 0xc9, 0x03, 0x49, 0x81, 0x62, 0x55, 0xbf,
	0x09, 0x4b, 0xb4, 0xe7, 0xb3, 0x53, 0xc7, 0x4f, 0x41, 0x5f, 0x54, 0xd6, 0x18, 0xb6, 0x01, 0xf9,
	0xae, 0xd9, 0x33, 0x4c, 0x5b, 0x3d, 0xbe, 0x26, 0xce, 0x2e, 0xd7, 0x35, 0x7b, 0x5b, 0x36, 0x25,
	0xaf, 0xa1, 0xac, 0xc6, 0xb7, 0x38, 0x6d, 0x53, 0x4f, 0x38, 0xa6, 0x1b, 0x44, 0xef, 0xb2, 0xea,
	0x08, 0x7b, 0x9b, 0x31, 0xf7, 0x6b, 0x59, 0x63, 0xfa, 0x32, 0x92, 0x9e, 0x0f, 0x39, 0xb5, 0xbf,
	0xb2, 0x40, 0x46, 0x9f, 0x52, 0x64, 0x0b, 0xb4, 0x36, 0x75, 0xcd, 0x7e, 0x24, 0xb5, 0xb7, 0x66,
	0x7a, 0x80, 0xd5, 0x5f, 0x48, 0x8a, 0xae, 0x98, 0xd2, 0x85, 0xd9, 0x8a, 0x85, 0x71, 0x66, 0x17,
	0x5b, 0x92, 0xa2, 0x2b, 0x66, 0xf5, 0xef, 0x14, 0x68, 0xe8, 0x93, 0x5c, 0x81, 0xbc, 0x4f, 0xb9,
	0x45, 0x3d, 0x55, 0x8c, 0x1a, 0x3e, 0x94, 0x62, 0x13, 0x79, 0x0c, 0xc5, 0x43, 0xa7, 0x47, 0xdb,
	0x86, 0x8a, 0x79, 0x5a, 0x8d, 0x34, 0xcf, 0xe9, 0x80, 0x78, 0xe5, 0xbb, 0x09, 0x65, 0xb9, 0x20,
	0x9e, 0x4a, 0x49, 0xe4, 0x23, 0x33, 0xdd, 0xc7, 0x72, 0x82, 0xa5, 0x3c, 0x3d, 0x04, 0x88, 0x42,
	0x1a, 0x2e, 0x66, 0xf5, 0x8c, 0x79, 0xef, 0x2a, 0x90, 0x9e, 0x40, 0x6f, 0x97, 0xe1, 0x3c, 0xfe,
	0xa3, 0x81, 0xc3, 0xe3, 0x3e, 0xa9, 0xfe, 0x96, 0x02, 0x0d, 0xf3, 0x31, 0x65, 0xfa, 0xd7, 0xa1,
	0x88, 0xd4, 0x40, 0x98, 0x22, 0x0c, 0xd4, 0x29, 0x27, 0xe7, 0x28, 0x8d, 0x7b, 0x68, 0x93, 0x10,
	0x9b, 0xfb, 0x56, 0x0c, 0x89, 0xb7, 0x27, 0x48, 0xe3, 0x10, 0x22, 0x09, 0x1b, 0x06, 0xc5, 0xb7,
	0x73, 0x36, 0x86, 0xa0, 0xf1, 0x25, 0x3e, 0x93, 0xdf, 0x67, 0x7e, 0x25, 0x00, 0x74, 0xac, 0x24,
	0xe0, 0x15, 0x94, 0x76, 0x19, 0x17, 0x7b, 0xd4, 0xa5, 0x96, 0x60, 0x5c, 0x4a, 0x8a, 0x17, 0x76,
	0x5b, 0x94, 0xe3, 0xfc, 0x16, 0xa5, 0xa4, 0xa8, 0x36, 0x59, 0x81, 0xac, 0x67, 0x46, 0x6f, 0x12,
	0x19, 0x0f, 0xb6, 0xb6, 0x73, 0xea, 0x70, 0xa8, 0x5d, 0x83, 0x7c, 0x34, 0xd8, 0x50, 0x55, 0xa5,
	0x87, 0x54, 0xa4, 0xaa, 0xdb, 0xcf, 0x7e, 0xfa, 0xe3, 0x6a, 0xea, 0xe0, 0xc1, 0x4c, 0x7f, 0x64,
	0x0d, 0x26, 0xd2, 0xf0, 0x8f, 0xec, 0xe8, 0x1f, 0xad, 0x56, 0x0e, 0x97, 0xfe, 0xee, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x24, 0xcb, 0x58, 0xe5, 0x89, 0x13, 0x00, 0x00,
}
