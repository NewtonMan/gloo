// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1alpha3

import (
	"sync"
	"time"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/errutils"
)

var (
	mRoutingSnapshotIn  = stats.Int64("routing.networking.istio.io/snap_emitter/snap_in", "The number of snapshots in", "1")
	mRoutingSnapshotOut = stats.Int64("routing.networking.istio.io/snap_emitter/snap_out", "The number of snapshots out", "1")

	routingsnapshotInView = &view.View{
		Name:        "routing.networking.istio.io_snap_emitter/snap_in",
		Measure:     mRoutingSnapshotIn,
		Description: "The number of snapshots updates coming in",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	routingsnapshotOutView = &view.View{
		Name:        "routing.networking.istio.io/snap_emitter/snap_out",
		Measure:     mRoutingSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(routingsnapshotInView, routingsnapshotOutView)
}

type RoutingEmitter interface {
	Register() error
	DestinationRule() DestinationRuleClient
	VirtualService() VirtualServiceClient
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *RoutingSnapshot, <-chan error, error)
}

func NewRoutingEmitter(destinationRuleClient DestinationRuleClient, virtualServiceClient VirtualServiceClient) RoutingEmitter {
	return NewRoutingEmitterWithEmit(destinationRuleClient, virtualServiceClient, make(chan struct{}))
}

func NewRoutingEmitterWithEmit(destinationRuleClient DestinationRuleClient, virtualServiceClient VirtualServiceClient, emit <-chan struct{}) RoutingEmitter {
	return &routingEmitter{
		destinationRule: destinationRuleClient,
		virtualService:  virtualServiceClient,
		forceEmit:       emit,
	}
}

type routingEmitter struct {
	forceEmit       <-chan struct{}
	destinationRule DestinationRuleClient
	virtualService  VirtualServiceClient
}

func (c *routingEmitter) Register() error {
	if err := c.destinationRule.Register(); err != nil {
		return err
	}
	if err := c.virtualService.Register(); err != nil {
		return err
	}
	return nil
}

func (c *routingEmitter) DestinationRule() DestinationRuleClient {
	return c.destinationRule
}

func (c *routingEmitter) VirtualService() VirtualServiceClient {
	return c.virtualService
}

func (c *routingEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *RoutingSnapshot, <-chan error, error) {
	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for DestinationRule */
	type destinationRuleListWithNamespace struct {
		list      DestinationRuleList
		namespace string
	}
	destinationRuleChan := make(chan destinationRuleListWithNamespace)
	/* Create channel for VirtualService */
	type virtualServiceListWithNamespace struct {
		list      VirtualServiceList
		namespace string
	}
	virtualServiceChan := make(chan virtualServiceListWithNamespace)

	for _, namespace := range watchNamespaces {
		/* Setup watch for DestinationRule */
		destinationRuleNamespacesChan, destinationRuleErrs, err := c.destinationRule.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting DestinationRule watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, destinationRuleErrs, namespace+"-destinationrules")
		}(namespace)
		/* Setup watch for VirtualService */
		virtualServiceNamespacesChan, virtualServiceErrs, err := c.virtualService.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting VirtualService watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, virtualServiceErrs, namespace+"-virtualservices")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case destinationRuleList := <-destinationRuleNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case destinationRuleChan <- destinationRuleListWithNamespace{list: destinationRuleList, namespace: namespace}:
					}
				case virtualServiceList := <-virtualServiceNamespacesChan:
					select {
					case <-ctx.Done():
						return
					case virtualServiceChan <- virtualServiceListWithNamespace{list: virtualServiceList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}

	snapshots := make(chan *RoutingSnapshot)
	go func() {
		originalSnapshot := RoutingSnapshot{}
		currentSnapshot := originalSnapshot.Clone()
		timer := time.NewTicker(time.Second * 1)
		sync := func() {
			if originalSnapshot.Hash() == currentSnapshot.Hash() {
				return
			}

			stats.Record(ctx, mRoutingSnapshotOut.M(1))
			originalSnapshot = currentSnapshot.Clone()
			sentSnapshot := currentSnapshot.Clone()
			snapshots <- &sentSnapshot
		}

		/* TODO (yuval-k): figure out how to make this work to avoid a stale snapshot.
		   		// construct the first snapshot from all the configs that are currently there
		   		// that guarantees that the first snapshot contains all the data.
		   		for range watchNamespaces {
		      destinationRuleNamespacedList := <- destinationRuleChan
		      currentSnapshot.Destinationrules.Clear(destinationRuleNamespacedList.namespace)
		      destinationRuleList := destinationRuleNamespacedList.list
		   	currentSnapshot.Destinationrules.Add(destinationRuleList...)
		      virtualServiceNamespacedList := <- virtualServiceChan
		      currentSnapshot.Virtualservices.Clear(virtualServiceNamespacedList.namespace)
		      virtualServiceList := virtualServiceNamespacedList.list
		   	currentSnapshot.Virtualservices.Add(virtualServiceList...)
		   		}
		*/

		for {
			record := func() { stats.Record(ctx, mRoutingSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				close(snapshots)
				done.Wait()
				close(errs)
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case destinationRuleNamespacedList := <-destinationRuleChan:
				record()

				namespace := destinationRuleNamespacedList.namespace
				destinationRuleList := destinationRuleNamespacedList.list

				currentSnapshot.Destinationrules.Clear(namespace)
				currentSnapshot.Destinationrules.Add(destinationRuleList...)
			case virtualServiceNamespacedList := <-virtualServiceChan:
				record()

				namespace := virtualServiceNamespacedList.namespace
				virtualServiceList := virtualServiceNamespacedList.list

				currentSnapshot.Virtualservices.Clear(namespace)
				currentSnapshot.Virtualservices.Add(virtualServiceList...)
			}
		}
	}()
	return snapshots, errs, nil
}
