// Code generated by protoc-gen-solo-kit. DO NOT EDIT.

package v1alpha3

import (
	"github.com/mitchellh/hashstructure"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"go.uber.org/zap"
)

type RoutingSnapshot struct {
	Virtualservices VirtualservicesByNamespace
}

func (s RoutingSnapshot) Clone() RoutingSnapshot {
	return RoutingSnapshot{
		Virtualservices: s.Virtualservices.Clone(),
	}
}

func (s RoutingSnapshot) snapshotToHash() RoutingSnapshot {
	snapshotForHashing := s.Clone()
	for _, virtualService := range snapshotForHashing.Virtualservices.List() {
		resources.UpdateMetadata(virtualService, func(meta *core.Metadata) {
			meta.ResourceVersion = ""
		})
		virtualService.SetStatus(core.Status{})
	}

	return snapshotForHashing
}

func (s RoutingSnapshot) Hash() uint64 {
	return s.hashStruct(s.snapshotToHash())
}

func (s RoutingSnapshot) HashFields() []zap.Field {
	snapshotForHashing := s.snapshotToHash()
	var fields []zap.Field
	virtualservices := s.hashStruct(snapshotForHashing.Virtualservices.List())
	fields = append(fields, zap.Uint64("virtualservices", virtualservices))

	return append(fields, zap.Uint64("snapshotHash", s.hashStruct(snapshotForHashing)))
}

func (s RoutingSnapshot) hashStruct(v interface{}) uint64 {
	h, err := hashstructure.Hash(v, nil)
	if err != nil {
		panic(err)
	}
	return h
}
