// Code generated by MockGen. DO NOT EDIT.
// Source: ./projects/vcs/pkg/api/v1/change_set_reconciler.sk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clients "github.com/solo-io/solo-kit/pkg/api/v1/clients"
	v1 "github.com/solo-io/solo-projects/projects/vcs/pkg/api/v1"
)

// MockChangeSetReconciler is a mock of ChangeSetReconciler interface
type MockChangeSetReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockChangeSetReconcilerMockRecorder
}

// MockChangeSetReconcilerMockRecorder is the mock recorder for MockChangeSetReconciler
type MockChangeSetReconcilerMockRecorder struct {
	mock *MockChangeSetReconciler
}

// NewMockChangeSetReconciler creates a new mock instance
func NewMockChangeSetReconciler(ctrl *gomock.Controller) *MockChangeSetReconciler {
	mock := &MockChangeSetReconciler{ctrl: ctrl}
	mock.recorder = &MockChangeSetReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChangeSetReconciler) EXPECT() *MockChangeSetReconcilerMockRecorder {
	return m.recorder
}

// Reconcile mocks base method
func (m *MockChangeSetReconciler) Reconcile(namespace string, desiredResources v1.ChangeSetList, transition v1.TransitionChangeSetFunc, opts clients.ListOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", namespace, desiredResources, transition, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockChangeSetReconcilerMockRecorder) Reconcile(namespace, desiredResources, transition, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockChangeSetReconciler)(nil).Reconcile), namespace, desiredResources, transition, opts)
}
