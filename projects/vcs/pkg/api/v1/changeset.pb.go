// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/vcs/api/v1/changeset.proto

package v1 // import "github.com/solo-io/solo-projects/projects/vcs/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
import v1 "github.com/solo-io/gloo/projects/gateway/pkg/api/v1"
import v11 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
import v12 "github.com/solo-io/solo-projects/projects/sqoop/pkg/api/v1"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	Action_NONE      Action = 0
	Action_COMMIT    Action = 1
	Action_CHECK_OUT Action = 2
)

var Action_name = map[int32]string{
	0: "NONE",
	1: "COMMIT",
	2: "CHECK_OUT",
}
var Action_value = map[string]int32{
	"NONE":      0,
	"COMMIT":    1,
	"CHECK_OUT": 2,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_changeset_65f7f401760b8808, []int{0}
}

//
// @solo-kit:resource.short_name=chg
// @solo-kit:resource.plural_name=changesets
// @solo-kit:resource.resource_groups=api.vcs.solo.io
//
// The ChangeSet object represents the current status of a Gloo user's working directory. Each element in the "data"
// element represents the complete snapshot of a resource.
//
type ChangeSet struct {
	// Status indicates the validation status of this resource
	Status core.Status `protobuf:"bytes,1,opt,name=status" json:"status" testdiff:"ignore"`
	// Metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata"`
	// The name of the git branch the changes will be applied to
	Branch types.StringValue `protobuf:"bytes,3,opt,name=branch" json:"branch"`
	// Represents an action that this changeset is waiting to be performed. The default value is NONE.
	PendingAction Action `protobuf:"varint,4,opt,name=pending_action,json=pendingAction,proto3,enum=vcs.solo.io.Action" json:"pending_action,omitempty"`
	// Description of the changeset. This will be the git commit message
	Description types.StringValue `protobuf:"bytes,5,opt,name=description" json:"description"`
	// The number of edits that the user applied to the previous commit.
	// A value greater than zero represents a dirty work tree.
	EditCount types.UInt32Value `protobuf:"bytes,6,opt,name=edit_count,json=editCount" json:"edit_count"`
	// The user who owns this changeset
	// TODO use dedicated message? Also, determine how to handle secrets?
	UserId types.StringValue `protobuf:"bytes,7,opt,name=user_id,json=userId" json:"user_id"`
	// The hash of the commit that the changeset represents an increment upon
	RootCommit types.StringValue `protobuf:"bytes,8,opt,name=root_commit,json=rootCommit" json:"root_commit"`
	// The git commit message for the root commit
	RootDescription types.StringValue `protobuf:"bytes,9,opt,name=root_description,json=rootDescription" json:"root_description"`
	// If a git commit attempt fails, this field will be populated with a user-friendly error message
	// No further git commit attempts will be possible until the user clears this field
	ErrorMsg *types.StringValue `protobuf:"bytes,10,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	// A collection of Gloo resources
	Data                 Data     `protobuf:"bytes,11,opt,name=data" json:"data"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeSet) Reset()         { *m = ChangeSet{} }
func (m *ChangeSet) String() string { return proto.CompactTextString(m) }
func (*ChangeSet) ProtoMessage()    {}
func (*ChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_changeset_65f7f401760b8808, []int{0}
}
func (m *ChangeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeSet.Unmarshal(m, b)
}
func (m *ChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeSet.Marshal(b, m, deterministic)
}
func (dst *ChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSet.Merge(dst, src)
}
func (m *ChangeSet) XXX_Size() int {
	return xxx_messageInfo_ChangeSet.Size(m)
}
func (m *ChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSet proto.InternalMessageInfo

func (m *ChangeSet) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *ChangeSet) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *ChangeSet) GetBranch() types.StringValue {
	if m != nil {
		return m.Branch
	}
	return types.StringValue{}
}

func (m *ChangeSet) GetPendingAction() Action {
	if m != nil {
		return m.PendingAction
	}
	return Action_NONE
}

func (m *ChangeSet) GetDescription() types.StringValue {
	if m != nil {
		return m.Description
	}
	return types.StringValue{}
}

func (m *ChangeSet) GetEditCount() types.UInt32Value {
	if m != nil {
		return m.EditCount
	}
	return types.UInt32Value{}
}

func (m *ChangeSet) GetUserId() types.StringValue {
	if m != nil {
		return m.UserId
	}
	return types.StringValue{}
}

func (m *ChangeSet) GetRootCommit() types.StringValue {
	if m != nil {
		return m.RootCommit
	}
	return types.StringValue{}
}

func (m *ChangeSet) GetRootDescription() types.StringValue {
	if m != nil {
		return m.RootDescription
	}
	return types.StringValue{}
}

func (m *ChangeSet) GetErrorMsg() *types.StringValue {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *ChangeSet) GetData() Data {
	if m != nil {
		return m.Data
	}
	return Data{}
}

// A user-specific snapshot of all gloo resources at a given commit plus any non-committed changes made by the user
type Data struct {
	Gateways             []*v1.Gateway        `protobuf:"bytes,1,rep,name=gateways" json:"gateways,omitempty"`
	VirtualServices      []*v1.VirtualService `protobuf:"bytes,2,rep,name=virtual_services,json=virtualServices" json:"virtual_services,omitempty"`
	Proxies              []*v11.Proxy         `protobuf:"bytes,3,rep,name=proxies" json:"proxies,omitempty"`
	Settings             []*v11.Settings      `protobuf:"bytes,4,rep,name=settings" json:"settings,omitempty"`
	Upstreams            []*v11.Upstream      `protobuf:"bytes,5,rep,name=upstreams" json:"upstreams,omitempty"`
	ResolverMaps         []*v12.ResolverMap   `protobuf:"bytes,6,rep,name=resolver_maps,json=resolverMaps" json:"resolver_maps,omitempty"`
	Schemas              []*v12.Schema        `protobuf:"bytes,7,rep,name=schemas" json:"schemas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_changeset_65f7f401760b8808, []int{1}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetGateways() []*v1.Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *Data) GetVirtualServices() []*v1.VirtualService {
	if m != nil {
		return m.VirtualServices
	}
	return nil
}

func (m *Data) GetProxies() []*v11.Proxy {
	if m != nil {
		return m.Proxies
	}
	return nil
}

func (m *Data) GetSettings() []*v11.Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Data) GetUpstreams() []*v11.Upstream {
	if m != nil {
		return m.Upstreams
	}
	return nil
}

func (m *Data) GetResolverMaps() []*v12.ResolverMap {
	if m != nil {
		return m.ResolverMaps
	}
	return nil
}

func (m *Data) GetSchemas() []*v12.Schema {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func init() {
	proto.RegisterType((*ChangeSet)(nil), "vcs.solo.io.ChangeSet")
	proto.RegisterType((*Data)(nil), "vcs.solo.io.Data")
	proto.RegisterEnum("vcs.solo.io.Action", Action_name, Action_value)
}
func (this *ChangeSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeSet)
	if !ok {
		that2, ok := that.(ChangeSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Branch.Equal(&that1.Branch) {
		return false
	}
	if this.PendingAction != that1.PendingAction {
		return false
	}
	if !this.Description.Equal(&that1.Description) {
		return false
	}
	if !this.EditCount.Equal(&that1.EditCount) {
		return false
	}
	if !this.UserId.Equal(&that1.UserId) {
		return false
	}
	if !this.RootCommit.Equal(&that1.RootCommit) {
		return false
	}
	if !this.RootDescription.Equal(&that1.RootDescription) {
		return false
	}
	if !this.ErrorMsg.Equal(that1.ErrorMsg) {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	if len(this.VirtualServices) != len(that1.VirtualServices) {
		return false
	}
	for i := range this.VirtualServices {
		if !this.VirtualServices[i].Equal(that1.VirtualServices[i]) {
			return false
		}
	}
	if len(this.Proxies) != len(that1.Proxies) {
		return false
	}
	for i := range this.Proxies {
		if !this.Proxies[i].Equal(that1.Proxies[i]) {
			return false
		}
	}
	if len(this.Settings) != len(that1.Settings) {
		return false
	}
	for i := range this.Settings {
		if !this.Settings[i].Equal(that1.Settings[i]) {
			return false
		}
	}
	if len(this.Upstreams) != len(that1.Upstreams) {
		return false
	}
	for i := range this.Upstreams {
		if !this.Upstreams[i].Equal(that1.Upstreams[i]) {
			return false
		}
	}
	if len(this.ResolverMaps) != len(that1.ResolverMaps) {
		return false
	}
	for i := range this.ResolverMaps {
		if !this.ResolverMaps[i].Equal(that1.ResolverMaps[i]) {
			return false
		}
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if !this.Schemas[i].Equal(that1.Schemas[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-projects/projects/vcs/api/v1/changeset.proto", fileDescriptor_changeset_65f7f401760b8808)
}

var fileDescriptor_changeset_65f7f401760b8808 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xdf, 0x4e, 0xdb, 0x3c,
	0x18, 0x87, 0x29, 0x2d, 0xfd, 0xe3, 0x7e, 0x40, 0x31, 0x7c, 0xc8, 0x43, 0x13, 0xa0, 0x1e, 0xa1,
	0x4d, 0x24, 0xa2, 0x70, 0xc0, 0x98, 0xb4, 0x09, 0x52, 0xc6, 0xba, 0xa9, 0x30, 0xa5, 0xc0, 0xc1,
	0x4e, 0x2a, 0x37, 0x35, 0xa9, 0x47, 0x13, 0x67, 0xb6, 0x53, 0xb6, 0xeb, 0xd8, 0x4d, 0xec, 0x52,
	0xb8, 0x0a, 0x0e, 0x76, 0x09, 0xbb, 0x82, 0x29, 0x8e, 0x5d, 0x5a, 0x36, 0xb4, 0xc2, 0x8e, 0x1a,
	0xe7, 0xfd, 0x3d, 0x8f, 0xd3, 0xf4, 0xf5, 0x5b, 0x50, 0xf7, 0xa9, 0xec, 0xc5, 0x1d, 0xcb, 0x63,
	0x81, 0x2d, 0x58, 0x9f, 0x6d, 0x52, 0x96, 0x7e, 0x46, 0x9c, 0x7d, 0x22, 0x9e, 0x14, 0xf6, 0xf0,
	0x62, 0xe0, 0x09, 0x1b, 0x47, 0xd4, 0x1e, 0x6c, 0xd9, 0x5e, 0x0f, 0x87, 0x3e, 0x11, 0x44, 0x5a,
	0x11, 0x67, 0x92, 0xc1, 0xf2, 0xc0, 0x13, 0x56, 0x82, 0x59, 0x94, 0xad, 0x2c, 0xf9, 0xcc, 0x67,
	0xea, 0xbe, 0x9d, 0x5c, 0xa5, 0x91, 0x95, 0x55, 0x9f, 0x31, 0xbf, 0x4f, 0x6c, 0xb5, 0xea, 0xc4,
	0x17, 0xf6, 0x15, 0xc7, 0x51, 0x44, 0xb8, 0xd0, 0xf5, 0xad, 0xfb, 0x1e, 0xe4, 0x92, 0x4a, 0xb3,
	0x6d, 0x40, 0x24, 0xee, 0x62, 0x89, 0x35, 0x62, 0x4f, 0x80, 0x08, 0x89, 0x65, 0x6c, 0xf6, 0x78,
	0x33, 0xf9, 0x97, 0xf5, 0xb1, 0x24, 0x57, 0xf8, 0xab, 0xd1, 0xe8, 0xa5, 0xf6, 0x1c, 0x3f, 0xda,
	0x33, 0xa0, 0x5c, 0xc6, 0xb8, 0xdf, 0x16, 0x84, 0x0f, 0xa8, 0x47, 0xb4, 0x6f, 0xff, 0x01, 0xbe,
	0x3e, 0x63, 0x46, 0x16, 0x71, 0xf6, 0xc5, 0x3c, 0x52, 0xfd, 0x71, 0x0a, 0x41, 0xa4, 0xa4, 0xa1,
	0x2f, 0xfe, 0xcd, 0x12, 0x47, 0x42, 0x72, 0x82, 0x03, 0x6d, 0x69, 0x4c, 0x6e, 0x11, 0x9f, 0x19,
	0x8b, 0x8c, 0x86, 0x13, 0xc1, 0xfa, 0x03, 0xc2, 0xdb, 0x01, 0x8e, 0xb4, 0xca, 0x79, 0xa4, 0x4a,
	0x78, 0x3d, 0x12, 0xe8, 0x3e, 0xa9, 0x5e, 0xcf, 0x80, 0x92, 0xa3, 0x3a, 0xb6, 0x45, 0x24, 0x3c,
	0x02, 0xf9, 0xb4, 0x29, 0x50, 0x66, 0x3d, 0xb3, 0x51, 0xae, 0x2d, 0x59, 0x1e, 0xe3, 0xc4, 0x74,
	0xaf, 0xd5, 0x52, 0xb5, 0x83, 0x27, 0xd7, 0x37, 0x6b, 0x53, 0x3f, 0x6f, 0xd6, 0x16, 0x24, 0x11,
	0xb2, 0x4b, 0x2f, 0x2e, 0xf6, 0xaa, 0xd4, 0x0f, 0x19, 0x27, 0x55, 0x57, 0xe3, 0x70, 0x17, 0x14,
	0x4d, 0x43, 0xa2, 0x69, 0xa5, 0x5a, 0x1e, 0x57, 0x35, 0x75, 0xf5, 0x20, 0x97, 0xc8, 0xdc, 0x61,
	0x1a, 0xee, 0x81, 0x7c, 0x87, 0xe3, 0xd0, 0xeb, 0xa1, 0xac, 0xe2, 0x9e, 0x5a, 0xe9, 0xe1, 0xb0,
	0xcc, 0xe1, 0xb0, 0x5a, 0x92, 0xd3, 0xd0, 0x3f, 0xc7, 0xfd, 0x98, 0x68, 0x5a, 0x13, 0x70, 0x0f,
	0xcc, 0x45, 0x24, 0xec, 0xd2, 0xd0, 0x6f, 0x63, 0x4f, 0x52, 0x16, 0xa2, 0xdc, 0x7a, 0x66, 0x63,
	0xae, 0xb6, 0x68, 0x8d, 0x9c, 0x41, 0x6b, 0x5f, 0x95, 0xdc, 0x59, 0x1d, 0x4d, 0x97, 0xb0, 0x0e,
	0xca, 0x5d, 0x22, 0x3c, 0x4e, 0x23, 0x05, 0xce, 0x4c, 0xbc, 0xf9, 0x28, 0x06, 0xf7, 0x01, 0x20,
	0x5d, 0x2a, 0xdb, 0x1e, 0x8b, 0x43, 0x89, 0xf2, 0xf7, 0x48, 0xce, 0x1a, 0xa1, 0xdc, 0xae, 0x8d,
	0x4a, 0x4a, 0x09, 0xe5, 0x24, 0x10, 0x7c, 0x09, 0x0a, 0xb1, 0x20, 0xbc, 0x4d, 0xbb, 0xa8, 0x30,
	0xf9, 0x1b, 0x48, 0x90, 0x46, 0x17, 0x3a, 0xa0, 0xcc, 0x19, 0x4b, 0xf6, 0x0f, 0x02, 0x2a, 0x51,
	0x71, 0x62, 0x01, 0x48, 0x30, 0x47, 0x51, 0xb0, 0x09, 0x2a, 0x4a, 0x32, 0xfa, 0x3e, 0x4a, 0x13,
	0x9b, 0xe6, 0x13, 0xb6, 0x3e, 0xf2, 0x4e, 0x5e, 0x80, 0x12, 0xe1, 0x9c, 0xf1, 0x76, 0x20, 0x7c,
	0x04, 0xfe, 0xee, 0x71, 0x8b, 0x2a, 0xde, 0x14, 0x3e, 0x7c, 0x0e, 0x72, 0xaa, 0x85, 0xca, 0x8a,
	0x5a, 0x18, 0xfb, 0x19, 0xeb, 0xb7, 0xdd, 0xa3, 0x42, 0xd5, 0x6f, 0x59, 0x90, 0x4b, 0x6e, 0xc2,
	0x1d, 0x50, 0xd4, 0xa3, 0x25, 0xe9, 0xe3, 0xec, 0x46, 0xb9, 0x86, 0x2c, 0x33, 0xa4, 0x0c, 0x7d,
	0x94, 0xae, 0xdd, 0x61, 0x12, 0xbe, 0x03, 0x95, 0x3b, 0x13, 0x48, 0xa0, 0x69, 0x45, 0xaf, 0xfd,
	0x46, 0x9f, 0xa7, 0xc1, 0x56, 0x9a, 0x73, 0xe7, 0x07, 0x63, 0x6b, 0x01, 0x37, 0x41, 0x21, 0x19,
	0x40, 0x94, 0x08, 0x94, 0x55, 0x8a, 0x45, 0x2b, 0x99, 0x09, 0x43, 0xfe, 0x43, 0x32, 0x9d, 0x5c,
	0x93, 0x81, 0x35, 0x50, 0x34, 0xc3, 0x06, 0xe5, 0x54, 0x7e, 0x79, 0x3c, 0xdf, 0xd2, 0x55, 0x77,
	0x98, 0x83, 0x3b, 0xa0, 0x64, 0x46, 0x8b, 0x40, 0x33, 0x7f, 0x82, 0xce, 0x74, 0xd9, 0xbd, 0x0d,
	0xc2, 0xd7, 0x60, 0x76, 0x74, 0x92, 0x08, 0x94, 0x57, 0xe4, 0x8a, 0xa5, 0x26, 0xc4, 0x10, 0x75,
	0x75, 0xa6, 0x89, 0x23, 0xf7, 0x3f, 0x7e, 0xbb, 0x10, 0xd0, 0x06, 0x85, 0x74, 0x7e, 0x08, 0x54,
	0x50, 0xe8, 0xff, 0x77, 0xd0, 0x96, 0xaa, 0xba, 0x26, 0xf5, 0x6c, 0x13, 0xe4, 0xf5, 0x09, 0x2b,
	0x82, 0xdc, 0xf1, 0xc9, 0xf1, 0x61, 0x65, 0x0a, 0x02, 0x90, 0x77, 0x4e, 0x9a, 0xcd, 0xc6, 0x69,
	0x25, 0x03, 0x67, 0x41, 0xc9, 0x79, 0x7b, 0xe8, 0xbc, 0x6f, 0x9f, 0x9c, 0x9d, 0x56, 0xa6, 0x0f,
	0x5e, 0x7d, 0xff, 0xb1, 0x9a, 0xf9, 0xb8, 0xfb, 0xb0, 0x7f, 0xde, 0xe8, 0xd2, 0xd7, 0xc3, 0xad,
	0x93, 0x57, 0x1d, 0xb5, 0xfd, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xc2, 0x9d, 0x71, 0xbc, 0x07,
	0x00, 0x00,
}
