// Code generated by skv2. DO NOT EDIT.

package placement

import (
	"context"

	"github.com/rotisserie/eris"
	multicluster_types "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/multicluster.solo.io/v1alpha1/types"
	"github.com/solo-io/solo-projects/projects/multicluster-admission-webhook/pkg/rbac"
	"k8s.io/apimachinery/pkg/runtime"

	test_multicluster_solo_io_v1alpha1_types "github.com/solo-io/solo-projects/projects/multicluster-admission-webhook/test/internal/api/test.multicluster.solo.io/v1alpha1"
)

// Placement parser for handling typed objects. Implemented by the user.
type TypedParser interface {

	// Parsers for test.multicluster.solo.io/v1alpha1 types.
	ParseTest(ctx context.Context, obj *test_multicluster_solo_io_v1alpha1_types.Test) ([]*multicluster_types.Placement, error)
}

// Generic placement parser for handling runtime.Object.
type parser struct {
	scheme      *runtime.Scheme
	typedParser TypedParser
}

// All types must be registered with the scheme.
func NewParser(scheme *runtime.Scheme, typedParser TypedParser) rbac.Parser {
	return &parser{scheme: scheme, typedParser: typedParser}
}

func (p *parser) Parse(ctx context.Context, rawObj []byte) ([]*multicluster_types.Placement, error) {
	obj, err := rbac.FromRawToObject(p.scheme, rawObj)
	if err != nil {
		return nil, eris.Errorf("Error deserializing raw object: %+v", err)
	}
	switch objType := obj.(type) {

	case *test_multicluster_solo_io_v1alpha1_types.Test:
		return p.typedParser.ParseTest(ctx, obj.(*test_multicluster_solo_io_v1alpha1_types.Test))

	default:
		return nil, eris.Errorf("Unrecognized object type: %T", objType)
	}
}
