// Code generated by skv2. DO NOT EDIT.

package v1alpha1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the test.multicluster.solo.io/v1alpha1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the test.multicluster.solo.io/v1alpha1 APIs
type Clientset interface {
	// clienset for the test.multicluster.solo.io/v1alpha1/v1alpha1 APIs
	Tests() TestClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the test.multicluster.solo.io/v1alpha1/v1alpha1 APIs
func (c *clientSet) Tests() TestClient {
	return NewTestClient(c.client)
}

// Reader knows how to read and list Tests.
type TestReader interface {
	// Get retrieves a Test for the given object key
	GetTest(ctx context.Context, key client.ObjectKey) (*Test, error)

	// List retrieves list of Tests for a given namespace and list options.
	ListTest(ctx context.Context, opts ...client.ListOption) (*TestList, error)
}

// TestTransitionFunction instructs the TestWriter how to transition between an existing
// Test object and a desired on an Upsert
type TestTransitionFunction func(existing, desired *Test) error

// Writer knows how to create, delete, and update Tests.
type TestWriter interface {
	// Create saves the Test object.
	CreateTest(ctx context.Context, obj *Test, opts ...client.CreateOption) error

	// Delete deletes the Test object.
	DeleteTest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Test object.
	UpdateTest(ctx context.Context, obj *Test, opts ...client.UpdateOption) error

	// Patch patches the given Test object.
	PatchTest(ctx context.Context, obj *Test, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Test objects matching the given options.
	DeleteAllOfTest(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Test object.
	UpsertTest(ctx context.Context, obj *Test, transitionFuncs ...TestTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Test object.
type TestStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Test object.
	UpdateTestStatus(ctx context.Context, obj *Test, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given Test object's subresource.
	PatchTestStatus(ctx context.Context, obj *Test, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on Tests.
type TestClient interface {
	TestReader
	TestWriter
	TestStatusWriter
}

type testClient struct {
	client client.Client
}

func NewTestClient(client client.Client) *testClient {
	return &testClient{client: client}
}

func (c *testClient) GetTest(ctx context.Context, key client.ObjectKey) (*Test, error) {
	obj := &Test{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *testClient) ListTest(ctx context.Context, opts ...client.ListOption) (*TestList, error) {
	list := &TestList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *testClient) CreateTest(ctx context.Context, obj *Test, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *testClient) DeleteTest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &Test{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *testClient) UpdateTest(ctx context.Context, obj *Test, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *testClient) PatchTest(ctx context.Context, obj *Test, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *testClient) DeleteAllOfTest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &Test{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *testClient) UpsertTest(ctx context.Context, obj *Test, transitionFuncs ...TestTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*Test), desired.(*Test)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *testClient) UpdateTestStatus(ctx context.Context, obj *Test, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *testClient) PatchTestStatus(ctx context.Context, obj *Test, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides TestClients for multiple clusters.
type MulticlusterTestClient interface {
	// Cluster returns a TestClient for the given cluster
	Cluster(cluster string) (TestClient, error)
}

type multiclusterTestClient struct {
	client multicluster.Client
}

func NewMulticlusterTestClient(client multicluster.Client) MulticlusterTestClient {
	return &multiclusterTestClient{client: client}
}

func (m *multiclusterTestClient) Cluster(cluster string) (TestClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewTestClient(client), nil
}
