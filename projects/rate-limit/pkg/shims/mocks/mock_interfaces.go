// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_shims is a generated GoMock package.
package mock_shims

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/solo-io/rate-limiter/pkg/config"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/ratelimit.solo.io/v1alpha1"
)

// MockRateLimitConfigTranslator is a mock of RateLimitConfigTranslator interface
type MockRateLimitConfigTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitConfigTranslatorMockRecorder
}

// MockRateLimitConfigTranslatorMockRecorder is the mock recorder for MockRateLimitConfigTranslator
type MockRateLimitConfigTranslatorMockRecorder struct {
	mock *MockRateLimitConfigTranslator
}

// NewMockRateLimitConfigTranslator creates a new mock instance
func NewMockRateLimitConfigTranslator(ctrl *gomock.Controller) *MockRateLimitConfigTranslator {
	mock := &MockRateLimitConfigTranslator{ctrl: ctrl}
	mock.recorder = &MockRateLimitConfigTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitConfigTranslator) EXPECT() *MockRateLimitConfigTranslatorMockRecorder {
	return m.recorder
}

// ToDescriptor mocks base method
func (m *MockRateLimitConfigTranslator) ToDescriptor(config *v1alpha1.RateLimitConfig) (*v1alpha1.Descriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDescriptor", config)
	ret0, _ := ret[0].(*v1alpha1.Descriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToDescriptor indicates an expected call of ToDescriptor
func (mr *MockRateLimitConfigTranslatorMockRecorder) ToDescriptor(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDescriptor", reflect.TypeOf((*MockRateLimitConfigTranslator)(nil).ToDescriptor), config)
}

// ToActions mocks base method
func (m *MockRateLimitConfigTranslator) ToActions(config *v1alpha1.RateLimitConfig) ([]*v1alpha1.RateLimitActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToActions", config)
	ret0, _ := ret[0].([]*v1alpha1.RateLimitActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToActions indicates an expected call of ToActions
func (mr *MockRateLimitConfigTranslatorMockRecorder) ToActions(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToActions", reflect.TypeOf((*MockRateLimitConfigTranslator)(nil).ToActions), config)
}

// MockRateLimitDomainGenerator is a mock of RateLimitDomainGenerator interface
type MockRateLimitDomainGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitDomainGeneratorMockRecorder
}

// MockRateLimitDomainGeneratorMockRecorder is the mock recorder for MockRateLimitDomainGenerator
type MockRateLimitDomainGeneratorMockRecorder struct {
	mock *MockRateLimitDomainGenerator
}

// NewMockRateLimitDomainGenerator creates a new mock instance
func NewMockRateLimitDomainGenerator(ctrl *gomock.Controller) *MockRateLimitDomainGenerator {
	mock := &MockRateLimitDomainGenerator{ctrl: ctrl}
	mock.recorder = &MockRateLimitDomainGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitDomainGenerator) EXPECT() *MockRateLimitDomainGeneratorMockRecorder {
	return m.recorder
}

// NewRateLimitDomain mocks base method
func (m *MockRateLimitDomainGenerator) NewRateLimitDomain(ctx context.Context, domain string, descriptors []*v1alpha1.Descriptor) (config.RateLimitDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRateLimitDomain", ctx, domain, descriptors)
	ret0, _ := ret[0].(config.RateLimitDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRateLimitDomain indicates an expected call of NewRateLimitDomain
func (mr *MockRateLimitDomainGeneratorMockRecorder) NewRateLimitDomain(ctx, domain, descriptors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRateLimitDomain", reflect.TypeOf((*MockRateLimitDomainGenerator)(nil).NewRateLimitDomain), ctx, domain, descriptors)
}
