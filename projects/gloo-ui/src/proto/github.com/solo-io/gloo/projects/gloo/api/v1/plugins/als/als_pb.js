/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../../../../gogo/protobuf/gogoproto/gogo_pb.js');
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.exportSymbol('proto.als.plugins.gloo.solo.io.AccessLog', null, global);
goog.exportSymbol('proto.als.plugins.gloo.solo.io.AccessLoggingService', null, global);
goog.exportSymbol('proto.als.plugins.gloo.solo.io.FileSink', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.plugins.gloo.solo.io.AccessLoggingService.repeatedFields_, null);
};
goog.inherits(proto.als.plugins.gloo.solo.io.AccessLoggingService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.plugins.gloo.solo.io.AccessLoggingService.displayName = 'proto.als.plugins.gloo.solo.io.AccessLoggingService';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.prototype.toObject = function(opt_includeInstance) {
  return proto.als.plugins.gloo.solo.io.AccessLoggingService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.plugins.gloo.solo.io.AccessLoggingService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessLogList: jspb.Message.toObjectList(msg.getAccessLogList(),
    proto.als.plugins.gloo.solo.io.AccessLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.plugins.gloo.solo.io.AccessLoggingService}
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.plugins.gloo.solo.io.AccessLoggingService;
  return proto.als.plugins.gloo.solo.io.AccessLoggingService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.plugins.gloo.solo.io.AccessLoggingService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.plugins.gloo.solo.io.AccessLoggingService}
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.als.plugins.gloo.solo.io.AccessLog;
      reader.readMessage(value,proto.als.plugins.gloo.solo.io.AccessLog.deserializeBinaryFromReader);
      msg.addAccessLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.plugins.gloo.solo.io.AccessLoggingService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.plugins.gloo.solo.io.AccessLoggingService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessLogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.als.plugins.gloo.solo.io.AccessLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessLog access_log = 1;
 * @return {!Array<!proto.als.plugins.gloo.solo.io.AccessLog>}
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.prototype.getAccessLogList = function() {
  return /** @type{!Array<!proto.als.plugins.gloo.solo.io.AccessLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.als.plugins.gloo.solo.io.AccessLog, 1));
};


/** @param {!Array<!proto.als.plugins.gloo.solo.io.AccessLog>} value */
proto.als.plugins.gloo.solo.io.AccessLoggingService.prototype.setAccessLogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.als.plugins.gloo.solo.io.AccessLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.als.plugins.gloo.solo.io.AccessLog}
 */
proto.als.plugins.gloo.solo.io.AccessLoggingService.prototype.addAccessLog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.als.plugins.gloo.solo.io.AccessLog, opt_index);
};


proto.als.plugins.gloo.solo.io.AccessLoggingService.prototype.clearAccessLogList = function() {
  this.setAccessLogList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.plugins.gloo.solo.io.AccessLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.als.plugins.gloo.solo.io.AccessLog.oneofGroups_);
};
goog.inherits(proto.als.plugins.gloo.solo.io.AccessLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.plugins.gloo.solo.io.AccessLog.displayName = 'proto.als.plugins.gloo.solo.io.AccessLog';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.als.plugins.gloo.solo.io.AccessLog.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.als.plugins.gloo.solo.io.AccessLog.OutputdestinationCase = {
  OUTPUTDESTINATION_NOT_SET: 0,
  FILE_SINK: 2
};

/**
 * @return {proto.als.plugins.gloo.solo.io.AccessLog.OutputdestinationCase}
 */
proto.als.plugins.gloo.solo.io.AccessLog.prototype.getOutputdestinationCase = function() {
  return /** @type {proto.als.plugins.gloo.solo.io.AccessLog.OutputdestinationCase} */(jspb.Message.computeOneofCase(this, proto.als.plugins.gloo.solo.io.AccessLog.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.plugins.gloo.solo.io.AccessLog.prototype.toObject = function(opt_includeInstance) {
  return proto.als.plugins.gloo.solo.io.AccessLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.plugins.gloo.solo.io.AccessLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.plugins.gloo.solo.io.AccessLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileSink: (f = msg.getFileSink()) && proto.als.plugins.gloo.solo.io.FileSink.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.plugins.gloo.solo.io.AccessLog}
 */
proto.als.plugins.gloo.solo.io.AccessLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.plugins.gloo.solo.io.AccessLog;
  return proto.als.plugins.gloo.solo.io.AccessLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.plugins.gloo.solo.io.AccessLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.plugins.gloo.solo.io.AccessLog}
 */
proto.als.plugins.gloo.solo.io.AccessLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.als.plugins.gloo.solo.io.FileSink;
      reader.readMessage(value,proto.als.plugins.gloo.solo.io.FileSink.deserializeBinaryFromReader);
      msg.setFileSink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.plugins.gloo.solo.io.AccessLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.plugins.gloo.solo.io.AccessLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.plugins.gloo.solo.io.AccessLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.plugins.gloo.solo.io.AccessLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileSink();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.als.plugins.gloo.solo.io.FileSink.serializeBinaryToWriter
    );
  }
};


/**
 * optional FileSink file_sink = 2;
 * @return {?proto.als.plugins.gloo.solo.io.FileSink}
 */
proto.als.plugins.gloo.solo.io.AccessLog.prototype.getFileSink = function() {
  return /** @type{?proto.als.plugins.gloo.solo.io.FileSink} */ (
    jspb.Message.getWrapperField(this, proto.als.plugins.gloo.solo.io.FileSink, 2));
};


/** @param {?proto.als.plugins.gloo.solo.io.FileSink|undefined} value */
proto.als.plugins.gloo.solo.io.AccessLog.prototype.setFileSink = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.als.plugins.gloo.solo.io.AccessLog.oneofGroups_[0], value);
};


proto.als.plugins.gloo.solo.io.AccessLog.prototype.clearFileSink = function() {
  this.setFileSink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.plugins.gloo.solo.io.AccessLog.prototype.hasFileSink = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.plugins.gloo.solo.io.FileSink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.als.plugins.gloo.solo.io.FileSink.oneofGroups_);
};
goog.inherits(proto.als.plugins.gloo.solo.io.FileSink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.plugins.gloo.solo.io.FileSink.displayName = 'proto.als.plugins.gloo.solo.io.FileSink';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.als.plugins.gloo.solo.io.FileSink.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.als.plugins.gloo.solo.io.FileSink.OutputFormatCase = {
  OUTPUT_FORMAT_NOT_SET: 0,
  STRING_FORMAT: 2,
  JSON_FORMAT: 3
};

/**
 * @return {proto.als.plugins.gloo.solo.io.FileSink.OutputFormatCase}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.getOutputFormatCase = function() {
  return /** @type {proto.als.plugins.gloo.solo.io.FileSink.OutputFormatCase} */(jspb.Message.computeOneofCase(this, proto.als.plugins.gloo.solo.io.FileSink.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.toObject = function(opt_includeInstance) {
  return proto.als.plugins.gloo.solo.io.FileSink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.plugins.gloo.solo.io.FileSink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.plugins.gloo.solo.io.FileSink.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringFormat: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonFormat: (f = msg.getJsonFormat()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.plugins.gloo.solo.io.FileSink}
 */
proto.als.plugins.gloo.solo.io.FileSink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.plugins.gloo.solo.io.FileSink;
  return proto.als.plugins.gloo.solo.io.FileSink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.plugins.gloo.solo.io.FileSink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.plugins.gloo.solo.io.FileSink}
 */
proto.als.plugins.gloo.solo.io.FileSink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringFormat(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setJsonFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.plugins.gloo.solo.io.FileSink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.plugins.gloo.solo.io.FileSink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.plugins.gloo.solo.io.FileSink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsonFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.als.plugins.gloo.solo.io.FileSink.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string_format = 2;
 * @return {string}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.getStringFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.als.plugins.gloo.solo.io.FileSink.prototype.setStringFormat = function(value) {
  jspb.Message.setOneofField(this, 2, proto.als.plugins.gloo.solo.io.FileSink.oneofGroups_[0], value);
};


proto.als.plugins.gloo.solo.io.FileSink.prototype.clearStringFormat = function() {
  jspb.Message.setOneofField(this, 2, proto.als.plugins.gloo.solo.io.FileSink.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.hasStringFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Struct json_format = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.getJsonFormat = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.als.plugins.gloo.solo.io.FileSink.prototype.setJsonFormat = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.als.plugins.gloo.solo.io.FileSink.oneofGroups_[0], value);
};


proto.als.plugins.gloo.solo.io.FileSink.prototype.clearJsonFormat = function() {
  this.setJsonFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.plugins.gloo.solo.io.FileSink.prototype.hasJsonFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.als.plugins.gloo.solo.io);
