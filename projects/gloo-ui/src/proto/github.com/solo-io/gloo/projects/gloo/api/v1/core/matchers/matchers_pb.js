/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../../extproto/ext_pb.js');
goog.exportSymbol('proto.matchers.core.gloo.solo.io.HeaderMatcher', null, global);
goog.exportSymbol('proto.matchers.core.gloo.solo.io.Matcher', null, global);
goog.exportSymbol('proto.matchers.core.gloo.solo.io.QueryParameterMatcher', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matchers.core.gloo.solo.io.Matcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.matchers.core.gloo.solo.io.Matcher.repeatedFields_, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_);
};
goog.inherits(proto.matchers.core.gloo.solo.io.Matcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matchers.core.gloo.solo.io.Matcher.displayName = 'proto.matchers.core.gloo.solo.io.Matcher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.matchers.core.gloo.solo.io.Matcher.repeatedFields_ = [6,7,8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.matchers.core.gloo.solo.io.Matcher.PathSpecifierCase = {
  PATH_SPECIFIER_NOT_SET: 0,
  PREFIX: 1,
  EXACT: 2,
  REGEX: 3
};

/**
 * @return {proto.matchers.core.gloo.solo.io.Matcher.PathSpecifierCase}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getPathSpecifierCase = function() {
  return /** @type {proto.matchers.core.gloo.solo.io.Matcher.PathSpecifierCase} */(jspb.Message.computeOneofCase(this, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.toObject = function(opt_includeInstance) {
  return proto.matchers.core.gloo.solo.io.Matcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matchers.core.gloo.solo.io.Matcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matchers.core.gloo.solo.io.Matcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exact: jspb.Message.getFieldWithDefault(msg, 2, ""),
    regex: jspb.Message.getFieldWithDefault(msg, 3, ""),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.matchers.core.gloo.solo.io.HeaderMatcher.toObject, includeInstance),
    queryParametersList: jspb.Message.toObjectList(msg.getQueryParametersList(),
    proto.matchers.core.gloo.solo.io.QueryParameterMatcher.toObject, includeInstance),
    methodsList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matchers.core.gloo.solo.io.Matcher}
 */
proto.matchers.core.gloo.solo.io.Matcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matchers.core.gloo.solo.io.Matcher;
  return proto.matchers.core.gloo.solo.io.Matcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matchers.core.gloo.solo.io.Matcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matchers.core.gloo.solo.io.Matcher}
 */
proto.matchers.core.gloo.solo.io.Matcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExact(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    case 6:
      var value = new proto.matchers.core.gloo.solo.io.HeaderMatcher;
      reader.readMessage(value,proto.matchers.core.gloo.solo.io.HeaderMatcher.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 7:
      var value = new proto.matchers.core.gloo.solo.io.QueryParameterMatcher;
      reader.readMessage(value,proto.matchers.core.gloo.solo.io.QueryParameterMatcher.deserializeBinaryFromReader);
      msg.addQueryParameters(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addMethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matchers.core.gloo.solo.io.Matcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matchers.core.gloo.solo.io.Matcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matchers.core.gloo.solo.io.Matcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.matchers.core.gloo.solo.io.HeaderMatcher.serializeBinaryToWriter
    );
  }
  f = message.getQueryParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.matchers.core.gloo.solo.io.QueryParameterMatcher.serializeBinaryToWriter
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string prefix = 1;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.Matcher.prototype.setPrefix = function(value) {
  jspb.Message.setOneofField(this, 1, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0], value);
};


proto.matchers.core.gloo.solo.io.Matcher.prototype.clearPrefix = function() {
  jspb.Message.setOneofField(this, 1, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string exact = 2;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getExact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.Matcher.prototype.setExact = function(value) {
  jspb.Message.setOneofField(this, 2, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0], value);
};


proto.matchers.core.gloo.solo.io.Matcher.prototype.clearExact = function() {
  jspb.Message.setOneofField(this, 2, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.hasExact = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string regex = 3;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.Matcher.prototype.setRegex = function(value) {
  jspb.Message.setOneofField(this, 3, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0], value);
};


proto.matchers.core.gloo.solo.io.Matcher.prototype.clearRegex = function() {
  jspb.Message.setOneofField(this, 3, proto.matchers.core.gloo.solo.io.Matcher.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.hasRegex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated HeaderMatcher headers = 6;
 * @return {!Array<!proto.matchers.core.gloo.solo.io.HeaderMatcher>}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.matchers.core.gloo.solo.io.HeaderMatcher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.matchers.core.gloo.solo.io.HeaderMatcher, 6));
};


/** @param {!Array<!proto.matchers.core.gloo.solo.io.HeaderMatcher>} value */
proto.matchers.core.gloo.solo.io.Matcher.prototype.setHeadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.matchers.core.gloo.solo.io.HeaderMatcher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.matchers.core.gloo.solo.io.HeaderMatcher}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.matchers.core.gloo.solo.io.HeaderMatcher, opt_index);
};


proto.matchers.core.gloo.solo.io.Matcher.prototype.clearHeadersList = function() {
  this.setHeadersList([]);
};


/**
 * repeated QueryParameterMatcher query_parameters = 7;
 * @return {!Array<!proto.matchers.core.gloo.solo.io.QueryParameterMatcher>}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getQueryParametersList = function() {
  return /** @type{!Array<!proto.matchers.core.gloo.solo.io.QueryParameterMatcher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.matchers.core.gloo.solo.io.QueryParameterMatcher, 7));
};


/** @param {!Array<!proto.matchers.core.gloo.solo.io.QueryParameterMatcher>} value */
proto.matchers.core.gloo.solo.io.Matcher.prototype.setQueryParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.addQueryParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.matchers.core.gloo.solo.io.QueryParameterMatcher, opt_index);
};


proto.matchers.core.gloo.solo.io.Matcher.prototype.clearQueryParametersList = function() {
  this.setQueryParametersList([]);
};


/**
 * repeated string methods = 8;
 * @return {!Array<string>}
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.getMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.matchers.core.gloo.solo.io.Matcher.prototype.setMethodsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.matchers.core.gloo.solo.io.Matcher.prototype.addMethods = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.matchers.core.gloo.solo.io.Matcher.prototype.clearMethodsList = function() {
  this.setMethodsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matchers.core.gloo.solo.io.HeaderMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matchers.core.gloo.solo.io.HeaderMatcher.displayName = 'proto.matchers.core.gloo.solo.io.HeaderMatcher';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.matchers.core.gloo.solo.io.HeaderMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matchers.core.gloo.solo.io.HeaderMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    regex: jspb.Message.getFieldWithDefault(msg, 3, false),
    invertMatch: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matchers.core.gloo.solo.io.HeaderMatcher}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matchers.core.gloo.solo.io.HeaderMatcher;
  return proto.matchers.core.gloo.solo.io.HeaderMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matchers.core.gloo.solo.io.HeaderMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matchers.core.gloo.solo.io.HeaderMatcher}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRegex(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInvertMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matchers.core.gloo.solo.io.HeaderMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matchers.core.gloo.solo.io.HeaderMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegex();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInvertMatch();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool regex = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.getRegex = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.setRegex = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool invert_match = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.getInvertMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.matchers.core.gloo.solo.io.HeaderMatcher.prototype.setInvertMatch = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.matchers.core.gloo.solo.io.QueryParameterMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.matchers.core.gloo.solo.io.QueryParameterMatcher.displayName = 'proto.matchers.core.gloo.solo.io.QueryParameterMatcher';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.matchers.core.gloo.solo.io.QueryParameterMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    regex: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.matchers.core.gloo.solo.io.QueryParameterMatcher;
  return proto.matchers.core.gloo.solo.io.QueryParameterMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRegex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.matchers.core.gloo.solo.io.QueryParameterMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.matchers.core.gloo.solo.io.QueryParameterMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegex();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool regex = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.getRegex = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.matchers.core.gloo.solo.io.QueryParameterMatcher.prototype.setRegex = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.matchers.core.gloo.solo.io);
