/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../../../../gogo/protobuf/gogoproto/gogo_pb.js');
var github_com_solo$io_gloo_projects_gloo_api_v1_options_service_spec_pb = require('../../../../../../../../../github.com/solo-io/gloo/projects/gloo/api/v1/options/service_spec_pb.js');
goog.exportSymbol('proto.consul.options.gloo.solo.io.UpstreamSpec', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consul.options.gloo.solo.io.UpstreamSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.consul.options.gloo.solo.io.UpstreamSpec.repeatedFields_, null);
};
goog.inherits(proto.consul.options.gloo.solo.io.UpstreamSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consul.options.gloo.solo.io.UpstreamSpec.displayName = 'proto.consul.options.gloo.solo.io.UpstreamSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.consul.options.gloo.solo.io.UpstreamSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consul.options.gloo.solo.io.UpstreamSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceTagsList: jspb.Message.getRepeatedField(msg, 2),
    serviceSpec: (f = msg.getServiceSpec()) && github_com_solo$io_gloo_projects_gloo_api_v1_options_service_spec_pb.ServiceSpec.toObject(includeInstance, f),
    connectEnabled: jspb.Message.getFieldWithDefault(msg, 4, false),
    dataCentersList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consul.options.gloo.solo.io.UpstreamSpec}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consul.options.gloo.solo.io.UpstreamSpec;
  return proto.consul.options.gloo.solo.io.UpstreamSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consul.options.gloo.solo.io.UpstreamSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consul.options.gloo.solo.io.UpstreamSpec}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addServiceTags(value);
      break;
    case 3:
      var value = new github_com_solo$io_gloo_projects_gloo_api_v1_options_service_spec_pb.ServiceSpec;
      reader.readMessage(value,github_com_solo$io_gloo_projects_gloo_api_v1_options_service_spec_pb.ServiceSpec.deserializeBinaryFromReader);
      msg.setServiceSpec(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectEnabled(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addDataCenters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consul.options.gloo.solo.io.UpstreamSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consul.options.gloo.solo.io.UpstreamSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getServiceSpec();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_gloo_projects_gloo_api_v1_options_service_spec_pb.ServiceSpec.serializeBinaryToWriter
    );
  }
  f = message.getConnectEnabled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDataCentersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.setServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string service_tags = 2;
 * @return {!Array<string>}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.getServiceTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.setServiceTagsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.addServiceTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.clearServiceTagsList = function() {
  this.setServiceTagsList([]);
};


/**
 * optional options.gloo.solo.io.ServiceSpec service_spec = 3;
 * @return {?proto.options.gloo.solo.io.ServiceSpec}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.getServiceSpec = function() {
  return /** @type{?proto.options.gloo.solo.io.ServiceSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_gloo_projects_gloo_api_v1_options_service_spec_pb.ServiceSpec, 3));
};


/** @param {?proto.options.gloo.solo.io.ServiceSpec|undefined} value */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.setServiceSpec = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.clearServiceSpec = function() {
  this.setServiceSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.hasServiceSpec = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool connect_enabled = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.getConnectEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.setConnectEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated string data_centers = 5;
 * @return {!Array<string>}
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.getDataCentersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.setDataCentersList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.addDataCenters = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.consul.options.gloo.solo.io.UpstreamSpec.prototype.clearDataCentersList = function() {
  this.setDataCentersList([]);
};


goog.object.extend(exports, proto.consul.options.gloo.solo.io);
