/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../../../../gogo/protobuf/gogoproto/gogo_pb.js');
var github_com_solo$io_solo$kit_api_v1_ref_pb = require('../../../../../../../../../github.com/solo-io/solo-kit/api/v1/ref_pb.js');
goog.exportSymbol('proto.aws.plugins.gloo.solo.io.DestinationSpec', null, global);
goog.exportSymbol('proto.aws.plugins.gloo.solo.io.DestinationSpec.InvocationStyle', null, global);
goog.exportSymbol('proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec', null, global);
goog.exportSymbol('proto.aws.plugins.gloo.solo.io.UpstreamSpec', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aws.plugins.gloo.solo.io.UpstreamSpec.repeatedFields_, null);
};
goog.inherits(proto.aws.plugins.gloo.solo.io.UpstreamSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.aws.plugins.gloo.solo.io.UpstreamSpec.displayName = 'proto.aws.plugins.gloo.solo.io.UpstreamSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.aws.plugins.gloo.solo.io.UpstreamSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aws.plugins.gloo.solo.io.UpstreamSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    region: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secretRef: (f = msg.getSecretRef()) && github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.toObject(includeInstance, f),
    lambdaFunctionsList: jspb.Message.toObjectList(msg.getLambdaFunctionsList(),
    proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aws.plugins.gloo.solo.io.UpstreamSpec}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aws.plugins.gloo.solo.io.UpstreamSpec;
  return proto.aws.plugins.gloo.solo.io.UpstreamSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aws.plugins.gloo.solo.io.UpstreamSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aws.plugins.gloo.solo.io.UpstreamSpec}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.setSecretRef(value);
      break;
    case 3:
      var value = new proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec;
      reader.readMessage(value,proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.deserializeBinaryFromReader);
      msg.addLambdaFunctions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aws.plugins.gloo.solo.io.UpstreamSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aws.plugins.gloo.solo.io.UpstreamSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecretRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getLambdaFunctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string region = 1;
 * @return {string}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.setRegion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional core.solo.io.ResourceRef secret_ref = 2;
 * @return {?proto.core.solo.io.ResourceRef}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.getSecretRef = function() {
  return /** @type{?proto.core.solo.io.ResourceRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef, 2));
};


/** @param {?proto.core.solo.io.ResourceRef|undefined} value */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.setSecretRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.clearSecretRef = function() {
  this.setSecretRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.hasSecretRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated LambdaFunctionSpec lambda_functions = 3;
 * @return {!Array<!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec>}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.getLambdaFunctionsList = function() {
  return /** @type{!Array<!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec, 3));
};


/** @param {!Array<!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec>} value */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.setLambdaFunctionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec}
 */
proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.addLambdaFunctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec, opt_index);
};


proto.aws.plugins.gloo.solo.io.UpstreamSpec.prototype.clearLambdaFunctionsList = function() {
  this.setLambdaFunctionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.displayName = 'proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    logicalName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lambdaFunctionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    qualifier: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec;
  return proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogicalName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLambdaFunctionName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQualifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogicalName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLambdaFunctionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQualifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string logical_name = 1;
 * @return {string}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.getLogicalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.setLogicalName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lambda_function_name = 2;
 * @return {string}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.getLambdaFunctionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.setLambdaFunctionName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string qualifier = 3;
 * @return {string}
 */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.getQualifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aws.plugins.gloo.solo.io.LambdaFunctionSpec.prototype.setQualifier = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aws.plugins.gloo.solo.io.DestinationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.aws.plugins.gloo.solo.io.DestinationSpec.displayName = 'proto.aws.plugins.gloo.solo.io.DestinationSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.aws.plugins.gloo.solo.io.DestinationSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aws.plugins.gloo.solo.io.DestinationSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    logicalName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    invocationStyle: jspb.Message.getFieldWithDefault(msg, 2, 0),
    responseTransformation: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aws.plugins.gloo.solo.io.DestinationSpec}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aws.plugins.gloo.solo.io.DestinationSpec;
  return proto.aws.plugins.gloo.solo.io.DestinationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aws.plugins.gloo.solo.io.DestinationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aws.plugins.gloo.solo.io.DestinationSpec}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogicalName(value);
      break;
    case 2:
      var value = /** @type {!proto.aws.plugins.gloo.solo.io.DestinationSpec.InvocationStyle} */ (reader.readEnum());
      msg.setInvocationStyle(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponseTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aws.plugins.gloo.solo.io.DestinationSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aws.plugins.gloo.solo.io.DestinationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogicalName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInvocationStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResponseTransformation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.InvocationStyle = {
  SYNC: 0,
  ASYNC: 1
};

/**
 * optional string logical_name = 1;
 * @return {string}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.getLogicalName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.setLogicalName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InvocationStyle invocation_style = 2;
 * @return {!proto.aws.plugins.gloo.solo.io.DestinationSpec.InvocationStyle}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.getInvocationStyle = function() {
  return /** @type {!proto.aws.plugins.gloo.solo.io.DestinationSpec.InvocationStyle} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.aws.plugins.gloo.solo.io.DestinationSpec.InvocationStyle} value */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.setInvocationStyle = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool response_transformation = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.getResponseTransformation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.aws.plugins.gloo.solo.io.DestinationSpec.prototype.setResponseTransformation = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.aws.plugins.gloo.solo.io);
