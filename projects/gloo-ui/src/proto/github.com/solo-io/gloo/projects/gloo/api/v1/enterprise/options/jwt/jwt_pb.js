/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_solo$io_solo$kit_api_v1_ref_pb = require('../../../../../../../../../../github.com/solo-io/solo-kit/api/v1/ref_pb.js');
var extproto_ext_pb = require('../../../../../../../../../../extproto/ext_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.exportSymbol('proto.jwt.options.gloo.solo.io.ClaimToHeader', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.Jwks', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.LocalJwks', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.Provider', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.RemoteJwks', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.RouteExtension', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.TokenSource', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource', null, global);
goog.exportSymbol('proto.jwt.options.gloo.solo.io.VhostExtension', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.displayName = 'proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    beforeExtAuth: (f = msg.getBeforeExtAuth()) && proto.jwt.options.gloo.solo.io.VhostExtension.toObject(includeInstance, f),
    afterExtAuth: (f = msg.getAfterExtAuth()) && proto.jwt.options.gloo.solo.io.VhostExtension.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension;
  return proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jwt.options.gloo.solo.io.VhostExtension;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.VhostExtension.deserializeBinaryFromReader);
      msg.setBeforeExtAuth(value);
      break;
    case 2:
      var value = new proto.jwt.options.gloo.solo.io.VhostExtension;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.VhostExtension.deserializeBinaryFromReader);
      msg.setAfterExtAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeforeExtAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jwt.options.gloo.solo.io.VhostExtension.serializeBinaryToWriter
    );
  }
  f = message.getAfterExtAuth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jwt.options.gloo.solo.io.VhostExtension.serializeBinaryToWriter
    );
  }
};


/**
 * optional VhostExtension before_ext_auth = 1;
 * @return {?proto.jwt.options.gloo.solo.io.VhostExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.getBeforeExtAuth = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.VhostExtension} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.VhostExtension, 1));
};


/** @param {?proto.jwt.options.gloo.solo.io.VhostExtension|undefined} value */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.setBeforeExtAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.clearBeforeExtAuth = function() {
  this.setBeforeExtAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.hasBeforeExtAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VhostExtension after_ext_auth = 2;
 * @return {?proto.jwt.options.gloo.solo.io.VhostExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.getAfterExtAuth = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.VhostExtension} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.VhostExtension, 2));
};


/** @param {?proto.jwt.options.gloo.solo.io.VhostExtension|undefined} value */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.setAfterExtAuth = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.clearAfterExtAuth = function() {
  this.setAfterExtAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.JwtStagedVhostExtension.prototype.hasAfterExtAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.displayName = 'proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    beforeExtAuth: (f = msg.getBeforeExtAuth()) && proto.jwt.options.gloo.solo.io.RouteExtension.toObject(includeInstance, f),
    afterExtAuth: (f = msg.getAfterExtAuth()) && proto.jwt.options.gloo.solo.io.RouteExtension.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension;
  return proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jwt.options.gloo.solo.io.RouteExtension;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.RouteExtension.deserializeBinaryFromReader);
      msg.setBeforeExtAuth(value);
      break;
    case 2:
      var value = new proto.jwt.options.gloo.solo.io.RouteExtension;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.RouteExtension.deserializeBinaryFromReader);
      msg.setAfterExtAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeforeExtAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jwt.options.gloo.solo.io.RouteExtension.serializeBinaryToWriter
    );
  }
  f = message.getAfterExtAuth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jwt.options.gloo.solo.io.RouteExtension.serializeBinaryToWriter
    );
  }
};


/**
 * optional RouteExtension before_ext_auth = 1;
 * @return {?proto.jwt.options.gloo.solo.io.RouteExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.getBeforeExtAuth = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.RouteExtension} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.RouteExtension, 1));
};


/** @param {?proto.jwt.options.gloo.solo.io.RouteExtension|undefined} value */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.setBeforeExtAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.clearBeforeExtAuth = function() {
  this.setBeforeExtAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.hasBeforeExtAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RouteExtension after_ext_auth = 2;
 * @return {?proto.jwt.options.gloo.solo.io.RouteExtension}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.getAfterExtAuth = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.RouteExtension} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.RouteExtension, 2));
};


/** @param {?proto.jwt.options.gloo.solo.io.RouteExtension|undefined} value */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.setAfterExtAuth = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.clearAfterExtAuth = function() {
  this.setAfterExtAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.JwtStagedRouteExtension.prototype.hasAfterExtAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.VhostExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.VhostExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.VhostExtension.displayName = 'proto.jwt.options.gloo.solo.io.VhostExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.VhostExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.VhostExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.VhostExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.VhostExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    providersMap: (f = msg.getProvidersMap()) ? f.toObject(includeInstance, proto.jwt.options.gloo.solo.io.Provider.toObject) : [],
    allowMissingOrFailedJwt: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.VhostExtension}
 */
proto.jwt.options.gloo.solo.io.VhostExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.VhostExtension;
  return proto.jwt.options.gloo.solo.io.VhostExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.VhostExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.VhostExtension}
 */
proto.jwt.options.gloo.solo.io.VhostExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = msg.getProvidersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.jwt.options.gloo.solo.io.Provider.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowMissingOrFailedJwt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.VhostExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.VhostExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.VhostExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.VhostExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvidersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.jwt.options.gloo.solo.io.Provider.serializeBinaryToWriter);
  }
  f = message.getAllowMissingOrFailedJwt();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * map<string, Provider> providers = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.jwt.options.gloo.solo.io.Provider>}
 */
proto.jwt.options.gloo.solo.io.VhostExtension.prototype.getProvidersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.jwt.options.gloo.solo.io.Provider>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.jwt.options.gloo.solo.io.Provider));
};


proto.jwt.options.gloo.solo.io.VhostExtension.prototype.clearProvidersMap = function() {
  this.getProvidersMap().clear();
};


/**
 * optional bool allow_missing_or_failed_jwt = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jwt.options.gloo.solo.io.VhostExtension.prototype.getAllowMissingOrFailedJwt = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.jwt.options.gloo.solo.io.VhostExtension.prototype.setAllowMissingOrFailedJwt = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.RouteExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.RouteExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.RouteExtension.displayName = 'proto.jwt.options.gloo.solo.io.RouteExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.RouteExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.RouteExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.RouteExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.RouteExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    disable: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.RouteExtension}
 */
proto.jwt.options.gloo.solo.io.RouteExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.RouteExtension;
  return proto.jwt.options.gloo.solo.io.RouteExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.RouteExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.RouteExtension}
 */
proto.jwt.options.gloo.solo.io.RouteExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.RouteExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.RouteExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.RouteExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.RouteExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool disable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jwt.options.gloo.solo.io.RouteExtension.prototype.getDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.jwt.options.gloo.solo.io.RouteExtension.prototype.setDisable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.Provider = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jwt.options.gloo.solo.io.Provider.repeatedFields_, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.Provider, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.Provider.displayName = 'proto.jwt.options.gloo.solo.io.Provider';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jwt.options.gloo.solo.io.Provider.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.Provider.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.Provider} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.Provider.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwks: (f = msg.getJwks()) && proto.jwt.options.gloo.solo.io.Jwks.toObject(includeInstance, f),
    audiencesList: jspb.Message.getRepeatedField(msg, 2),
    issuer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenSource: (f = msg.getTokenSource()) && proto.jwt.options.gloo.solo.io.TokenSource.toObject(includeInstance, f),
    keepToken: jspb.Message.getFieldWithDefault(msg, 5, false),
    claimsToHeadersList: jspb.Message.toObjectList(msg.getClaimsToHeadersList(),
    proto.jwt.options.gloo.solo.io.ClaimToHeader.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.Provider}
 */
proto.jwt.options.gloo.solo.io.Provider.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.Provider;
  return proto.jwt.options.gloo.solo.io.Provider.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.Provider} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.Provider}
 */
proto.jwt.options.gloo.solo.io.Provider.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jwt.options.gloo.solo.io.Jwks;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.Jwks.deserializeBinaryFromReader);
      msg.setJwks(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAudiences(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 4:
      var value = new proto.jwt.options.gloo.solo.io.TokenSource;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.TokenSource.deserializeBinaryFromReader);
      msg.setTokenSource(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeepToken(value);
      break;
    case 6:
      var value = new proto.jwt.options.gloo.solo.io.ClaimToHeader;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.ClaimToHeader.deserializeBinaryFromReader);
      msg.addClaimsToHeaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.Provider.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.Provider} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.Provider.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwks();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jwt.options.gloo.solo.io.Jwks.serializeBinaryToWriter
    );
  }
  f = message.getAudiencesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenSource();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jwt.options.gloo.solo.io.TokenSource.serializeBinaryToWriter
    );
  }
  f = message.getKeepToken();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getClaimsToHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.jwt.options.gloo.solo.io.ClaimToHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional Jwks jwks = 1;
 * @return {?proto.jwt.options.gloo.solo.io.Jwks}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.getJwks = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.Jwks} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.Jwks, 1));
};


/** @param {?proto.jwt.options.gloo.solo.io.Jwks|undefined} value */
proto.jwt.options.gloo.solo.io.Provider.prototype.setJwks = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.jwt.options.gloo.solo.io.Provider.prototype.clearJwks = function() {
  this.setJwks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.hasJwks = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string audiences = 2;
 * @return {!Array<string>}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.getAudiencesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.jwt.options.gloo.solo.io.Provider.prototype.setAudiencesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.addAudiences = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jwt.options.gloo.solo.io.Provider.prototype.clearAudiencesList = function() {
  this.setAudiencesList([]);
};


/**
 * optional string issuer = 3;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.Provider.prototype.setIssuer = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional TokenSource token_source = 4;
 * @return {?proto.jwt.options.gloo.solo.io.TokenSource}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.getTokenSource = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.TokenSource} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.TokenSource, 4));
};


/** @param {?proto.jwt.options.gloo.solo.io.TokenSource|undefined} value */
proto.jwt.options.gloo.solo.io.Provider.prototype.setTokenSource = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.jwt.options.gloo.solo.io.Provider.prototype.clearTokenSource = function() {
  this.setTokenSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.hasTokenSource = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool keep_token = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.getKeepToken = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.jwt.options.gloo.solo.io.Provider.prototype.setKeepToken = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated ClaimToHeader claims_to_headers = 6;
 * @return {!Array<!proto.jwt.options.gloo.solo.io.ClaimToHeader>}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.getClaimsToHeadersList = function() {
  return /** @type{!Array<!proto.jwt.options.gloo.solo.io.ClaimToHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jwt.options.gloo.solo.io.ClaimToHeader, 6));
};


/** @param {!Array<!proto.jwt.options.gloo.solo.io.ClaimToHeader>} value */
proto.jwt.options.gloo.solo.io.Provider.prototype.setClaimsToHeadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.jwt.options.gloo.solo.io.ClaimToHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jwt.options.gloo.solo.io.ClaimToHeader}
 */
proto.jwt.options.gloo.solo.io.Provider.prototype.addClaimsToHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.jwt.options.gloo.solo.io.ClaimToHeader, opt_index);
};


proto.jwt.options.gloo.solo.io.Provider.prototype.clearClaimsToHeadersList = function() {
  this.setClaimsToHeadersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.Jwks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jwt.options.gloo.solo.io.Jwks.oneofGroups_);
};
goog.inherits(proto.jwt.options.gloo.solo.io.Jwks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.Jwks.displayName = 'proto.jwt.options.gloo.solo.io.Jwks';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jwt.options.gloo.solo.io.Jwks.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.jwt.options.gloo.solo.io.Jwks.JwksCase = {
  JWKS_NOT_SET: 0,
  REMOTE: 1,
  LOCAL: 2
};

/**
 * @return {proto.jwt.options.gloo.solo.io.Jwks.JwksCase}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.getJwksCase = function() {
  return /** @type {proto.jwt.options.gloo.solo.io.Jwks.JwksCase} */(jspb.Message.computeOneofCase(this, proto.jwt.options.gloo.solo.io.Jwks.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.Jwks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.Jwks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.Jwks.toObject = function(includeInstance, msg) {
  var f, obj = {
    remote: (f = msg.getRemote()) && proto.jwt.options.gloo.solo.io.RemoteJwks.toObject(includeInstance, f),
    local: (f = msg.getLocal()) && proto.jwt.options.gloo.solo.io.LocalJwks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.Jwks}
 */
proto.jwt.options.gloo.solo.io.Jwks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.Jwks;
  return proto.jwt.options.gloo.solo.io.Jwks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.Jwks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.Jwks}
 */
proto.jwt.options.gloo.solo.io.Jwks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jwt.options.gloo.solo.io.RemoteJwks;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.RemoteJwks.deserializeBinaryFromReader);
      msg.setRemote(value);
      break;
    case 2:
      var value = new proto.jwt.options.gloo.solo.io.LocalJwks;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.LocalJwks.deserializeBinaryFromReader);
      msg.setLocal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.Jwks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.Jwks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.Jwks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.jwt.options.gloo.solo.io.RemoteJwks.serializeBinaryToWriter
    );
  }
  f = message.getLocal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.jwt.options.gloo.solo.io.LocalJwks.serializeBinaryToWriter
    );
  }
};


/**
 * optional RemoteJwks remote = 1;
 * @return {?proto.jwt.options.gloo.solo.io.RemoteJwks}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.getRemote = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.RemoteJwks} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.RemoteJwks, 1));
};


/** @param {?proto.jwt.options.gloo.solo.io.RemoteJwks|undefined} value */
proto.jwt.options.gloo.solo.io.Jwks.prototype.setRemote = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.jwt.options.gloo.solo.io.Jwks.oneofGroups_[0], value);
};


proto.jwt.options.gloo.solo.io.Jwks.prototype.clearRemote = function() {
  this.setRemote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.hasRemote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LocalJwks local = 2;
 * @return {?proto.jwt.options.gloo.solo.io.LocalJwks}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.getLocal = function() {
  return /** @type{?proto.jwt.options.gloo.solo.io.LocalJwks} */ (
    jspb.Message.getWrapperField(this, proto.jwt.options.gloo.solo.io.LocalJwks, 2));
};


/** @param {?proto.jwt.options.gloo.solo.io.LocalJwks|undefined} value */
proto.jwt.options.gloo.solo.io.Jwks.prototype.setLocal = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.jwt.options.gloo.solo.io.Jwks.oneofGroups_[0], value);
};


proto.jwt.options.gloo.solo.io.Jwks.prototype.clearLocal = function() {
  this.setLocal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.Jwks.prototype.hasLocal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.RemoteJwks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.RemoteJwks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.RemoteJwks.displayName = 'proto.jwt.options.gloo.solo.io.RemoteJwks';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.RemoteJwks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.RemoteJwks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    upstreamRef: (f = msg.getUpstreamRef()) && github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.toObject(includeInstance, f),
    cacheDuration: (f = msg.getCacheDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.RemoteJwks}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.RemoteJwks;
  return proto.jwt.options.gloo.solo.io.RemoteJwks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.RemoteJwks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.RemoteJwks}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.setUpstreamRef(value);
      break;
    case 4:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setCacheDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.RemoteJwks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.RemoteJwks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpstreamRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getCacheDuration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional core.solo.io.ResourceRef upstream_ref = 2;
 * @return {?proto.core.solo.io.ResourceRef}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.getUpstreamRef = function() {
  return /** @type{?proto.core.solo.io.ResourceRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef, 2));
};


/** @param {?proto.core.solo.io.ResourceRef|undefined} value */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.setUpstreamRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.clearUpstreamRef = function() {
  this.setUpstreamRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.hasUpstreamRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Duration cache_duration = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.getCacheDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.setCacheDuration = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.clearCacheDuration = function() {
  this.setCacheDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.jwt.options.gloo.solo.io.RemoteJwks.prototype.hasCacheDuration = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.LocalJwks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.LocalJwks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.LocalJwks.displayName = 'proto.jwt.options.gloo.solo.io.LocalJwks';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.LocalJwks.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.LocalJwks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.LocalJwks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.LocalJwks.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.LocalJwks}
 */
proto.jwt.options.gloo.solo.io.LocalJwks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.LocalJwks;
  return proto.jwt.options.gloo.solo.io.LocalJwks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.LocalJwks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.LocalJwks}
 */
proto.jwt.options.gloo.solo.io.LocalJwks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.LocalJwks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.LocalJwks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.LocalJwks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.LocalJwks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.LocalJwks.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.LocalJwks.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.TokenSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jwt.options.gloo.solo.io.TokenSource.repeatedFields_, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.TokenSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.TokenSource.displayName = 'proto.jwt.options.gloo.solo.io.TokenSource';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jwt.options.gloo.solo.io.TokenSource.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.TokenSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.TokenSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.toObject, includeInstance),
    queryParamsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.TokenSource}
 */
proto.jwt.options.gloo.solo.io.TokenSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.TokenSource;
  return proto.jwt.options.gloo.solo.io.TokenSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.TokenSource}
 */
proto.jwt.options.gloo.solo.io.TokenSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource;
      reader.readMessage(value,proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addQueryParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.TokenSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.TokenSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.serializeBinaryToWriter
    );
  }
  f = message.getQueryParamsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.displayName = 'proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prefix: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource}
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource;
  return proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource}
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string header = 1;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.prototype.getHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.prototype.setHeader = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string prefix = 2;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource.prototype.setPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated HeaderSource headers = 1;
 * @return {!Array<!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource>}
 */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource, 1));
};


/** @param {!Array<!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource>} value */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.setHeadersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource}
 */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jwt.options.gloo.solo.io.TokenSource.HeaderSource, opt_index);
};


proto.jwt.options.gloo.solo.io.TokenSource.prototype.clearHeadersList = function() {
  this.setHeadersList([]);
};


/**
 * repeated string query_params = 2;
 * @return {!Array<string>}
 */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.getQueryParamsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.setQueryParamsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.jwt.options.gloo.solo.io.TokenSource.prototype.addQueryParams = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.jwt.options.gloo.solo.io.TokenSource.prototype.clearQueryParamsList = function() {
  this.setQueryParamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jwt.options.gloo.solo.io.ClaimToHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jwt.options.gloo.solo.io.ClaimToHeader.displayName = 'proto.jwt.options.gloo.solo.io.ClaimToHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.jwt.options.gloo.solo.io.ClaimToHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jwt.options.gloo.solo.io.ClaimToHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    claim: jspb.Message.getFieldWithDefault(msg, 1, ""),
    header: jspb.Message.getFieldWithDefault(msg, 2, ""),
    append: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jwt.options.gloo.solo.io.ClaimToHeader}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jwt.options.gloo.solo.io.ClaimToHeader;
  return proto.jwt.options.gloo.solo.io.ClaimToHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jwt.options.gloo.solo.io.ClaimToHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jwt.options.gloo.solo.io.ClaimToHeader}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClaim(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeader(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAppend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jwt.options.gloo.solo.io.ClaimToHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jwt.options.gloo.solo.io.ClaimToHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaim();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppend();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string claim = 1;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.getClaim = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.setClaim = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string header = 2;
 * @return {string}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.getHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.setHeader = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool append = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.getAppend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.jwt.options.gloo.solo.io.ClaimToHeader.prototype.setAppend = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.jwt.options.gloo.solo.io);
