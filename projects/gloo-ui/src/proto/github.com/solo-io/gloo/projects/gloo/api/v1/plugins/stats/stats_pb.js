/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../../../../gogo/protobuf/gogoproto/gogo_pb.js');
goog.exportSymbol('proto.stats.plugins.gloo.solo.io.Stats', null, global);
goog.exportSymbol('proto.stats.plugins.gloo.solo.io.VirtualCluster', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stats.plugins.gloo.solo.io.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stats.plugins.gloo.solo.io.Stats.repeatedFields_, null);
};
goog.inherits(proto.stats.plugins.gloo.solo.io.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stats.plugins.gloo.solo.io.Stats.displayName = 'proto.stats.plugins.gloo.solo.io.Stats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stats.plugins.gloo.solo.io.Stats.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stats.plugins.gloo.solo.io.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.stats.plugins.gloo.solo.io.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stats.plugins.gloo.solo.io.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.plugins.gloo.solo.io.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    virtualClustersList: jspb.Message.toObjectList(msg.getVirtualClustersList(),
    proto.stats.plugins.gloo.solo.io.VirtualCluster.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stats.plugins.gloo.solo.io.Stats}
 */
proto.stats.plugins.gloo.solo.io.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stats.plugins.gloo.solo.io.Stats;
  return proto.stats.plugins.gloo.solo.io.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stats.plugins.gloo.solo.io.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stats.plugins.gloo.solo.io.Stats}
 */
proto.stats.plugins.gloo.solo.io.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.stats.plugins.gloo.solo.io.VirtualCluster;
      reader.readMessage(value,proto.stats.plugins.gloo.solo.io.VirtualCluster.deserializeBinaryFromReader);
      msg.addVirtualClusters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stats.plugins.gloo.solo.io.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stats.plugins.gloo.solo.io.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stats.plugins.gloo.solo.io.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.plugins.gloo.solo.io.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVirtualClustersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.stats.plugins.gloo.solo.io.VirtualCluster.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VirtualCluster virtual_clusters = 10;
 * @return {!Array<!proto.stats.plugins.gloo.solo.io.VirtualCluster>}
 */
proto.stats.plugins.gloo.solo.io.Stats.prototype.getVirtualClustersList = function() {
  return /** @type{!Array<!proto.stats.plugins.gloo.solo.io.VirtualCluster>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stats.plugins.gloo.solo.io.VirtualCluster, 10));
};


/** @param {!Array<!proto.stats.plugins.gloo.solo.io.VirtualCluster>} value */
proto.stats.plugins.gloo.solo.io.Stats.prototype.setVirtualClustersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.stats.plugins.gloo.solo.io.VirtualCluster=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stats.plugins.gloo.solo.io.VirtualCluster}
 */
proto.stats.plugins.gloo.solo.io.Stats.prototype.addVirtualClusters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.stats.plugins.gloo.solo.io.VirtualCluster, opt_index);
};


proto.stats.plugins.gloo.solo.io.Stats.prototype.clearVirtualClustersList = function() {
  this.setVirtualClustersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stats.plugins.gloo.solo.io.VirtualCluster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.stats.plugins.gloo.solo.io.VirtualCluster.displayName = 'proto.stats.plugins.gloo.solo.io.VirtualCluster';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.toObject = function(opt_includeInstance) {
  return proto.stats.plugins.gloo.solo.io.VirtualCluster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stats.plugins.gloo.solo.io.VirtualCluster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pattern: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stats.plugins.gloo.solo.io.VirtualCluster}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stats.plugins.gloo.solo.io.VirtualCluster;
  return proto.stats.plugins.gloo.solo.io.VirtualCluster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stats.plugins.gloo.solo.io.VirtualCluster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stats.plugins.gloo.solo.io.VirtualCluster}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stats.plugins.gloo.solo.io.VirtualCluster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stats.plugins.gloo.solo.io.VirtualCluster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pattern = 2;
 * @return {string}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.setPattern = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.stats.plugins.gloo.solo.io.VirtualCluster.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.stats.plugins.gloo.solo.io);
