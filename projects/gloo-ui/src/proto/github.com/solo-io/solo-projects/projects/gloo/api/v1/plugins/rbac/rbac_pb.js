/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../../../../../gogoproto/gogo_pb.js');
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.Config', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.JWTPrincipal', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.Permissions', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.Policy', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.Principal', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.RouteExtension', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.Settings', null, global);
goog.exportSymbol('proto.rbac.plugins.gloo.solo.io.VhostExtension', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.JWTPrincipal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.JWTPrincipal.displayName = 'proto.rbac.plugins.gloo.solo.io.JWTPrincipal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.JWTPrincipal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.JWTPrincipal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsMap: (f = msg.getClaimsMap()) ? f.toObject(includeInstance, undefined) : [],
    provider: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.JWTPrincipal}
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.JWTPrincipal;
  return proto.rbac.plugins.gloo.solo.io.JWTPrincipal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.JWTPrincipal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.JWTPrincipal}
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getClaimsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.JWTPrincipal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.JWTPrincipal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * map<string, string> claims = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.prototype.getClaimsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.rbac.plugins.gloo.solo.io.JWTPrincipal.prototype.clearClaimsMap = function() {
  this.getClaimsMap().clear();
};


/**
 * optional string provider = 2;
 * @return {string}
 */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rbac.plugins.gloo.solo.io.JWTPrincipal.prototype.setProvider = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.Principal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.Principal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.Principal.displayName = 'proto.rbac.plugins.gloo.solo.io.Principal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.Principal.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.Principal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.Principal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Principal.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwtPrincipal: (f = msg.getJwtPrincipal()) && proto.rbac.plugins.gloo.solo.io.JWTPrincipal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.Principal}
 */
proto.rbac.plugins.gloo.solo.io.Principal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.Principal;
  return proto.rbac.plugins.gloo.solo.io.Principal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.Principal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.Principal}
 */
proto.rbac.plugins.gloo.solo.io.Principal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rbac.plugins.gloo.solo.io.JWTPrincipal;
      reader.readMessage(value,proto.rbac.plugins.gloo.solo.io.JWTPrincipal.deserializeBinaryFromReader);
      msg.setJwtPrincipal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.Principal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.Principal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.Principal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Principal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwtPrincipal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rbac.plugins.gloo.solo.io.JWTPrincipal.serializeBinaryToWriter
    );
  }
};


/**
 * optional JWTPrincipal jwt_principal = 1;
 * @return {?proto.rbac.plugins.gloo.solo.io.JWTPrincipal}
 */
proto.rbac.plugins.gloo.solo.io.Principal.prototype.getJwtPrincipal = function() {
  return /** @type{?proto.rbac.plugins.gloo.solo.io.JWTPrincipal} */ (
    jspb.Message.getWrapperField(this, proto.rbac.plugins.gloo.solo.io.JWTPrincipal, 1));
};


/** @param {?proto.rbac.plugins.gloo.solo.io.JWTPrincipal|undefined} value */
proto.rbac.plugins.gloo.solo.io.Principal.prototype.setJwtPrincipal = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rbac.plugins.gloo.solo.io.Principal.prototype.clearJwtPrincipal = function() {
  this.setJwtPrincipal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rbac.plugins.gloo.solo.io.Principal.prototype.hasJwtPrincipal = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.Permissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rbac.plugins.gloo.solo.io.Permissions.repeatedFields_, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.Permissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.Permissions.displayName = 'proto.rbac.plugins.gloo.solo.io.Permissions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rbac.plugins.gloo.solo.io.Permissions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.Permissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.Permissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Permissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathPrefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.Permissions}
 */
proto.rbac.plugins.gloo.solo.io.Permissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.Permissions;
  return proto.rbac.plugins.gloo.solo.io.Permissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.Permissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.Permissions}
 */
proto.rbac.plugins.gloo.solo.io.Permissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathPrefix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.Permissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.Permissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Permissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string path_prefix = 1;
 * @return {string}
 */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.getPathPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.setPathPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string methods = 2;
 * @return {!Array<string>}
 */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.getMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.setMethodsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.rbac.plugins.gloo.solo.io.Permissions.prototype.addMethods = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.rbac.plugins.gloo.solo.io.Permissions.prototype.clearMethodsList = function() {
  this.setMethodsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.Policy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rbac.plugins.gloo.solo.io.Policy.repeatedFields_, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.Policy.displayName = 'proto.rbac.plugins.gloo.solo.io.Policy';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rbac.plugins.gloo.solo.io.Policy.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.Policy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.Policy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Policy.toObject = function(includeInstance, msg) {
  var f, obj = {
    principalsList: jspb.Message.toObjectList(msg.getPrincipalsList(),
    proto.rbac.plugins.gloo.solo.io.Principal.toObject, includeInstance),
    permissions: (f = msg.getPermissions()) && proto.rbac.plugins.gloo.solo.io.Permissions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.Policy}
 */
proto.rbac.plugins.gloo.solo.io.Policy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.Policy;
  return proto.rbac.plugins.gloo.solo.io.Policy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.Policy}
 */
proto.rbac.plugins.gloo.solo.io.Policy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rbac.plugins.gloo.solo.io.Principal;
      reader.readMessage(value,proto.rbac.plugins.gloo.solo.io.Principal.deserializeBinaryFromReader);
      msg.addPrincipals(value);
      break;
    case 2:
      var value = new proto.rbac.plugins.gloo.solo.io.Permissions;
      reader.readMessage(value,proto.rbac.plugins.gloo.solo.io.Permissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.Policy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Policy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrincipalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rbac.plugins.gloo.solo.io.Principal.serializeBinaryToWriter
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rbac.plugins.gloo.solo.io.Permissions.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Principal principals = 1;
 * @return {!Array<!proto.rbac.plugins.gloo.solo.io.Principal>}
 */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.getPrincipalsList = function() {
  return /** @type{!Array<!proto.rbac.plugins.gloo.solo.io.Principal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rbac.plugins.gloo.solo.io.Principal, 1));
};


/** @param {!Array<!proto.rbac.plugins.gloo.solo.io.Principal>} value */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.setPrincipalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rbac.plugins.gloo.solo.io.Principal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rbac.plugins.gloo.solo.io.Principal}
 */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.addPrincipals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rbac.plugins.gloo.solo.io.Principal, opt_index);
};


proto.rbac.plugins.gloo.solo.io.Policy.prototype.clearPrincipalsList = function() {
  this.setPrincipalsList([]);
};


/**
 * optional Permissions permissions = 2;
 * @return {?proto.rbac.plugins.gloo.solo.io.Permissions}
 */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.getPermissions = function() {
  return /** @type{?proto.rbac.plugins.gloo.solo.io.Permissions} */ (
    jspb.Message.getWrapperField(this, proto.rbac.plugins.gloo.solo.io.Permissions, 2));
};


/** @param {?proto.rbac.plugins.gloo.solo.io.Permissions|undefined} value */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rbac.plugins.gloo.solo.io.Policy.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rbac.plugins.gloo.solo.io.Policy.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.Settings.displayName = 'proto.rbac.plugins.gloo.solo.io.Settings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    requireRbac: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.Settings}
 */
proto.rbac.plugins.gloo.solo.io.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.Settings;
  return proto.rbac.plugins.gloo.solo.io.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.Settings}
 */
proto.rbac.plugins.gloo.solo.io.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequireRbac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequireRbac();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool require_rbac = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rbac.plugins.gloo.solo.io.Settings.prototype.getRequireRbac = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.rbac.plugins.gloo.solo.io.Settings.prototype.setRequireRbac = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.Config.displayName = 'proto.rbac.plugins.gloo.solo.io.Config';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    policiesMap: (f = msg.getPoliciesMap()) ? f.toObject(includeInstance, proto.rbac.plugins.gloo.solo.io.Policy.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.Config}
 */
proto.rbac.plugins.gloo.solo.io.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.Config;
  return proto.rbac.plugins.gloo.solo.io.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.Config}
 */
proto.rbac.plugins.gloo.solo.io.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPoliciesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rbac.plugins.gloo.solo.io.Policy.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoliciesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rbac.plugins.gloo.solo.io.Policy.serializeBinaryToWriter);
  }
};


/**
 * map<string, Policy> policies = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rbac.plugins.gloo.solo.io.Policy>}
 */
proto.rbac.plugins.gloo.solo.io.Config.prototype.getPoliciesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rbac.plugins.gloo.solo.io.Policy>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rbac.plugins.gloo.solo.io.Policy));
};


proto.rbac.plugins.gloo.solo.io.Config.prototype.clearPoliciesMap = function() {
  this.getPoliciesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.VhostExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.VhostExtension.displayName = 'proto.rbac.plugins.gloo.solo.io.VhostExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.VhostExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.VhostExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.rbac.plugins.gloo.solo.io.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.VhostExtension}
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.VhostExtension;
  return proto.rbac.plugins.gloo.solo.io.VhostExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.VhostExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.VhostExtension}
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rbac.plugins.gloo.solo.io.Config;
      reader.readMessage(value,proto.rbac.plugins.gloo.solo.io.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.VhostExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.VhostExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rbac.plugins.gloo.solo.io.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional Config config = 1;
 * @return {?proto.rbac.plugins.gloo.solo.io.Config}
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.prototype.getConfig = function() {
  return /** @type{?proto.rbac.plugins.gloo.solo.io.Config} */ (
    jspb.Message.getWrapperField(this, proto.rbac.plugins.gloo.solo.io.Config, 1));
};


/** @param {?proto.rbac.plugins.gloo.solo.io.Config|undefined} value */
proto.rbac.plugins.gloo.solo.io.VhostExtension.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rbac.plugins.gloo.solo.io.VhostExtension.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rbac.plugins.gloo.solo.io.VhostExtension.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rbac.plugins.gloo.solo.io.RouteExtension.oneofGroups_);
};
goog.inherits(proto.rbac.plugins.gloo.solo.io.RouteExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rbac.plugins.gloo.solo.io.RouteExtension.displayName = 'proto.rbac.plugins.gloo.solo.io.RouteExtension';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.RouteCase = {
  ROUTE_NOT_SET: 0,
  DISABLE: 1,
  CONFIG: 2
};

/**
 * @return {proto.rbac.plugins.gloo.solo.io.RouteExtension.RouteCase}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.getRouteCase = function() {
  return /** @type {proto.rbac.plugins.gloo.solo.io.RouteExtension.RouteCase} */(jspb.Message.computeOneofCase(this, proto.rbac.plugins.gloo.solo.io.RouteExtension.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.rbac.plugins.gloo.solo.io.RouteExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rbac.plugins.gloo.solo.io.RouteExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    disable: jspb.Message.getFieldWithDefault(msg, 1, false),
    config: (f = msg.getConfig()) && proto.rbac.plugins.gloo.solo.io.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rbac.plugins.gloo.solo.io.RouteExtension}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rbac.plugins.gloo.solo.io.RouteExtension;
  return proto.rbac.plugins.gloo.solo.io.RouteExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rbac.plugins.gloo.solo.io.RouteExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rbac.plugins.gloo.solo.io.RouteExtension}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable(value);
      break;
    case 2:
      var value = new proto.rbac.plugins.gloo.solo.io.Config;
      reader.readMessage(value,proto.rbac.plugins.gloo.solo.io.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rbac.plugins.gloo.solo.io.RouteExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rbac.plugins.gloo.solo.io.RouteExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rbac.plugins.gloo.solo.io.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool disable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.getDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.setDisable = function(value) {
  jspb.Message.setOneofField(this, 1, proto.rbac.plugins.gloo.solo.io.RouteExtension.oneofGroups_[0], value);
};


proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.clearDisable = function() {
  jspb.Message.setOneofField(this, 1, proto.rbac.plugins.gloo.solo.io.RouteExtension.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.hasDisable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Config config = 2;
 * @return {?proto.rbac.plugins.gloo.solo.io.Config}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.getConfig = function() {
  return /** @type{?proto.rbac.plugins.gloo.solo.io.Config} */ (
    jspb.Message.getWrapperField(this, proto.rbac.plugins.gloo.solo.io.Config, 2));
};


/** @param {?proto.rbac.plugins.gloo.solo.io.Config|undefined} value */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.setConfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.rbac.plugins.gloo.solo.io.RouteExtension.oneofGroups_[0], value);
};


proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rbac.plugins.gloo.solo.io.RouteExtension.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.rbac.plugins.gloo.solo.io);
