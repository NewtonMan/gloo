/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_solo$io_solo$kit_api_v1_ref_pb = require('../../../../../../../../../github.com/solo-io/solo-kit/api/v1/ref_pb.js');
var gogoproto_gogo_pb = require('../../../../../../../../gogo/protobuf/gogoproto/gogo_pb.js');
var envoy_api_v2_discovery_pb = require('../../../../../../../../../github.com/solo-io/solo-kit/api/external/envoy/api/v2/discovery_pb.js');
var google_api_annotations_pb = require('../../../../../../../../../github.com/solo-io/solo-kit/api/external/google/api/annotations_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ApiKeyAuth', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ApiKeySecret', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.AuthConfig', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.AuthPlugin', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.BasicAuth', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.BufferSettings', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.CustomAuth', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ExtAuthConfig', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.HttpService', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.HttpService.Request', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.HttpService.Response', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.OAuth', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.OauthSecret', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.OpaAuth', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.PluginAuth', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.RouteExtension', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.Settings', null, global);
goog.exportSymbol('proto.extauth.plugins.gloo.solo.io.VhostExtension', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.Settings.displayName = 'proto.extauth.plugins.gloo.solo.io.Settings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    extauthzServerRef: (f = msg.getExtauthzServerRef()) && github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.toObject(includeInstance, f),
    httpService: (f = msg.getHttpService()) && proto.extauth.plugins.gloo.solo.io.HttpService.toObject(includeInstance, f),
    userIdHeader: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requestTimeout: (f = msg.getRequestTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    failureModeAllow: jspb.Message.getFieldWithDefault(msg, 5, false),
    requestBody: (f = msg.getRequestBody()) && proto.extauth.plugins.gloo.solo.io.BufferSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.Settings}
 */
proto.extauth.plugins.gloo.solo.io.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.Settings;
  return proto.extauth.plugins.gloo.solo.io.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.Settings}
 */
proto.extauth.plugins.gloo.solo.io.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.setExtauthzServerRef(value);
      break;
    case 2:
      var value = new proto.extauth.plugins.gloo.solo.io.HttpService;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.HttpService.deserializeBinaryFromReader);
      msg.setHttpService(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdHeader(value);
      break;
    case 4:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setRequestTimeout(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailureModeAllow(value);
      break;
    case 6:
      var value = new proto.extauth.plugins.gloo.solo.io.BufferSettings;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.BufferSettings.deserializeBinaryFromReader);
      msg.setRequestBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtauthzServerRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getHttpService();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.extauth.plugins.gloo.solo.io.HttpService.serializeBinaryToWriter
    );
  }
  f = message.getUserIdHeader();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequestTimeout();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getFailureModeAllow();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRequestBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.extauth.plugins.gloo.solo.io.BufferSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.solo.io.ResourceRef extauthz_server_ref = 1;
 * @return {?proto.core.solo.io.ResourceRef}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.getExtauthzServerRef = function() {
  return /** @type{?proto.core.solo.io.ResourceRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef, 1));
};


/** @param {?proto.core.solo.io.ResourceRef|undefined} value */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.setExtauthzServerRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.extauth.plugins.gloo.solo.io.Settings.prototype.clearExtauthzServerRef = function() {
  this.setExtauthzServerRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.hasExtauthzServerRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HttpService http_service = 2;
 * @return {?proto.extauth.plugins.gloo.solo.io.HttpService}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.getHttpService = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.HttpService} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.HttpService, 2));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.HttpService|undefined} value */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.setHttpService = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.extauth.plugins.gloo.solo.io.Settings.prototype.clearHttpService = function() {
  this.setHttpService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.hasHttpService = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string user_id_header = 3;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.getUserIdHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.setUserIdHeader = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Duration request_timeout = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.getRequestTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.setRequestTimeout = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.extauth.plugins.gloo.solo.io.Settings.prototype.clearRequestTimeout = function() {
  this.setRequestTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.hasRequestTimeout = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool failure_mode_allow = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.getFailureModeAllow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.setFailureModeAllow = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional BufferSettings request_body = 6;
 * @return {?proto.extauth.plugins.gloo.solo.io.BufferSettings}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.getRequestBody = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.BufferSettings} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.BufferSettings, 6));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.BufferSettings|undefined} value */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.setRequestBody = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.extauth.plugins.gloo.solo.io.Settings.prototype.clearRequestBody = function() {
  this.setRequestBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.Settings.prototype.hasRequestBody = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.HttpService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.HttpService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.HttpService.displayName = 'proto.extauth.plugins.gloo.solo.io.HttpService';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.HttpService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.HttpService.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathPrefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    request: (f = msg.getRequest()) && proto.extauth.plugins.gloo.solo.io.HttpService.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.extauth.plugins.gloo.solo.io.HttpService.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.HttpService}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.HttpService;
  return proto.extauth.plugins.gloo.solo.io.HttpService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.HttpService}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathPrefix(value);
      break;
    case 2:
      var value = new proto.extauth.plugins.gloo.solo.io.HttpService.Request;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.HttpService.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 3:
      var value = new proto.extauth.plugins.gloo.solo.io.HttpService.Response;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.HttpService.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.HttpService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.HttpService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.extauth.plugins.gloo.solo.io.HttpService.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.extauth.plugins.gloo.solo.io.HttpService.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.HttpService.Request.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.HttpService.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.HttpService.Request.displayName = 'proto.extauth.plugins.gloo.solo.io.HttpService.Request';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.HttpService.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowedHeadersList: jspb.Message.getRepeatedField(msg, 1),
    headersToAddMap: (f = msg.getHeadersToAddMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.HttpService.Request}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.HttpService.Request;
  return proto.extauth.plugins.gloo.solo.io.HttpService.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.HttpService.Request}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedHeaders(value);
      break;
    case 2:
      var value = msg.getHeadersToAddMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.HttpService.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowedHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getHeadersToAddMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * repeated string allowed_headers = 1;
 * @return {!Array<string>}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.getAllowedHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.setAllowedHeadersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.addAllowedHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.clearAllowedHeadersList = function() {
  this.setAllowedHeadersList([]);
};


/**
 * map<string, string> headers_to_add = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.getHeadersToAddMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.extauth.plugins.gloo.solo.io.HttpService.Request.prototype.clearHeadersToAddMap = function() {
  this.getHeadersToAddMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.HttpService.Response.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.HttpService.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.HttpService.Response.displayName = 'proto.extauth.plugins.gloo.solo.io.HttpService.Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.HttpService.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowedUpstreamHeadersList: jspb.Message.getRepeatedField(msg, 1),
    allowedClientHeadersList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.HttpService.Response}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.HttpService.Response;
  return proto.extauth.plugins.gloo.solo.io.HttpService.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.HttpService.Response}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedUpstreamHeaders(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedClientHeaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.HttpService.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.HttpService.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllowedUpstreamHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAllowedClientHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string allowed_upstream_headers = 1;
 * @return {!Array<string>}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.getAllowedUpstreamHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.setAllowedUpstreamHeadersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.addAllowedUpstreamHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.clearAllowedUpstreamHeadersList = function() {
  this.setAllowedUpstreamHeadersList([]);
};


/**
 * repeated string allowed_client_headers = 2;
 * @return {!Array<string>}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.getAllowedClientHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.setAllowedClientHeadersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.addAllowedClientHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.extauth.plugins.gloo.solo.io.HttpService.Response.prototype.clearAllowedClientHeadersList = function() {
  this.setAllowedClientHeadersList([]);
};


/**
 * optional string path_prefix = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.getPathPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.setPathPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Request request = 2;
 * @return {?proto.extauth.plugins.gloo.solo.io.HttpService.Request}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.getRequest = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.HttpService.Request} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.HttpService.Request, 2));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.HttpService.Request|undefined} value */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.extauth.plugins.gloo.solo.io.HttpService.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Response response = 3;
 * @return {?proto.extauth.plugins.gloo.solo.io.HttpService.Response}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.getResponse = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.HttpService.Response} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.HttpService.Response, 3));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.HttpService.Response|undefined} value */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.extauth.plugins.gloo.solo.io.HttpService.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.HttpService.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.BufferSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.BufferSettings.displayName = 'proto.extauth.plugins.gloo.solo.io.BufferSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.BufferSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.BufferSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxRequestBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    allowPartialMessage: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.BufferSettings}
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.BufferSettings;
  return proto.extauth.plugins.gloo.solo.io.BufferSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.BufferSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.BufferSettings}
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxRequestBytes(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowPartialMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.BufferSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.BufferSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxRequestBytes();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAllowPartialMessage();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 max_request_bytes = 1;
 * @return {number}
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.prototype.getMaxRequestBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.extauth.plugins.gloo.solo.io.BufferSettings.prototype.setMaxRequestBytes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool allow_partial_message = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.extauth.plugins.gloo.solo.io.BufferSettings.prototype.getAllowPartialMessage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.extauth.plugins.gloo.solo.io.BufferSettings.prototype.setAllowPartialMessage = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.CustomAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.CustomAuth.displayName = 'proto.extauth.plugins.gloo.solo.io.CustomAuth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.CustomAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.CustomAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.CustomAuth}
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.CustomAuth;
  return proto.extauth.plugins.gloo.solo.io.CustomAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.CustomAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.CustomAuth}
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.CustomAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.CustomAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.CustomAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.PluginAuth.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.PluginAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.PluginAuth.displayName = 'proto.extauth.plugins.gloo.solo.io.PluginAuth';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.PluginAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.PluginAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginsList: jspb.Message.toObjectList(msg.getPluginsList(),
    proto.extauth.plugins.gloo.solo.io.AuthPlugin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.PluginAuth}
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.PluginAuth;
  return proto.extauth.plugins.gloo.solo.io.PluginAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.PluginAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.PluginAuth}
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.extauth.plugins.gloo.solo.io.AuthPlugin;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.AuthPlugin.deserializeBinaryFromReader);
      msg.addPlugins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.PluginAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.PluginAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.extauth.plugins.gloo.solo.io.AuthPlugin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AuthPlugin plugins = 1;
 * @return {!Array<!proto.extauth.plugins.gloo.solo.io.AuthPlugin>}
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.prototype.getPluginsList = function() {
  return /** @type{!Array<!proto.extauth.plugins.gloo.solo.io.AuthPlugin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.extauth.plugins.gloo.solo.io.AuthPlugin, 1));
};


/** @param {!Array<!proto.extauth.plugins.gloo.solo.io.AuthPlugin>} value */
proto.extauth.plugins.gloo.solo.io.PluginAuth.prototype.setPluginsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthPlugin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.extauth.plugins.gloo.solo.io.AuthPlugin}
 */
proto.extauth.plugins.gloo.solo.io.PluginAuth.prototype.addPlugins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.extauth.plugins.gloo.solo.io.AuthPlugin, opt_index);
};


proto.extauth.plugins.gloo.solo.io.PluginAuth.prototype.clearPluginsList = function() {
  this.setPluginsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.AuthPlugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.AuthPlugin.displayName = 'proto.extauth.plugins.gloo.solo.io.AuthPlugin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.AuthPlugin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthPlugin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pluginFileName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    exportedSymbolName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    config: (f = msg.getConfig()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.AuthPlugin}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.AuthPlugin;
  return proto.extauth.plugins.gloo.solo.io.AuthPlugin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthPlugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.AuthPlugin}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginFileName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExportedSymbolName(value);
      break;
    case 4:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.AuthPlugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthPlugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPluginFileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExportedSymbolName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plugin_file_name = 2;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.getPluginFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.setPluginFileName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string exported_symbol_name = 3;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.getExportedSymbolName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.setExportedSymbolName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Struct config = 4;
 * @return {?proto.google.protobuf.Struct}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.getConfig = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 4));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthPlugin.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.BasicAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.BasicAuth.displayName = 'proto.extauth.plugins.gloo.solo.io.BasicAuth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.BasicAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    realm: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apr: (f = msg.getApr()) && proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.BasicAuth}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.BasicAuth;
  return proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.BasicAuth}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealm(value);
      break;
    case 2:
      var value = new proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.deserializeBinaryFromReader);
      msg.setApr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.BasicAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRealm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.displayName = 'proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersMap: (f = msg.getUsersMap()) ? f.toObject(includeInstance, proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr;
  return proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = msg.getUsersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.serializeBinaryToWriter);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.displayName = 'proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.toObject = function(includeInstance, msg) {
  var f, obj = {
    salt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hashedPassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword;
  return proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSalt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashedPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSalt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHashedPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string salt = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.prototype.getSalt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.prototype.setSalt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hashed_password = 2;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.prototype.getHashedPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword.prototype.setHashedPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, SaltedHashedPassword> users = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword>}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.prototype.getUsersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.SaltedHashedPassword));
};


proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr.prototype.clearUsersMap = function() {
  this.getUsersMap().clear();
};


/**
 * optional string realm = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.getRealm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.setRealm = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Apr apr = 2;
 * @return {?proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.getApr = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr, 2));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.BasicAuth.Apr|undefined} value */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.setApr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.clearApr = function() {
  this.setApr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.BasicAuth.prototype.hasApr = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.OAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.OAuth.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.OAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.OAuth.displayName = 'proto.extauth.plugins.gloo.solo.io.OAuth';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.OAuth.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.OAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.OAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.OAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientSecretRef: (f = msg.getClientSecretRef()) && github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.toObject(includeInstance, f),
    issuerUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    callbackPath: jspb.Message.getFieldWithDefault(msg, 5, ""),
    scopesList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.OAuth}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.OAuth;
  return proto.extauth.plugins.gloo.solo.io.OAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.OAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.OAuth}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.setClientSecretRef(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuerUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackPath(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.OAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.OAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.OAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientSecretRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getIssuerUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAppUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCallbackPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.setClientId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional core.solo.io.ResourceRef client_secret_ref = 2;
 * @return {?proto.core.solo.io.ResourceRef}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.getClientSecretRef = function() {
  return /** @type{?proto.core.solo.io.ResourceRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef, 2));
};


/** @param {?proto.core.solo.io.ResourceRef|undefined} value */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.setClientSecretRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.extauth.plugins.gloo.solo.io.OAuth.prototype.clearClientSecretRef = function() {
  this.setClientSecretRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.hasClientSecretRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string issuer_url = 3;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.getIssuerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.setIssuerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string app_url = 4;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.getAppUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.setAppUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string callback_path = 5;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.getCallbackPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.setCallbackPath = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string scopes = 6;
 * @return {!Array<string>}
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.setScopesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.extauth.plugins.gloo.solo.io.OAuth.prototype.addScopes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.extauth.plugins.gloo.solo.io.OAuth.prototype.clearScopesList = function() {
  this.setScopesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.OauthSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.OauthSecret.displayName = 'proto.extauth.plugins.gloo.solo.io.OauthSecret';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.OauthSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.OauthSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientSecret: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.OauthSecret}
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.OauthSecret;
  return proto.extauth.plugins.gloo.solo.io.OauthSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.OauthSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.OauthSecret}
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.OauthSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.OauthSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_secret = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.OauthSecret.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.OauthSecret.prototype.setClientSecret = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ApiKeyAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.displayName = 'proto.extauth.plugins.gloo.solo.io.ApiKeyAuth';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ApiKeyAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelSelectorMap: (f = msg.getLabelSelectorMap()) ? f.toObject(includeInstance, undefined) : [],
    apiKeySecretRefsList: jspb.Message.toObjectList(msg.getApiKeySecretRefsList(),
    github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ApiKeyAuth}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ApiKeyAuth;
  return proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ApiKeyAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ApiKeyAuth}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLabelSelectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = new github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.addApiKeySecretRefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ApiKeyAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelSelectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getApiKeySecretRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, string> label_selector = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.getLabelSelectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.clearLabelSelectorMap = function() {
  this.getLabelSelectorMap().clear();
};


/**
 * repeated core.solo.io.ResourceRef api_key_secret_refs = 2;
 * @return {!Array<!proto.core.solo.io.ResourceRef>}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.getApiKeySecretRefsList = function() {
  return /** @type{!Array<!proto.core.solo.io.ResourceRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef, 2));
};


/** @param {!Array<!proto.core.solo.io.ResourceRef>} value */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.setApiKeySecretRefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.core.solo.io.ResourceRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.solo.io.ResourceRef}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.addApiKeySecretRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.core.solo.io.ResourceRef, opt_index);
};


proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.prototype.clearApiKeySecretRefsList = function() {
  this.setApiKeySecretRefsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.ApiKeySecret.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ApiKeySecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ApiKeySecret.displayName = 'proto.extauth.plugins.gloo.solo.io.ApiKeySecret';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ApiKeySecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ApiKeySecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    generateApiKey: jspb.Message.getFieldWithDefault(msg, 1, false),
    apiKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    labelsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ApiKeySecret}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ApiKeySecret;
  return proto.extauth.plugins.gloo.solo.io.ApiKeySecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ApiKeySecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ApiKeySecret}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGenerateApiKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ApiKeySecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ApiKeySecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenerateApiKey();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional bool generate_api_key = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.getGenerateApiKey = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.setGenerateApiKey = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string api_key = 2;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.setApiKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string labels = 3;
 * @return {!Array<string>}
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.setLabelsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.addLabels = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.extauth.plugins.gloo.solo.io.ApiKeySecret.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.OpaAuth.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.OpaAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.OpaAuth.displayName = 'proto.extauth.plugins.gloo.solo.io.OpaAuth';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.OpaAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.OpaAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    modulesList: jspb.Message.toObjectList(msg.getModulesList(),
    github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.toObject, includeInstance),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.OpaAuth}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.OpaAuth;
  return proto.extauth.plugins.gloo.solo.io.OpaAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.OpaAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.OpaAuth}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.addModules(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.OpaAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.OpaAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated core.solo.io.ResourceRef modules = 1;
 * @return {!Array<!proto.core.solo.io.ResourceRef>}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.getModulesList = function() {
  return /** @type{!Array<!proto.core.solo.io.ResourceRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_solo$kit_api_v1_ref_pb.ResourceRef, 1));
};


/** @param {!Array<!proto.core.solo.io.ResourceRef>} value */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.setModulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core.solo.io.ResourceRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.solo.io.ResourceRef}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.addModules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core.solo.io.ResourceRef, opt_index);
};


proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.clearModulesList = function() {
  this.setModulesList([]);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.OpaAuth.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.AuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.AuthConfig.displayName = 'proto.extauth.plugins.gloo.solo.io.AuthConfig';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.AuthConfigCase = {
  AUTH_CONFIG_NOT_SET: 0,
  BASIC_AUTH: 1,
  OAUTH: 2,
  CUSTOM_AUTH: 3,
  API_KEY_AUTH: 4,
  PLUGIN_AUTH: 5,
  OPA_AUTH: 6
};

/**
 * @return {proto.extauth.plugins.gloo.solo.io.AuthConfig.AuthConfigCase}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getAuthConfigCase = function() {
  return /** @type {proto.extauth.plugins.gloo.solo.io.AuthConfig.AuthConfigCase} */(jspb.Message.computeOneofCase(this, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.AuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    basicAuth: (f = msg.getBasicAuth()) && proto.extauth.plugins.gloo.solo.io.BasicAuth.toObject(includeInstance, f),
    oauth: (f = msg.getOauth()) && proto.extauth.plugins.gloo.solo.io.OAuth.toObject(includeInstance, f),
    customAuth: (f = msg.getCustomAuth()) && proto.extauth.plugins.gloo.solo.io.CustomAuth.toObject(includeInstance, f),
    apiKeyAuth: (f = msg.getApiKeyAuth()) && proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.toObject(includeInstance, f),
    pluginAuth: (f = msg.getPluginAuth()) && proto.extauth.plugins.gloo.solo.io.AuthPlugin.toObject(includeInstance, f),
    opaAuth: (f = msg.getOpaAuth()) && proto.extauth.plugins.gloo.solo.io.OpaAuth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.AuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.AuthConfig;
  return proto.extauth.plugins.gloo.solo.io.AuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.AuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.extauth.plugins.gloo.solo.io.BasicAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinaryFromReader);
      msg.setBasicAuth(value);
      break;
    case 2:
      var value = new proto.extauth.plugins.gloo.solo.io.OAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.OAuth.deserializeBinaryFromReader);
      msg.setOauth(value);
      break;
    case 3:
      var value = new proto.extauth.plugins.gloo.solo.io.CustomAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.CustomAuth.deserializeBinaryFromReader);
      msg.setCustomAuth(value);
      break;
    case 4:
      var value = new proto.extauth.plugins.gloo.solo.io.ApiKeyAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.deserializeBinaryFromReader);
      msg.setApiKeyAuth(value);
      break;
    case 5:
      var value = new proto.extauth.plugins.gloo.solo.io.AuthPlugin;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.AuthPlugin.deserializeBinaryFromReader);
      msg.setPluginAuth(value);
      break;
    case 6:
      var value = new proto.extauth.plugins.gloo.solo.io.OpaAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.OpaAuth.deserializeBinaryFromReader);
      msg.setOpaAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.AuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasicAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.extauth.plugins.gloo.solo.io.BasicAuth.serializeBinaryToWriter
    );
  }
  f = message.getOauth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.extauth.plugins.gloo.solo.io.OAuth.serializeBinaryToWriter
    );
  }
  f = message.getCustomAuth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.extauth.plugins.gloo.solo.io.CustomAuth.serializeBinaryToWriter
    );
  }
  f = message.getApiKeyAuth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.serializeBinaryToWriter
    );
  }
  f = message.getPluginAuth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.extauth.plugins.gloo.solo.io.AuthPlugin.serializeBinaryToWriter
    );
  }
  f = message.getOpaAuth();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.extauth.plugins.gloo.solo.io.OpaAuth.serializeBinaryToWriter
    );
  }
};


/**
 * optional BasicAuth basic_auth = 1;
 * @return {?proto.extauth.plugins.gloo.solo.io.BasicAuth}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getBasicAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.BasicAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.BasicAuth, 1));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.BasicAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.setBasicAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.clearBasicAuth = function() {
  this.setBasicAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.hasBasicAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OAuth oauth = 2;
 * @return {?proto.extauth.plugins.gloo.solo.io.OAuth}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getOauth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.OAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.OAuth, 2));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.OAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.setOauth = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.clearOauth = function() {
  this.setOauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.hasOauth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CustomAuth custom_auth = 3;
 * @return {?proto.extauth.plugins.gloo.solo.io.CustomAuth}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getCustomAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.CustomAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.CustomAuth, 3));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.CustomAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.setCustomAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.clearCustomAuth = function() {
  this.setCustomAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.hasCustomAuth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ApiKeyAuth api_key_auth = 4;
 * @return {?proto.extauth.plugins.gloo.solo.io.ApiKeyAuth}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getApiKeyAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ApiKeyAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ApiKeyAuth, 4));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ApiKeyAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.setApiKeyAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.clearApiKeyAuth = function() {
  this.setApiKeyAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.hasApiKeyAuth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AuthPlugin plugin_auth = 5;
 * @return {?proto.extauth.plugins.gloo.solo.io.AuthPlugin}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getPluginAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.AuthPlugin} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.AuthPlugin, 5));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.AuthPlugin|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.setPluginAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.clearPluginAuth = function() {
  this.setPluginAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.hasPluginAuth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OpaAuth opa_auth = 6;
 * @return {?proto.extauth.plugins.gloo.solo.io.OpaAuth}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.getOpaAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.OpaAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.OpaAuth, 6));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.OpaAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.setOpaAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.extauth.plugins.gloo.solo.io.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.clearOpaAuth = function() {
  this.setOpaAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.AuthConfig.prototype.hasOpaAuth = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.VhostExtension.repeatedFields_, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.VhostExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.VhostExtension.displayName = 'proto.extauth.plugins.gloo.solo.io.VhostExtension';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.repeatedFields_ = [6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.AuthConfigCase = {
  AUTH_CONFIG_NOT_SET: 0,
  BASIC_AUTH: 1,
  OAUTH: 2,
  CUSTOM_AUTH: 3,
  API_KEY_AUTH: 4,
  PLUGIN_AUTH: 5
};

/**
 * @return {proto.extauth.plugins.gloo.solo.io.VhostExtension.AuthConfigCase}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getAuthConfigCase = function() {
  return /** @type {proto.extauth.plugins.gloo.solo.io.VhostExtension.AuthConfigCase} */(jspb.Message.computeOneofCase(this, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.VhostExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.VhostExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    basicAuth: (f = msg.getBasicAuth()) && proto.extauth.plugins.gloo.solo.io.BasicAuth.toObject(includeInstance, f),
    oauth: (f = msg.getOauth()) && proto.extauth.plugins.gloo.solo.io.OAuth.toObject(includeInstance, f),
    customAuth: (f = msg.getCustomAuth()) && proto.extauth.plugins.gloo.solo.io.CustomAuth.toObject(includeInstance, f),
    apiKeyAuth: (f = msg.getApiKeyAuth()) && proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.toObject(includeInstance, f),
    pluginAuth: (f = msg.getPluginAuth()) && proto.extauth.plugins.gloo.solo.io.PluginAuth.toObject(includeInstance, f),
    configsList: jspb.Message.toObjectList(msg.getConfigsList(),
    proto.extauth.plugins.gloo.solo.io.AuthConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.VhostExtension}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.VhostExtension;
  return proto.extauth.plugins.gloo.solo.io.VhostExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.VhostExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.VhostExtension}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.extauth.plugins.gloo.solo.io.BasicAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinaryFromReader);
      msg.setBasicAuth(value);
      break;
    case 2:
      var value = new proto.extauth.plugins.gloo.solo.io.OAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.OAuth.deserializeBinaryFromReader);
      msg.setOauth(value);
      break;
    case 3:
      var value = new proto.extauth.plugins.gloo.solo.io.CustomAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.CustomAuth.deserializeBinaryFromReader);
      msg.setCustomAuth(value);
      break;
    case 4:
      var value = new proto.extauth.plugins.gloo.solo.io.ApiKeyAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.deserializeBinaryFromReader);
      msg.setApiKeyAuth(value);
      break;
    case 5:
      var value = new proto.extauth.plugins.gloo.solo.io.PluginAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.PluginAuth.deserializeBinaryFromReader);
      msg.setPluginAuth(value);
      break;
    case 6:
      var value = new proto.extauth.plugins.gloo.solo.io.AuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.AuthConfig.deserializeBinaryFromReader);
      msg.addConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.VhostExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.VhostExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasicAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.extauth.plugins.gloo.solo.io.BasicAuth.serializeBinaryToWriter
    );
  }
  f = message.getOauth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.extauth.plugins.gloo.solo.io.OAuth.serializeBinaryToWriter
    );
  }
  f = message.getCustomAuth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.extauth.plugins.gloo.solo.io.CustomAuth.serializeBinaryToWriter
    );
  }
  f = message.getApiKeyAuth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.extauth.plugins.gloo.solo.io.ApiKeyAuth.serializeBinaryToWriter
    );
  }
  f = message.getPluginAuth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.extauth.plugins.gloo.solo.io.PluginAuth.serializeBinaryToWriter
    );
  }
  f = message.getConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.extauth.plugins.gloo.solo.io.AuthConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional BasicAuth basic_auth = 1;
 * @return {?proto.extauth.plugins.gloo.solo.io.BasicAuth}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getBasicAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.BasicAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.BasicAuth, 1));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.BasicAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.setBasicAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.clearBasicAuth = function() {
  this.setBasicAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.hasBasicAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OAuth oauth = 2;
 * @return {?proto.extauth.plugins.gloo.solo.io.OAuth}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getOauth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.OAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.OAuth, 2));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.OAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.setOauth = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.clearOauth = function() {
  this.setOauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.hasOauth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CustomAuth custom_auth = 3;
 * @return {?proto.extauth.plugins.gloo.solo.io.CustomAuth}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getCustomAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.CustomAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.CustomAuth, 3));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.CustomAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.setCustomAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.clearCustomAuth = function() {
  this.setCustomAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.hasCustomAuth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ApiKeyAuth api_key_auth = 4;
 * @return {?proto.extauth.plugins.gloo.solo.io.ApiKeyAuth}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getApiKeyAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ApiKeyAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ApiKeyAuth, 4));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ApiKeyAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.setApiKeyAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.clearApiKeyAuth = function() {
  this.setApiKeyAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.hasApiKeyAuth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PluginAuth plugin_auth = 5;
 * @return {?proto.extauth.plugins.gloo.solo.io.PluginAuth}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getPluginAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.PluginAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.PluginAuth, 5));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.PluginAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.setPluginAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.extauth.plugins.gloo.solo.io.VhostExtension.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.clearPluginAuth = function() {
  this.setPluginAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.hasPluginAuth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated AuthConfig configs = 6;
 * @return {!Array<!proto.extauth.plugins.gloo.solo.io.AuthConfig>}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.getConfigsList = function() {
  return /** @type{!Array<!proto.extauth.plugins.gloo.solo.io.AuthConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.extauth.plugins.gloo.solo.io.AuthConfig, 6));
};


/** @param {!Array<!proto.extauth.plugins.gloo.solo.io.AuthConfig>} value */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.setConfigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.extauth.plugins.gloo.solo.io.AuthConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.extauth.plugins.gloo.solo.io.AuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.addConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.extauth.plugins.gloo.solo.io.AuthConfig, opt_index);
};


proto.extauth.plugins.gloo.solo.io.VhostExtension.prototype.clearConfigsList = function() {
  this.setConfigsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.RouteExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.RouteExtension.displayName = 'proto.extauth.plugins.gloo.solo.io.RouteExtension';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.RouteExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.RouteExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
    disable: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.RouteExtension}
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.RouteExtension;
  return proto.extauth.plugins.gloo.solo.io.RouteExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.RouteExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.RouteExtension}
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.RouteExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.RouteExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool disable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.extauth.plugins.gloo.solo.io.RouteExtension.prototype.getDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.extauth.plugins.gloo.solo.io.RouteExtension.prototype.setDisable = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.repeatedFields_, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ExtAuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.displayName = 'proto.extauth.plugins.gloo.solo.io.ExtAuthConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.repeatedFields_ = [8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_ = [[3,4,5,6]];

/**
 * @enum {number}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfigCase = {
  AUTH_CONFIG_NOT_SET: 0,
  OAUTH: 3,
  BASIC_AUTH: 4,
  API_KEY_AUTH: 5,
  PLUGIN_AUTH: 6
};

/**
 * @return {proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfigCase}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getAuthConfigCase = function() {
  return /** @type {proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfigCase} */(jspb.Message.computeOneofCase(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    vhost: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oauth: (f = msg.getOauth()) && proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.toObject(includeInstance, f),
    basicAuth: (f = msg.getBasicAuth()) && proto.extauth.plugins.gloo.solo.io.BasicAuth.toObject(includeInstance, f),
    apiKeyAuth: (f = msg.getApiKeyAuth()) && proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.toObject(includeInstance, f),
    pluginAuth: (f = msg.getPluginAuth()) && proto.extauth.plugins.gloo.solo.io.PluginAuth.toObject(includeInstance, f),
    configsList: jspb.Message.toObjectList(msg.getConfigsList(),
    proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig;
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVhost(value);
      break;
    case 3:
      var value = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.deserializeBinaryFromReader);
      msg.setOauth(value);
      break;
    case 4:
      var value = new proto.extauth.plugins.gloo.solo.io.BasicAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinaryFromReader);
      msg.setBasicAuth(value);
      break;
    case 5:
      var value = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.deserializeBinaryFromReader);
      msg.setApiKeyAuth(value);
      break;
    case 6:
      var value = new proto.extauth.plugins.gloo.solo.io.PluginAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.PluginAuth.deserializeBinaryFromReader);
      msg.setPluginAuth(value);
      break;
    case 8:
      var value = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.deserializeBinaryFromReader);
      msg.addConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVhost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOauth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.serializeBinaryToWriter
    );
  }
  f = message.getBasicAuth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.extauth.plugins.gloo.solo.io.BasicAuth.serializeBinaryToWriter
    );
  }
  f = message.getApiKeyAuth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.serializeBinaryToWriter
    );
  }
  f = message.getPluginAuth();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.extauth.plugins.gloo.solo.io.PluginAuth.serializeBinaryToWriter
    );
  }
  f = message.getConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.repeatedFields_, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.displayName = 'proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    issuerUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    callbackPath: jspb.Message.getFieldWithDefault(msg, 5, ""),
    scopesList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig;
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuerUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackPath(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIssuerUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAppUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCallbackPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.setClientId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.setClientSecret = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string issuer_url = 3;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.getIssuerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.setIssuerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string app_url = 4;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.getAppUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.setAppUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string callback_path = 5;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.getCallbackPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.setCallbackPath = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string scopes = 6;
 * @return {!Array<string>}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.setScopesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.addScopes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.prototype.clearScopesList = function() {
  this.setScopesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.displayName = 'proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    validApiKeyAndUserMap: (f = msg.getValidApiKeyAndUserMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig;
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getValidApiKeyAndUserMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidApiKeyAndUserMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> valid_api_key_and_user = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.prototype.getValidApiKeyAndUserMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.prototype.clearValidApiKeyAndUserMap = function() {
  this.getValidApiKeyAndUserMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.displayName = 'proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    modulesMap: (f = msg.getModulesMap()) ? f.toObject(includeInstance, undefined) : [],
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig;
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getModulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * map<string, string> modules = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.prototype.getModulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.prototype.clearModulesMap = function() {
  this.getModulesMap().clear();
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_);
};
goog.inherits(proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.displayName = 'proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_ = [[3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.AuthConfigCase = {
  AUTH_CONFIG_NOT_SET: 0,
  OAUTH: 3,
  BASIC_AUTH: 4,
  API_KEY_AUTH: 5,
  PLUGIN_AUTH: 6,
  OPA_AUTH: 7
};

/**
 * @return {proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.AuthConfigCase}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.getAuthConfigCase = function() {
  return /** @type {proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.AuthConfigCase} */(jspb.Message.computeOneofCase(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    oauth: (f = msg.getOauth()) && proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.toObject(includeInstance, f),
    basicAuth: (f = msg.getBasicAuth()) && proto.extauth.plugins.gloo.solo.io.BasicAuth.toObject(includeInstance, f),
    apiKeyAuth: (f = msg.getApiKeyAuth()) && proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.toObject(includeInstance, f),
    pluginAuth: (f = msg.getPluginAuth()) && proto.extauth.plugins.gloo.solo.io.AuthPlugin.toObject(includeInstance, f),
    opaAuth: (f = msg.getOpaAuth()) && proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig;
  return proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.deserializeBinaryFromReader);
      msg.setOauth(value);
      break;
    case 4:
      var value = new proto.extauth.plugins.gloo.solo.io.BasicAuth;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.BasicAuth.deserializeBinaryFromReader);
      msg.setBasicAuth(value);
      break;
    case 5:
      var value = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.deserializeBinaryFromReader);
      msg.setApiKeyAuth(value);
      break;
    case 6:
      var value = new proto.extauth.plugins.gloo.solo.io.AuthPlugin;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.AuthPlugin.deserializeBinaryFromReader);
      msg.setPluginAuth(value);
      break;
    case 7:
      var value = new proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig;
      reader.readMessage(value,proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.deserializeBinaryFromReader);
      msg.setOpaAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOauth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig.serializeBinaryToWriter
    );
  }
  f = message.getBasicAuth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.extauth.plugins.gloo.solo.io.BasicAuth.serializeBinaryToWriter
    );
  }
  f = message.getApiKeyAuth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.serializeBinaryToWriter
    );
  }
  f = message.getPluginAuth();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.extauth.plugins.gloo.solo.io.AuthPlugin.serializeBinaryToWriter
    );
  }
  f = message.getOpaAuth();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional OAuthConfig oauth = 3;
 * @return {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.getOauth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig, 3));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.setOauth = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.clearOauth = function() {
  this.setOauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.hasOauth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BasicAuth basic_auth = 4;
 * @return {?proto.extauth.plugins.gloo.solo.io.BasicAuth}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.getBasicAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.BasicAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.BasicAuth, 4));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.BasicAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.setBasicAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.clearBasicAuth = function() {
  this.setBasicAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.hasBasicAuth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ApiKeyAuthConfig api_key_auth = 5;
 * @return {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.getApiKeyAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig, 5));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.setApiKeyAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.clearApiKeyAuth = function() {
  this.setApiKeyAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.hasApiKeyAuth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AuthPlugin plugin_auth = 6;
 * @return {?proto.extauth.plugins.gloo.solo.io.AuthPlugin}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.getPluginAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.AuthPlugin} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.AuthPlugin, 6));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.AuthPlugin|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.setPluginAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.clearPluginAuth = function() {
  this.setPluginAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.hasPluginAuth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OpaAuthConfig opa_auth = 7;
 * @return {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.getOpaAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig, 7));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OpaAuthConfig|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.setOpaAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.clearOpaAuth = function() {
  this.setOpaAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig.prototype.hasOpaAuth = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string vhost = 1;
 * @return {string}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getVhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.setVhost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OAuthConfig oauth = 3;
 * @return {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getOauth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig, 3));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.OAuthConfig|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.setOauth = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.clearOauth = function() {
  this.setOauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.hasOauth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BasicAuth basic_auth = 4;
 * @return {?proto.extauth.plugins.gloo.solo.io.BasicAuth}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getBasicAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.BasicAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.BasicAuth, 4));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.BasicAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.setBasicAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.clearBasicAuth = function() {
  this.setBasicAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.hasBasicAuth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ApiKeyAuthConfig api_key_auth = 5;
 * @return {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getApiKeyAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig, 5));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.setApiKeyAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.clearApiKeyAuth = function() {
  this.setApiKeyAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.hasApiKeyAuth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PluginAuth plugin_auth = 6;
 * @return {?proto.extauth.plugins.gloo.solo.io.PluginAuth}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getPluginAuth = function() {
  return /** @type{?proto.extauth.plugins.gloo.solo.io.PluginAuth} */ (
    jspb.Message.getWrapperField(this, proto.extauth.plugins.gloo.solo.io.PluginAuth, 6));
};


/** @param {?proto.extauth.plugins.gloo.solo.io.PluginAuth|undefined} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.setPluginAuth = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.oneofGroups_[0], value);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.clearPluginAuth = function() {
  this.setPluginAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.hasPluginAuth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated AuthConfig configs = 8;
 * @return {!Array<!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig>}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.getConfigsList = function() {
  return /** @type{!Array<!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig, 8));
};


/** @param {!Array<!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig>} value */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.setConfigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig}
 */
proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.addConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.AuthConfig, opt_index);
};


proto.extauth.plugins.gloo.solo.io.ExtAuthConfig.prototype.clearConfigsList = function() {
  this.setConfigsList([]);
};


goog.object.extend(exports, proto.extauth.plugins.gloo.solo.io);
