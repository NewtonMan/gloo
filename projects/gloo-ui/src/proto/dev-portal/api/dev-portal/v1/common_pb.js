/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
var extproto_ext_pb = require('../../../../protoc-gen-ext/extproto/ext_pb.js');
goog.exportSymbol('proto.devportal.solo.io.DataSource', null, global);
goog.exportSymbol('proto.devportal.solo.io.DataSource.ConfigMapData', null, global);
goog.exportSymbol('proto.devportal.solo.io.ObjectRef', null, global);
goog.exportSymbol('proto.devportal.solo.io.Selector', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.Selector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.devportal.solo.io.Selector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.Selector.displayName = 'proto.devportal.solo.io.Selector';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.Selector.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.Selector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.Selector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.Selector.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchLabelsMap: (f = msg.getMatchLabelsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.Selector}
 */
proto.devportal.solo.io.Selector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.Selector;
  return proto.devportal.solo.io.Selector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.Selector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.Selector}
 */
proto.devportal.solo.io.Selector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMatchLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.Selector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.Selector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.Selector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.Selector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> match_labels = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.devportal.solo.io.Selector.prototype.getMatchLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.devportal.solo.io.Selector.prototype.clearMatchLabelsMap = function() {
  this.getMatchLabelsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.DataSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.devportal.solo.io.DataSource.oneofGroups_);
};
goog.inherits(proto.devportal.solo.io.DataSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.DataSource.displayName = 'proto.devportal.solo.io.DataSource';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.devportal.solo.io.DataSource.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.devportal.solo.io.DataSource.SourceTypeCase = {
  SOURCE_TYPE_NOT_SET: 0,
  INLINE_BYTES: 1,
  FETCH_URL: 2,
  CONFIG_MAP: 3
};

/**
 * @return {proto.devportal.solo.io.DataSource.SourceTypeCase}
 */
proto.devportal.solo.io.DataSource.prototype.getSourceTypeCase = function() {
  return /** @type {proto.devportal.solo.io.DataSource.SourceTypeCase} */(jspb.Message.computeOneofCase(this, proto.devportal.solo.io.DataSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.DataSource.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.DataSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.DataSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.DataSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    inlineBytes: msg.getInlineBytes_asB64(),
    fetchUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configMap: (f = msg.getConfigMap()) && proto.devportal.solo.io.DataSource.ConfigMapData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.DataSource}
 */
proto.devportal.solo.io.DataSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.DataSource;
  return proto.devportal.solo.io.DataSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.DataSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.DataSource}
 */
proto.devportal.solo.io.DataSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInlineBytes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFetchUrl(value);
      break;
    case 3:
      var value = new proto.devportal.solo.io.DataSource.ConfigMapData;
      reader.readMessage(value,proto.devportal.solo.io.DataSource.ConfigMapData.deserializeBinaryFromReader);
      msg.setConfigMap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.DataSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.DataSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.DataSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.DataSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigMap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.devportal.solo.io.DataSource.ConfigMapData.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.DataSource.ConfigMapData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.devportal.solo.io.DataSource.ConfigMapData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.DataSource.ConfigMapData.displayName = 'proto.devportal.solo.io.DataSource.ConfigMapData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.DataSource.ConfigMapData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.DataSource.ConfigMapData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.DataSource.ConfigMapData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.DataSource.ConfigMapData}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.DataSource.ConfigMapData;
  return proto.devportal.solo.io.DataSource.ConfigMapData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.DataSource.ConfigMapData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.DataSource.ConfigMapData}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.DataSource.ConfigMapData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.DataSource.ConfigMapData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.DataSource.ConfigMapData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.devportal.solo.io.DataSource.ConfigMapData.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes inline_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.devportal.solo.io.DataSource.prototype.getInlineBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes inline_bytes = 1;
 * This is a type-conversion wrapper around `getInlineBytes()`
 * @return {string}
 */
proto.devportal.solo.io.DataSource.prototype.getInlineBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInlineBytes()));
};


/**
 * optional bytes inline_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInlineBytes()`
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.DataSource.prototype.getInlineBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInlineBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.devportal.solo.io.DataSource.prototype.setInlineBytes = function(value) {
  jspb.Message.setOneofField(this, 1, proto.devportal.solo.io.DataSource.oneofGroups_[0], value);
};


proto.devportal.solo.io.DataSource.prototype.clearInlineBytes = function() {
  jspb.Message.setOneofField(this, 1, proto.devportal.solo.io.DataSource.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.devportal.solo.io.DataSource.prototype.hasInlineBytes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fetch_url = 2;
 * @return {string}
 */
proto.devportal.solo.io.DataSource.prototype.getFetchUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.devportal.solo.io.DataSource.prototype.setFetchUrl = function(value) {
  jspb.Message.setOneofField(this, 2, proto.devportal.solo.io.DataSource.oneofGroups_[0], value);
};


proto.devportal.solo.io.DataSource.prototype.clearFetchUrl = function() {
  jspb.Message.setOneofField(this, 2, proto.devportal.solo.io.DataSource.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.devportal.solo.io.DataSource.prototype.hasFetchUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConfigMapData config_map = 3;
 * @return {?proto.devportal.solo.io.DataSource.ConfigMapData}
 */
proto.devportal.solo.io.DataSource.prototype.getConfigMap = function() {
  return /** @type{?proto.devportal.solo.io.DataSource.ConfigMapData} */ (
    jspb.Message.getWrapperField(this, proto.devportal.solo.io.DataSource.ConfigMapData, 3));
};


/** @param {?proto.devportal.solo.io.DataSource.ConfigMapData|undefined} value */
proto.devportal.solo.io.DataSource.prototype.setConfigMap = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.devportal.solo.io.DataSource.oneofGroups_[0], value);
};


proto.devportal.solo.io.DataSource.prototype.clearConfigMap = function() {
  this.setConfigMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.devportal.solo.io.DataSource.prototype.hasConfigMap = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.ObjectRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.devportal.solo.io.ObjectRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.ObjectRef.displayName = 'proto.devportal.solo.io.ObjectRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.ObjectRef.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.ObjectRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.ObjectRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ObjectRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.ObjectRef}
 */
proto.devportal.solo.io.ObjectRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.ObjectRef;
  return proto.devportal.solo.io.ObjectRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.ObjectRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.ObjectRef}
 */
proto.devportal.solo.io.ObjectRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.ObjectRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.ObjectRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.ObjectRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ObjectRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.devportal.solo.io.ObjectRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.devportal.solo.io.ObjectRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.devportal.solo.io.ObjectRef.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.devportal.solo.io.ObjectRef.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.devportal.solo.io);
