/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var dev$portal_api_dev$portal_v1_common_pb = require('../../../../dev-portal/api/dev-portal/v1/common_pb.js');
var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
var extproto_ext_pb = require('../../../../protoc-gen-ext/extproto/ext_pb.js');
goog.exportSymbol('proto.devportal.solo.io.ApiDocSpec', null, global);
goog.exportSymbol('proto.devportal.solo.io.ApiDocSpec.OpenApi', null, global);
goog.exportSymbol('proto.devportal.solo.io.ApiDocStatus', null, global);
goog.exportSymbol('proto.devportal.solo.io.ApiDocStatus.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.ApiDocSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.devportal.solo.io.ApiDocSpec.oneofGroups_);
};
goog.inherits(proto.devportal.solo.io.ApiDocSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.ApiDocSpec.displayName = 'proto.devportal.solo.io.ApiDocSpec';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.devportal.solo.io.ApiDocSpec.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.devportal.solo.io.ApiDocSpec.ApidoctypeCase = {
  APIDOCTYPE_NOT_SET: 0,
  OPENAPI: 2
};

/**
 * @return {proto.devportal.solo.io.ApiDocSpec.ApidoctypeCase}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.getApidoctypeCase = function() {
  return /** @type {proto.devportal.solo.io.ApiDocSpec.ApidoctypeCase} */(jspb.Message.computeOneofCase(this, proto.devportal.solo.io.ApiDocSpec.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.ApiDocSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.ApiDocSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ApiDocSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasource: (f = msg.getDatasource()) && dev$portal_api_dev$portal_v1_common_pb.DataSource.toObject(includeInstance, f),
    openapi: (f = msg.getOpenapi()) && proto.devportal.solo.io.ApiDocSpec.OpenApi.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.ApiDocSpec}
 */
proto.devportal.solo.io.ApiDocSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.ApiDocSpec;
  return proto.devportal.solo.io.ApiDocSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.ApiDocSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.ApiDocSpec}
 */
proto.devportal.solo.io.ApiDocSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new dev$portal_api_dev$portal_v1_common_pb.DataSource;
      reader.readMessage(value,dev$portal_api_dev$portal_v1_common_pb.DataSource.deserializeBinaryFromReader);
      msg.setDatasource(value);
      break;
    case 2:
      var value = new proto.devportal.solo.io.ApiDocSpec.OpenApi;
      reader.readMessage(value,proto.devportal.solo.io.ApiDocSpec.OpenApi.deserializeBinaryFromReader);
      msg.setOpenapi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.ApiDocSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.ApiDocSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ApiDocSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      dev$portal_api_dev$portal_v1_common_pb.DataSource.serializeBinaryToWriter
    );
  }
  f = message.getOpenapi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.devportal.solo.io.ApiDocSpec.OpenApi.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.devportal.solo.io.ApiDocSpec.OpenApi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.ApiDocSpec.OpenApi.displayName = 'proto.devportal.solo.io.ApiDocSpec.OpenApi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.ApiDocSpec.OpenApi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.ApiDocSpec.OpenApi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.ApiDocSpec.OpenApi}
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.ApiDocSpec.OpenApi;
  return proto.devportal.solo.io.ApiDocSpec.OpenApi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.ApiDocSpec.OpenApi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.ApiDocSpec.OpenApi}
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.ApiDocSpec.OpenApi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.ApiDocSpec.OpenApi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ApiDocSpec.OpenApi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional DataSource dataSource = 1;
 * @return {?proto.devportal.solo.io.DataSource}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.getDatasource = function() {
  return /** @type{?proto.devportal.solo.io.DataSource} */ (
    jspb.Message.getWrapperField(this, dev$portal_api_dev$portal_v1_common_pb.DataSource, 1));
};


/** @param {?proto.devportal.solo.io.DataSource|undefined} value */
proto.devportal.solo.io.ApiDocSpec.prototype.setDatasource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.devportal.solo.io.ApiDocSpec.prototype.clearDatasource = function() {
  this.setDatasource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.hasDatasource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OpenApi openApi = 2;
 * @return {?proto.devportal.solo.io.ApiDocSpec.OpenApi}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.getOpenapi = function() {
  return /** @type{?proto.devportal.solo.io.ApiDocSpec.OpenApi} */ (
    jspb.Message.getWrapperField(this, proto.devportal.solo.io.ApiDocSpec.OpenApi, 2));
};


/** @param {?proto.devportal.solo.io.ApiDocSpec.OpenApi|undefined} value */
proto.devportal.solo.io.ApiDocSpec.prototype.setOpenapi = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.devportal.solo.io.ApiDocSpec.oneofGroups_[0], value);
};


proto.devportal.solo.io.ApiDocSpec.prototype.clearOpenapi = function() {
  this.setOpenapi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.devportal.solo.io.ApiDocSpec.prototype.hasOpenapi = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.devportal.solo.io.ApiDocStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.devportal.solo.io.ApiDocStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.devportal.solo.io.ApiDocStatus.displayName = 'proto.devportal.solo.io.ApiDocStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.devportal.solo.io.ApiDocStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.devportal.solo.io.ApiDocStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.devportal.solo.io.ApiDocStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ApiDocStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    observedgeneration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.devportal.solo.io.ApiDocStatus}
 */
proto.devportal.solo.io.ApiDocStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.devportal.solo.io.ApiDocStatus;
  return proto.devportal.solo.io.ApiDocStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.devportal.solo.io.ApiDocStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.devportal.solo.io.ApiDocStatus}
 */
proto.devportal.solo.io.ApiDocStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObservedgeneration(value);
      break;
    case 2:
      var value = /** @type {!proto.devportal.solo.io.ApiDocStatus.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.devportal.solo.io.ApiDocStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.devportal.solo.io.ApiDocStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.devportal.solo.io.ApiDocStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.devportal.solo.io.ApiDocStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObservedgeneration();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.devportal.solo.io.ApiDocStatus.State = {
  UNPUBLISHED: 0,
  PUBLISHED: 1,
  FAILED: 2
};

/**
 * optional int64 observedGeneration = 1;
 * @return {number}
 */
proto.devportal.solo.io.ApiDocStatus.prototype.getObservedgeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.devportal.solo.io.ApiDocStatus.prototype.setObservedgeneration = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional State state = 2;
 * @return {!proto.devportal.solo.io.ApiDocStatus.State}
 */
proto.devportal.solo.io.ApiDocStatus.prototype.getState = function() {
  return /** @type {!proto.devportal.solo.io.ApiDocStatus.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.devportal.solo.io.ApiDocStatus.State} value */
proto.devportal.solo.io.ApiDocStatus.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.devportal.solo.io.ApiDocStatus.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.devportal.solo.io.ApiDocStatus.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.devportal.solo.io);
