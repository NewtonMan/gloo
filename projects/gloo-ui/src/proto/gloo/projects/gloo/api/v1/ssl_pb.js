/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../../gogoproto/gogo_pb.js');
var extproto_ext_pb = require('../../../../../protoc-gen-ext/extproto/ext_pb.js');
var solo$kit_api_v1_ref_pb = require('../../../../../solo-kit/api/v1/ref_pb.js');
goog.exportSymbol('proto.gloo.solo.io.CallCredentials', null, global);
goog.exportSymbol('proto.gloo.solo.io.CallCredentials.FileCredentialSource', null, global);
goog.exportSymbol('proto.gloo.solo.io.SDSConfig', null, global);
goog.exportSymbol('proto.gloo.solo.io.SSLFiles', null, global);
goog.exportSymbol('proto.gloo.solo.io.SslConfig', null, global);
goog.exportSymbol('proto.gloo.solo.io.SslParameters', null, global);
goog.exportSymbol('proto.gloo.solo.io.SslParameters.ProtocolVersion', null, global);
goog.exportSymbol('proto.gloo.solo.io.UpstreamSslConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.SslConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gloo.solo.io.SslConfig.repeatedFields_, proto.gloo.solo.io.SslConfig.oneofGroups_);
};
goog.inherits(proto.gloo.solo.io.SslConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.SslConfig.displayName = 'proto.gloo.solo.io.SslConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gloo.solo.io.SslConfig.repeatedFields_ = [3,5,7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gloo.solo.io.SslConfig.oneofGroups_ = [[1,2,4]];

/**
 * @enum {number}
 */
proto.gloo.solo.io.SslConfig.SslSecretsCase = {
  SSL_SECRETS_NOT_SET: 0,
  SECRET_REF: 1,
  SSL_FILES: 2,
  SDS: 4
};

/**
 * @return {proto.gloo.solo.io.SslConfig.SslSecretsCase}
 */
proto.gloo.solo.io.SslConfig.prototype.getSslSecretsCase = function() {
  return /** @type {proto.gloo.solo.io.SslConfig.SslSecretsCase} */(jspb.Message.computeOneofCase(this, proto.gloo.solo.io.SslConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.SslConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.SslConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.SslConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SslConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretRef: (f = msg.getSecretRef()) && solo$kit_api_v1_ref_pb.ResourceRef.toObject(includeInstance, f),
    sslFiles: (f = msg.getSslFiles()) && proto.gloo.solo.io.SSLFiles.toObject(includeInstance, f),
    sds: (f = msg.getSds()) && proto.gloo.solo.io.SDSConfig.toObject(includeInstance, f),
    sniDomainsList: jspb.Message.getRepeatedField(msg, 3),
    verifySubjectAltNameList: jspb.Message.getRepeatedField(msg, 5),
    parameters: (f = msg.getParameters()) && proto.gloo.solo.io.SslParameters.toObject(includeInstance, f),
    alpnProtocolsList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.SslConfig}
 */
proto.gloo.solo.io.SslConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.SslConfig;
  return proto.gloo.solo.io.SslConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.SslConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.SslConfig}
 */
proto.gloo.solo.io.SslConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.setSecretRef(value);
      break;
    case 2:
      var value = new proto.gloo.solo.io.SSLFiles;
      reader.readMessage(value,proto.gloo.solo.io.SSLFiles.deserializeBinaryFromReader);
      msg.setSslFiles(value);
      break;
    case 4:
      var value = new proto.gloo.solo.io.SDSConfig;
      reader.readMessage(value,proto.gloo.solo.io.SDSConfig.deserializeBinaryFromReader);
      msg.setSds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSniDomains(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifySubjectAltName(value);
      break;
    case 6:
      var value = new proto.gloo.solo.io.SslParameters;
      reader.readMessage(value,proto.gloo.solo.io.SslParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlpnProtocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.SslConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.SslConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.SslConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SslConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getSslFiles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gloo.solo.io.SSLFiles.serializeBinaryToWriter
    );
  }
  f = message.getSds();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gloo.solo.io.SDSConfig.serializeBinaryToWriter
    );
  }
  f = message.getSniDomainsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getVerifySubjectAltNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gloo.solo.io.SslParameters.serializeBinaryToWriter
    );
  }
  f = message.getAlpnProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional core.solo.io.ResourceRef secret_ref = 1;
 * @return {?proto.core.solo.io.ResourceRef}
 */
proto.gloo.solo.io.SslConfig.prototype.getSecretRef = function() {
  return /** @type{?proto.core.solo.io.ResourceRef} */ (
    jspb.Message.getWrapperField(this, solo$kit_api_v1_ref_pb.ResourceRef, 1));
};


/** @param {?proto.core.solo.io.ResourceRef|undefined} value */
proto.gloo.solo.io.SslConfig.prototype.setSecretRef = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.gloo.solo.io.SslConfig.oneofGroups_[0], value);
};


proto.gloo.solo.io.SslConfig.prototype.clearSecretRef = function() {
  this.setSecretRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.SslConfig.prototype.hasSecretRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SSLFiles ssl_files = 2;
 * @return {?proto.gloo.solo.io.SSLFiles}
 */
proto.gloo.solo.io.SslConfig.prototype.getSslFiles = function() {
  return /** @type{?proto.gloo.solo.io.SSLFiles} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.SSLFiles, 2));
};


/** @param {?proto.gloo.solo.io.SSLFiles|undefined} value */
proto.gloo.solo.io.SslConfig.prototype.setSslFiles = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.gloo.solo.io.SslConfig.oneofGroups_[0], value);
};


proto.gloo.solo.io.SslConfig.prototype.clearSslFiles = function() {
  this.setSslFiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.SslConfig.prototype.hasSslFiles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SDSConfig sds = 4;
 * @return {?proto.gloo.solo.io.SDSConfig}
 */
proto.gloo.solo.io.SslConfig.prototype.getSds = function() {
  return /** @type{?proto.gloo.solo.io.SDSConfig} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.SDSConfig, 4));
};


/** @param {?proto.gloo.solo.io.SDSConfig|undefined} value */
proto.gloo.solo.io.SslConfig.prototype.setSds = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.gloo.solo.io.SslConfig.oneofGroups_[0], value);
};


proto.gloo.solo.io.SslConfig.prototype.clearSds = function() {
  this.setSds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.SslConfig.prototype.hasSds = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string sni_domains = 3;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.SslConfig.prototype.getSniDomainsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.SslConfig.prototype.setSniDomainsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.SslConfig.prototype.addSniDomains = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.gloo.solo.io.SslConfig.prototype.clearSniDomainsList = function() {
  this.setSniDomainsList([]);
};


/**
 * repeated string verify_subject_alt_name = 5;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.SslConfig.prototype.getVerifySubjectAltNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.SslConfig.prototype.setVerifySubjectAltNameList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.SslConfig.prototype.addVerifySubjectAltName = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.gloo.solo.io.SslConfig.prototype.clearVerifySubjectAltNameList = function() {
  this.setVerifySubjectAltNameList([]);
};


/**
 * optional SslParameters parameters = 6;
 * @return {?proto.gloo.solo.io.SslParameters}
 */
proto.gloo.solo.io.SslConfig.prototype.getParameters = function() {
  return /** @type{?proto.gloo.solo.io.SslParameters} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.SslParameters, 6));
};


/** @param {?proto.gloo.solo.io.SslParameters|undefined} value */
proto.gloo.solo.io.SslConfig.prototype.setParameters = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.gloo.solo.io.SslConfig.prototype.clearParameters = function() {
  this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.SslConfig.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string alpn_protocols = 7;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.SslConfig.prototype.getAlpnProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.SslConfig.prototype.setAlpnProtocolsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.SslConfig.prototype.addAlpnProtocols = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.gloo.solo.io.SslConfig.prototype.clearAlpnProtocolsList = function() {
  this.setAlpnProtocolsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.SSLFiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gloo.solo.io.SSLFiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.SSLFiles.displayName = 'proto.gloo.solo.io.SSLFiles';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.SSLFiles.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.SSLFiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.SSLFiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SSLFiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    tlsCert: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tlsKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rootCa: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.SSLFiles}
 */
proto.gloo.solo.io.SSLFiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.SSLFiles;
  return proto.gloo.solo.io.SSLFiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.SSLFiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.SSLFiles}
 */
proto.gloo.solo.io.SSLFiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsCert(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootCa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.SSLFiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.SSLFiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.SSLFiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SSLFiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTlsCert();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTlsKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRootCa();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string tls_cert = 1;
 * @return {string}
 */
proto.gloo.solo.io.SSLFiles.prototype.getTlsCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.gloo.solo.io.SSLFiles.prototype.setTlsCert = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tls_key = 2;
 * @return {string}
 */
proto.gloo.solo.io.SSLFiles.prototype.getTlsKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.gloo.solo.io.SSLFiles.prototype.setTlsKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string root_ca = 3;
 * @return {string}
 */
proto.gloo.solo.io.SSLFiles.prototype.getRootCa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.gloo.solo.io.SSLFiles.prototype.setRootCa = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.UpstreamSslConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gloo.solo.io.UpstreamSslConfig.repeatedFields_, proto.gloo.solo.io.UpstreamSslConfig.oneofGroups_);
};
goog.inherits(proto.gloo.solo.io.UpstreamSslConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.UpstreamSslConfig.displayName = 'proto.gloo.solo.io.UpstreamSslConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gloo.solo.io.UpstreamSslConfig.repeatedFields_ = [5,8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gloo.solo.io.UpstreamSslConfig.oneofGroups_ = [[1,2,4]];

/**
 * @enum {number}
 */
proto.gloo.solo.io.UpstreamSslConfig.SslSecretsCase = {
  SSL_SECRETS_NOT_SET: 0,
  SECRET_REF: 1,
  SSL_FILES: 2,
  SDS: 4
};

/**
 * @return {proto.gloo.solo.io.UpstreamSslConfig.SslSecretsCase}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getSslSecretsCase = function() {
  return /** @type {proto.gloo.solo.io.UpstreamSslConfig.SslSecretsCase} */(jspb.Message.computeOneofCase(this, proto.gloo.solo.io.UpstreamSslConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.UpstreamSslConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.UpstreamSslConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.UpstreamSslConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretRef: (f = msg.getSecretRef()) && solo$kit_api_v1_ref_pb.ResourceRef.toObject(includeInstance, f),
    sslFiles: (f = msg.getSslFiles()) && proto.gloo.solo.io.SSLFiles.toObject(includeInstance, f),
    sds: (f = msg.getSds()) && proto.gloo.solo.io.SDSConfig.toObject(includeInstance, f),
    sni: jspb.Message.getFieldWithDefault(msg, 3, ""),
    verifySubjectAltNameList: jspb.Message.getRepeatedField(msg, 5),
    parameters: (f = msg.getParameters()) && proto.gloo.solo.io.SslParameters.toObject(includeInstance, f),
    alpnProtocolsList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.UpstreamSslConfig}
 */
proto.gloo.solo.io.UpstreamSslConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.UpstreamSslConfig;
  return proto.gloo.solo.io.UpstreamSslConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.UpstreamSslConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.UpstreamSslConfig}
 */
proto.gloo.solo.io.UpstreamSslConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new solo$kit_api_v1_ref_pb.ResourceRef;
      reader.readMessage(value,solo$kit_api_v1_ref_pb.ResourceRef.deserializeBinaryFromReader);
      msg.setSecretRef(value);
      break;
    case 2:
      var value = new proto.gloo.solo.io.SSLFiles;
      reader.readMessage(value,proto.gloo.solo.io.SSLFiles.deserializeBinaryFromReader);
      msg.setSslFiles(value);
      break;
    case 4:
      var value = new proto.gloo.solo.io.SDSConfig;
      reader.readMessage(value,proto.gloo.solo.io.SDSConfig.deserializeBinaryFromReader);
      msg.setSds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSni(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerifySubjectAltName(value);
      break;
    case 7:
      var value = new proto.gloo.solo.io.SslParameters;
      reader.readMessage(value,proto.gloo.solo.io.SslParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlpnProtocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.UpstreamSslConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.UpstreamSslConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.UpstreamSslConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      solo$kit_api_v1_ref_pb.ResourceRef.serializeBinaryToWriter
    );
  }
  f = message.getSslFiles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gloo.solo.io.SSLFiles.serializeBinaryToWriter
    );
  }
  f = message.getSds();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.gloo.solo.io.SDSConfig.serializeBinaryToWriter
    );
  }
  f = message.getSni();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVerifySubjectAltNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.gloo.solo.io.SslParameters.serializeBinaryToWriter
    );
  }
  f = message.getAlpnProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional core.solo.io.ResourceRef secret_ref = 1;
 * @return {?proto.core.solo.io.ResourceRef}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getSecretRef = function() {
  return /** @type{?proto.core.solo.io.ResourceRef} */ (
    jspb.Message.getWrapperField(this, solo$kit_api_v1_ref_pb.ResourceRef, 1));
};


/** @param {?proto.core.solo.io.ResourceRef|undefined} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setSecretRef = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.gloo.solo.io.UpstreamSslConfig.oneofGroups_[0], value);
};


proto.gloo.solo.io.UpstreamSslConfig.prototype.clearSecretRef = function() {
  this.setSecretRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.hasSecretRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SSLFiles ssl_files = 2;
 * @return {?proto.gloo.solo.io.SSLFiles}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getSslFiles = function() {
  return /** @type{?proto.gloo.solo.io.SSLFiles} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.SSLFiles, 2));
};


/** @param {?proto.gloo.solo.io.SSLFiles|undefined} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setSslFiles = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.gloo.solo.io.UpstreamSslConfig.oneofGroups_[0], value);
};


proto.gloo.solo.io.UpstreamSslConfig.prototype.clearSslFiles = function() {
  this.setSslFiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.hasSslFiles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SDSConfig sds = 4;
 * @return {?proto.gloo.solo.io.SDSConfig}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getSds = function() {
  return /** @type{?proto.gloo.solo.io.SDSConfig} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.SDSConfig, 4));
};


/** @param {?proto.gloo.solo.io.SDSConfig|undefined} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setSds = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.gloo.solo.io.UpstreamSslConfig.oneofGroups_[0], value);
};


proto.gloo.solo.io.UpstreamSslConfig.prototype.clearSds = function() {
  this.setSds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.hasSds = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string sni = 3;
 * @return {string}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getSni = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setSni = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string verify_subject_alt_name = 5;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getVerifySubjectAltNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setVerifySubjectAltNameList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.addVerifySubjectAltName = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.gloo.solo.io.UpstreamSslConfig.prototype.clearVerifySubjectAltNameList = function() {
  this.setVerifySubjectAltNameList([]);
};


/**
 * optional SslParameters parameters = 7;
 * @return {?proto.gloo.solo.io.SslParameters}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getParameters = function() {
  return /** @type{?proto.gloo.solo.io.SslParameters} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.SslParameters, 7));
};


/** @param {?proto.gloo.solo.io.SslParameters|undefined} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setParameters = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.gloo.solo.io.UpstreamSslConfig.prototype.clearParameters = function() {
  this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated string alpn_protocols = 8;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.getAlpnProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.UpstreamSslConfig.prototype.setAlpnProtocolsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.UpstreamSslConfig.prototype.addAlpnProtocols = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.gloo.solo.io.UpstreamSslConfig.prototype.clearAlpnProtocolsList = function() {
  this.setAlpnProtocolsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.SDSConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gloo.solo.io.SDSConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.SDSConfig.displayName = 'proto.gloo.solo.io.SDSConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.SDSConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.SDSConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.SDSConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SDSConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    callCredentials: (f = msg.getCallCredentials()) && proto.gloo.solo.io.CallCredentials.toObject(includeInstance, f),
    certificatesSecretName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    validationContextName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.SDSConfig}
 */
proto.gloo.solo.io.SDSConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.SDSConfig;
  return proto.gloo.solo.io.SDSConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.SDSConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.SDSConfig}
 */
proto.gloo.solo.io.SDSConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUri(value);
      break;
    case 2:
      var value = new proto.gloo.solo.io.CallCredentials;
      reader.readMessage(value,proto.gloo.solo.io.CallCredentials.deserializeBinaryFromReader);
      msg.setCallCredentials(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificatesSecretName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidationContextName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.SDSConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.SDSConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.SDSConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SDSConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCallCredentials();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gloo.solo.io.CallCredentials.serializeBinaryToWriter
    );
  }
  f = message.getCertificatesSecretName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValidationContextName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string target_uri = 1;
 * @return {string}
 */
proto.gloo.solo.io.SDSConfig.prototype.getTargetUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.gloo.solo.io.SDSConfig.prototype.setTargetUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CallCredentials call_credentials = 2;
 * @return {?proto.gloo.solo.io.CallCredentials}
 */
proto.gloo.solo.io.SDSConfig.prototype.getCallCredentials = function() {
  return /** @type{?proto.gloo.solo.io.CallCredentials} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.CallCredentials, 2));
};


/** @param {?proto.gloo.solo.io.CallCredentials|undefined} value */
proto.gloo.solo.io.SDSConfig.prototype.setCallCredentials = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.gloo.solo.io.SDSConfig.prototype.clearCallCredentials = function() {
  this.setCallCredentials(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.SDSConfig.prototype.hasCallCredentials = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string certificates_secret_name = 3;
 * @return {string}
 */
proto.gloo.solo.io.SDSConfig.prototype.getCertificatesSecretName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.gloo.solo.io.SDSConfig.prototype.setCertificatesSecretName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string validation_context_name = 4;
 * @return {string}
 */
proto.gloo.solo.io.SDSConfig.prototype.getValidationContextName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.gloo.solo.io.SDSConfig.prototype.setValidationContextName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.CallCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gloo.solo.io.CallCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.CallCredentials.displayName = 'proto.gloo.solo.io.CallCredentials';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.CallCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.CallCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.CallCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.CallCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileCredentialSource: (f = msg.getFileCredentialSource()) && proto.gloo.solo.io.CallCredentials.FileCredentialSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.CallCredentials}
 */
proto.gloo.solo.io.CallCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.CallCredentials;
  return proto.gloo.solo.io.CallCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.CallCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.CallCredentials}
 */
proto.gloo.solo.io.CallCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gloo.solo.io.CallCredentials.FileCredentialSource;
      reader.readMessage(value,proto.gloo.solo.io.CallCredentials.FileCredentialSource.deserializeBinaryFromReader);
      msg.setFileCredentialSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.CallCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.CallCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.CallCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.CallCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileCredentialSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gloo.solo.io.CallCredentials.FileCredentialSource.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gloo.solo.io.CallCredentials.FileCredentialSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.CallCredentials.FileCredentialSource.displayName = 'proto.gloo.solo.io.CallCredentials.FileCredentialSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.CallCredentials.FileCredentialSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.CallCredentials.FileCredentialSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenFileName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    header: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.CallCredentials.FileCredentialSource}
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.CallCredentials.FileCredentialSource;
  return proto.gloo.solo.io.CallCredentials.FileCredentialSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.CallCredentials.FileCredentialSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.CallCredentials.FileCredentialSource}
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenFileName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.CallCredentials.FileCredentialSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.CallCredentials.FileCredentialSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenFileName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token_file_name = 1;
 * @return {string}
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.prototype.getTokenFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.prototype.setTokenFileName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string header = 2;
 * @return {string}
 */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.prototype.getHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.gloo.solo.io.CallCredentials.FileCredentialSource.prototype.setHeader = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FileCredentialSource file_credential_source = 1;
 * @return {?proto.gloo.solo.io.CallCredentials.FileCredentialSource}
 */
proto.gloo.solo.io.CallCredentials.prototype.getFileCredentialSource = function() {
  return /** @type{?proto.gloo.solo.io.CallCredentials.FileCredentialSource} */ (
    jspb.Message.getWrapperField(this, proto.gloo.solo.io.CallCredentials.FileCredentialSource, 1));
};


/** @param {?proto.gloo.solo.io.CallCredentials.FileCredentialSource|undefined} value */
proto.gloo.solo.io.CallCredentials.prototype.setFileCredentialSource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.gloo.solo.io.CallCredentials.prototype.clearFileCredentialSource = function() {
  this.setFileCredentialSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gloo.solo.io.CallCredentials.prototype.hasFileCredentialSource = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gloo.solo.io.SslParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gloo.solo.io.SslParameters.repeatedFields_, null);
};
goog.inherits(proto.gloo.solo.io.SslParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gloo.solo.io.SslParameters.displayName = 'proto.gloo.solo.io.SslParameters';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gloo.solo.io.SslParameters.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gloo.solo.io.SslParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.gloo.solo.io.SslParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gloo.solo.io.SslParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SslParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimumProtocolVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maximumProtocolVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cipherSuitesList: jspb.Message.getRepeatedField(msg, 3),
    ecdhCurvesList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gloo.solo.io.SslParameters}
 */
proto.gloo.solo.io.SslParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gloo.solo.io.SslParameters;
  return proto.gloo.solo.io.SslParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gloo.solo.io.SslParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gloo.solo.io.SslParameters}
 */
proto.gloo.solo.io.SslParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gloo.solo.io.SslParameters.ProtocolVersion} */ (reader.readEnum());
      msg.setMinimumProtocolVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.gloo.solo.io.SslParameters.ProtocolVersion} */ (reader.readEnum());
      msg.setMaximumProtocolVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCipherSuites(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addEcdhCurves(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gloo.solo.io.SslParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gloo.solo.io.SslParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gloo.solo.io.SslParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gloo.solo.io.SslParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinimumProtocolVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMaximumProtocolVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCipherSuitesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getEcdhCurvesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.gloo.solo.io.SslParameters.ProtocolVersion = {
  TLS_AUTO: 0,
  TLSV1_0: 1,
  TLSV1_1: 2,
  TLSV1_2: 3,
  TLSV1_3: 4
};

/**
 * optional ProtocolVersion minimum_protocol_version = 1;
 * @return {!proto.gloo.solo.io.SslParameters.ProtocolVersion}
 */
proto.gloo.solo.io.SslParameters.prototype.getMinimumProtocolVersion = function() {
  return /** @type {!proto.gloo.solo.io.SslParameters.ProtocolVersion} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.gloo.solo.io.SslParameters.ProtocolVersion} value */
proto.gloo.solo.io.SslParameters.prototype.setMinimumProtocolVersion = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ProtocolVersion maximum_protocol_version = 2;
 * @return {!proto.gloo.solo.io.SslParameters.ProtocolVersion}
 */
proto.gloo.solo.io.SslParameters.prototype.getMaximumProtocolVersion = function() {
  return /** @type {!proto.gloo.solo.io.SslParameters.ProtocolVersion} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.gloo.solo.io.SslParameters.ProtocolVersion} value */
proto.gloo.solo.io.SslParameters.prototype.setMaximumProtocolVersion = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string cipher_suites = 3;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.SslParameters.prototype.getCipherSuitesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.SslParameters.prototype.setCipherSuitesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.SslParameters.prototype.addCipherSuites = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.gloo.solo.io.SslParameters.prototype.clearCipherSuitesList = function() {
  this.setCipherSuitesList([]);
};


/**
 * repeated string ecdh_curves = 4;
 * @return {!Array<string>}
 */
proto.gloo.solo.io.SslParameters.prototype.getEcdhCurvesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.gloo.solo.io.SslParameters.prototype.setEcdhCurvesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gloo.solo.io.SslParameters.prototype.addEcdhCurves = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.gloo.solo.io.SslParameters.prototype.clearEcdhCurvesList = function() {
  this.setEcdhCurvesList([]);
};


goog.object.extend(exports, proto.gloo.solo.io);
