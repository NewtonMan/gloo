/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var envoy_api_v2_core_base_pb = require('../../../../../../../../../../solo-kit/api/external/envoy/api/v2/core/base_pb.js');
var validate_validate_pb = require('../../../../../../../../../../validate/validate_pb.js');
var extproto_ext_pb = require('../../../../../../../../../../protoc-gen-ext/extproto/ext_pb.js');
goog.exportSymbol('proto.envoy.config.wasm.v2.PluginConfig', null, global);
goog.exportSymbol('proto.envoy.config.wasm.v2.VmConfig', null, global);
goog.exportSymbol('proto.envoy.config.wasm.v2.WasmService', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.wasm.v2.VmConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.wasm.v2.VmConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.wasm.v2.VmConfig.displayName = 'proto.envoy.config.wasm.v2.VmConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.wasm.v2.VmConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.wasm.v2.VmConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.wasm.v2.VmConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    vmId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    runtime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: (f = msg.getCode()) && envoy_api_v2_core_base_pb.AsyncDataSource.toObject(includeInstance, f),
    configuration: jspb.Message.getFieldWithDefault(msg, 4, ""),
    allowPrecompiled: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.wasm.v2.VmConfig}
 */
proto.envoy.config.wasm.v2.VmConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.wasm.v2.VmConfig;
  return proto.envoy.config.wasm.v2.VmConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.wasm.v2.VmConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.wasm.v2.VmConfig}
 */
proto.envoy.config.wasm.v2.VmConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVmId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntime(value);
      break;
    case 3:
      var value = new envoy_api_v2_core_base_pb.AsyncDataSource;
      reader.readMessage(value,envoy_api_v2_core_base_pb.AsyncDataSource.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfiguration(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowPrecompiled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.wasm.v2.VmConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.wasm.v2.VmConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.wasm.v2.VmConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVmId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRuntime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      envoy_api_v2_core_base_pb.AsyncDataSource.serializeBinaryToWriter
    );
  }
  f = message.getConfiguration();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAllowPrecompiled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string vm_id = 1;
 * @return {string}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.getVmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.VmConfig.prototype.setVmId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string runtime = 2;
 * @return {string}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.getRuntime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.VmConfig.prototype.setRuntime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional envoy.api.v2.core.AsyncDataSource code = 3;
 * @return {?proto.envoy.api.v2.core.AsyncDataSource}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.getCode = function() {
  return /** @type{?proto.envoy.api.v2.core.AsyncDataSource} */ (
    jspb.Message.getWrapperField(this, envoy_api_v2_core_base_pb.AsyncDataSource, 3));
};


/** @param {?proto.envoy.api.v2.core.AsyncDataSource|undefined} value */
proto.envoy.config.wasm.v2.VmConfig.prototype.setCode = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.envoy.config.wasm.v2.VmConfig.prototype.clearCode = function() {
  this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.hasCode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string configuration = 4;
 * @return {string}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.getConfiguration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.VmConfig.prototype.setConfiguration = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool allow_precompiled = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.wasm.v2.VmConfig.prototype.getAllowPrecompiled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.envoy.config.wasm.v2.VmConfig.prototype.setAllowPrecompiled = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.wasm.v2.PluginConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.wasm.v2.PluginConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.wasm.v2.PluginConfig.displayName = 'proto.envoy.config.wasm.v2.PluginConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.wasm.v2.PluginConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.wasm.v2.PluginConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.wasm.v2.PluginConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vmConfig: (f = msg.getVmConfig()) && proto.envoy.config.wasm.v2.VmConfig.toObject(includeInstance, f),
    configuration: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.wasm.v2.PluginConfig}
 */
proto.envoy.config.wasm.v2.PluginConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.wasm.v2.PluginConfig;
  return proto.envoy.config.wasm.v2.PluginConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.wasm.v2.PluginConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.wasm.v2.PluginConfig}
 */
proto.envoy.config.wasm.v2.PluginConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootId(value);
      break;
    case 3:
      var value = new proto.envoy.config.wasm.v2.VmConfig;
      reader.readMessage(value,proto.envoy.config.wasm.v2.VmConfig.deserializeBinaryFromReader);
      msg.setVmConfig(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.wasm.v2.PluginConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.wasm.v2.PluginConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.wasm.v2.PluginConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVmConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.envoy.config.wasm.v2.VmConfig.serializeBinaryToWriter
    );
  }
  f = message.getConfiguration();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.PluginConfig.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root_id = 2;
 * @return {string}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.getRootId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.PluginConfig.prototype.setRootId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional VmConfig vm_config = 3;
 * @return {?proto.envoy.config.wasm.v2.VmConfig}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.getVmConfig = function() {
  return /** @type{?proto.envoy.config.wasm.v2.VmConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.wasm.v2.VmConfig, 3));
};


/** @param {?proto.envoy.config.wasm.v2.VmConfig|undefined} value */
proto.envoy.config.wasm.v2.PluginConfig.prototype.setVmConfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.envoy.config.wasm.v2.PluginConfig.prototype.clearVmConfig = function() {
  this.setVmConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.hasVmConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string configuration = 4;
 * @return {string}
 */
proto.envoy.config.wasm.v2.PluginConfig.prototype.getConfiguration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.PluginConfig.prototype.setConfiguration = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.wasm.v2.WasmService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.wasm.v2.WasmService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.wasm.v2.WasmService.displayName = 'proto.envoy.config.wasm.v2.WasmService';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.wasm.v2.WasmService.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.wasm.v2.WasmService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.wasm.v2.WasmService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.wasm.v2.WasmService.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.envoy.config.wasm.v2.PluginConfig.toObject(includeInstance, f),
    singleton: jspb.Message.getFieldWithDefault(msg, 2, false),
    statPrefix: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.wasm.v2.WasmService}
 */
proto.envoy.config.wasm.v2.WasmService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.wasm.v2.WasmService;
  return proto.envoy.config.wasm.v2.WasmService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.wasm.v2.WasmService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.wasm.v2.WasmService}
 */
proto.envoy.config.wasm.v2.WasmService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.wasm.v2.PluginConfig;
      reader.readMessage(value,proto.envoy.config.wasm.v2.PluginConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSingleton(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.wasm.v2.WasmService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.wasm.v2.WasmService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.wasm.v2.WasmService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.wasm.v2.WasmService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.wasm.v2.PluginConfig.serializeBinaryToWriter
    );
  }
  f = message.getSingleton();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStatPrefix();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional PluginConfig config = 1;
 * @return {?proto.envoy.config.wasm.v2.PluginConfig}
 */
proto.envoy.config.wasm.v2.WasmService.prototype.getConfig = function() {
  return /** @type{?proto.envoy.config.wasm.v2.PluginConfig} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.wasm.v2.PluginConfig, 1));
};


/** @param {?proto.envoy.config.wasm.v2.PluginConfig|undefined} value */
proto.envoy.config.wasm.v2.WasmService.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.wasm.v2.WasmService.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.wasm.v2.WasmService.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool singleton = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.wasm.v2.WasmService.prototype.getSingleton = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.envoy.config.wasm.v2.WasmService.prototype.setSingleton = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string stat_prefix = 3;
 * @return {string}
 */
proto.envoy.config.wasm.v2.WasmService.prototype.getStatPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.envoy.config.wasm.v2.WasmService.prototype.setStatPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.envoy.config.wasm.v2);
