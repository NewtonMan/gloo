// Code generated by skv2. DO NOT EDIT.

package check

import (
	"context"

	"github.com/solo-io/go-utils/stringutils"
	sk_sets "github.com/solo-io/skv2/contrib/pkg/sets/v2"
	corev1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	"github.com/solo-io/skv2/pkg/ezkube"
	enterprise_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"
	types2 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.solo.io/v1/types"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/discovery/translator/summarize"
)

func GetAuthConfigSummary(ctx context.Context, set sk_sets.ResourceSet[*enterprise_gloo_solo_io_v1.AuthConfig], watchedNamespaces []string, cluster string) *types.GlooInstanceSpec_Check_Summary {
	summary := &types.GlooInstanceSpec_Check_Summary{}

	for _, authConfigIter := range set.List() {
		authConfig := authConfigIter

		// If the resource is not in the right cluster, continue
		if ezkube.GetClusterName(authConfig) != cluster {
			continue
		}

		// If the resource is not in a watched namespace, continue
		if len(watchedNamespaces) > 0 && !stringutils.ContainsString(authConfig.Namespace, watchedNamespaces) {
			continue
		}

		summary.Total += 1

		if authConfig.Status.GetState() == types2.AuthConfigStatus_Rejected {
			summary.Errors = append(summary.Errors, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      authConfig.Name,
					Namespace: authConfig.Namespace,
				},
				Message: authConfig.Status.Reason,
			})
		}

		if authConfig.Status.GetState() == types2.AuthConfigStatus_Warning {
			summary.Warnings = append(summary.Warnings, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      authConfig.Name,
					Namespace: authConfig.Namespace,
				},
				Message: authConfig.Status.Reason,
			})
		}

	}

	summarize.SortLists(summary)
	return summary
}
