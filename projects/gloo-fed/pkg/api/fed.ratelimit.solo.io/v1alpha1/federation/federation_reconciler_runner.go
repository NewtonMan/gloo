// Code generated by skv2. DO NOT EDIT.

// Definition for a template that provides an entrypoint for all a federated groups's reconcilers
package federation

import (
	"context"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/skv2/pkg/reconcile"
	ratelimit_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/ratelimit.solo.io/v1alpha1"
	fed_ratelimit_solo_io_v1alpha1 "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.ratelimit.solo.io/v1alpha1"
	fed_ratelimit_solo_io_v1alpha1_controller "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.ratelimit.solo.io/v1alpha1/controller"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/federation/placement"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/multicluster"
	"go.uber.org/zap"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

func Initialize(
	ctx context.Context,
	localManager manager.Manager,
	baseMCClientset ratelimit_solo_io_v1alpha1.MulticlusterClientset,
	clusterSet multicluster.ClusterSet,
	placementManager placement.Manager,
) error {

	federatedRateLimitConfigs := NewFederatedRateLimitConfigReconciler(
		ctx,
		fed_ratelimit_solo_io_v1alpha1.NewClientset(localManager.GetClient()).FederatedRateLimitConfigs(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedRateLimitConfigReconciler := fed_ratelimit_solo_io_v1alpha1_controller.NewFederatedRateLimitConfigReconcileLoop("federatedRateLimitConfig", localManager, reconcile.Options{})
	if err := federatedRateLimitConfigReconciler.RunFederatedRateLimitConfigReconciler(ctx, federatedRateLimitConfigs); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedRateLimitConfig reconciler", zap.Error(err))
		return err
	}

	return nil
}
