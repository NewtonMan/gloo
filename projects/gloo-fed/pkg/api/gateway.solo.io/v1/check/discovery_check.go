// Code generated by skv2. DO NOT EDIT.

package check

import (
	"context"

	"github.com/solo-io/go-utils/stringutils"
	sk_sets "github.com/solo-io/skv2/contrib/pkg/sets/v2"
	corev1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	gateway_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	types2 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.solo.io/v1/types"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/discovery/translator/summarize"
)

func GetGatewaySummary(ctx context.Context, set sk_sets.ResourceSet[*gateway_solo_io_v1.Gateway], watchedNamespaces []string, cluster string) *types.GlooInstanceSpec_Check_Summary {
	summary := &types.GlooInstanceSpec_Check_Summary{}

	for _, gatewayIter := range set.List() {
		gateway := gatewayIter

		// If the resource is not in the right cluster, continue
		if gateway.GetClusterName() != cluster {
			continue
		}

		// If the resource is not in a watched namespace, continue
		if len(watchedNamespaces) > 0 && !stringutils.ContainsString(gateway.Namespace, watchedNamespaces) {
			continue
		}

		summary.Total += 1

		if gateway.Status.GetState() == types2.GatewayStatus_Rejected {
			summary.Errors = append(summary.Errors, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      gateway.Name,
					Namespace: gateway.Namespace,
				},
				Message: gateway.Status.Reason,
			})
		}

		if gateway.Status.GetState() == types2.GatewayStatus_Warning {
			summary.Warnings = append(summary.Warnings, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      gateway.Name,
					Namespace: gateway.Namespace,
				},
				Message: gateway.Status.Reason,
			})
		}

	}

	summarize.SortLists(summary)
	return summary
}

func GetMatchableHttpGatewaySummary(ctx context.Context, set sk_sets.ResourceSet[*gateway_solo_io_v1.MatchableHttpGateway], watchedNamespaces []string, cluster string) *types.GlooInstanceSpec_Check_Summary {
	summary := &types.GlooInstanceSpec_Check_Summary{}

	for _, matchableHttpGatewayIter := range set.List() {
		matchableHttpGateway := matchableHttpGatewayIter

		// If the resource is not in the right cluster, continue
		if matchableHttpGateway.GetClusterName() != cluster {
			continue
		}

		// If the resource is not in a watched namespace, continue
		if len(watchedNamespaces) > 0 && !stringutils.ContainsString(matchableHttpGateway.Namespace, watchedNamespaces) {
			continue
		}

		summary.Total += 1

		if matchableHttpGateway.Status.GetState() == types2.MatchableHttpGatewayStatus_Rejected {
			summary.Errors = append(summary.Errors, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      matchableHttpGateway.Name,
					Namespace: matchableHttpGateway.Namespace,
				},
				Message: matchableHttpGateway.Status.Reason,
			})
		}

		if matchableHttpGateway.Status.GetState() == types2.MatchableHttpGatewayStatus_Warning {
			summary.Warnings = append(summary.Warnings, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      matchableHttpGateway.Name,
					Namespace: matchableHttpGateway.Namespace,
				},
				Message: matchableHttpGateway.Status.Reason,
			})
		}

	}

	summarize.SortLists(summary)
	return summary
}

func GetVirtualServiceSummary(ctx context.Context, set sk_sets.ResourceSet[*gateway_solo_io_v1.VirtualService], watchedNamespaces []string, cluster string) *types.GlooInstanceSpec_Check_Summary {
	summary := &types.GlooInstanceSpec_Check_Summary{}

	for _, virtualServiceIter := range set.List() {
		virtualService := virtualServiceIter

		// If the resource is not in the right cluster, continue
		if virtualService.GetClusterName() != cluster {
			continue
		}

		// If the resource is not in a watched namespace, continue
		if len(watchedNamespaces) > 0 && !stringutils.ContainsString(virtualService.Namespace, watchedNamespaces) {
			continue
		}

		summary.Total += 1

		if virtualService.Status.GetState() == types2.VirtualServiceStatus_Rejected {
			summary.Errors = append(summary.Errors, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      virtualService.Name,
					Namespace: virtualService.Namespace,
				},
				Message: virtualService.Status.Reason,
			})
		}

		if virtualService.Status.GetState() == types2.VirtualServiceStatus_Warning {
			summary.Warnings = append(summary.Warnings, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      virtualService.Name,
					Namespace: virtualService.Namespace,
				},
				Message: virtualService.Status.Reason,
			})
		}

	}

	summarize.SortLists(summary)
	return summary
}

func GetRouteTableSummary(ctx context.Context, set sk_sets.ResourceSet[*gateway_solo_io_v1.RouteTable], watchedNamespaces []string, cluster string) *types.GlooInstanceSpec_Check_Summary {
	summary := &types.GlooInstanceSpec_Check_Summary{}

	for _, routeTableIter := range set.List() {
		routeTable := routeTableIter

		// If the resource is not in the right cluster, continue
		if routeTable.GetClusterName() != cluster {
			continue
		}

		// If the resource is not in a watched namespace, continue
		if len(watchedNamespaces) > 0 && !stringutils.ContainsString(routeTable.Namespace, watchedNamespaces) {
			continue
		}

		summary.Total += 1

		if routeTable.Status.GetState() == types2.RouteTableStatus_Rejected {
			summary.Errors = append(summary.Errors, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      routeTable.Name,
					Namespace: routeTable.Namespace,
				},
				Message: routeTable.Status.Reason,
			})
		}

		if routeTable.Status.GetState() == types2.RouteTableStatus_Warning {
			summary.Warnings = append(summary.Warnings, &types.GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      routeTable.Name,
					Namespace: routeTable.Namespace,
				},
				Message: routeTable.Status.Reason,
			})
		}

	}

	summarize.SortLists(summary)
	return summary
}
