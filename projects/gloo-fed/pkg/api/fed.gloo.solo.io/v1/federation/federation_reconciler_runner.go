// Code generated by skv2. DO NOT EDIT.

// Definition for a template that provides an entrypoint for all a federated groups's reconcilers
package federation

import (
	"context"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/skv2/pkg/reconcile"
	gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1"
	fed_gloo_solo_io_v1 "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.gloo.solo.io/v1"
	fed_gloo_solo_io_v1_controller "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.gloo.solo.io/v1/controller"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/federation/placement"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/multicluster"
	"go.uber.org/zap"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

func Initialize(
	ctx context.Context,
	localManager manager.Manager,
	baseMCClientset gloo_solo_io_v1.MulticlusterClientset,
	clusterSet multicluster.ClusterSet,
	placementManager placement.Manager,
) error {

	federatedUpstreams := NewFederatedUpstreamReconciler(
		ctx,
		fed_gloo_solo_io_v1.NewClientset(localManager.GetClient()).FederatedUpstreams(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedUpstreamReconciler := fed_gloo_solo_io_v1_controller.NewFederatedUpstreamReconcileLoop("federatedUpstream", localManager, reconcile.Options{})
	if err := federatedUpstreamReconciler.RunFederatedUpstreamReconciler(ctx, federatedUpstreams); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedUpstream reconciler", zap.Error(err))
		return err
	}

	federatedUpstreamGroups := NewFederatedUpstreamGroupReconciler(
		ctx,
		fed_gloo_solo_io_v1.NewClientset(localManager.GetClient()).FederatedUpstreamGroups(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedUpstreamGroupReconciler := fed_gloo_solo_io_v1_controller.NewFederatedUpstreamGroupReconcileLoop("federatedUpstreamGroup", localManager, reconcile.Options{})
	if err := federatedUpstreamGroupReconciler.RunFederatedUpstreamGroupReconciler(ctx, federatedUpstreamGroups); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedUpstreamGroup reconciler", zap.Error(err))
		return err
	}

	federatedSettings := NewFederatedSettingsReconciler(
		ctx,
		fed_gloo_solo_io_v1.NewClientset(localManager.GetClient()).FederatedSettings(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedSettingsReconciler := fed_gloo_solo_io_v1_controller.NewFederatedSettingsReconcileLoop("federatedSettings", localManager, reconcile.Options{})
	if err := federatedSettingsReconciler.RunFederatedSettingsReconciler(ctx, federatedSettings); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedSettings reconciler", zap.Error(err))
		return err
	}

	return nil
}
