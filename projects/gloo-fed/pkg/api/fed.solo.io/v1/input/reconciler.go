// Code generated by skv2. DO NOT EDIT.

// The Input Reconciler calls a simple func() error whenever a
// storage event is received for any of:
// * Services
// * Pods
// * Deployments
// * DaemonSets
// * Gateways
// * MatchableHttpGateways
// * VirtualServices
// * RouteTables
// * Upstreams
// * UpstreamGroups
// * Settings
// * Proxies
// * AuthConfigs
// * RateLimitConfigs
// for a given cluster or set of clusters.
//
// Input Reconcilers can be be constructed from either a single Manager (watch events in a single cluster)
// or a ClusterWatcher (watch events in multiple clusters).
package input

import (
	"context"
	"time"

	"github.com/solo-io/skv2/contrib/pkg/input"
	sk_core_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	"github.com/solo-io/skv2/pkg/multicluster"
	multicluster_reconcile_v2 "github.com/solo-io/skv2/pkg/multicluster/reconcile/v2"
	multicluster_v2 "github.com/solo-io/skv2/pkg/multicluster/v2"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	reconcile_v2 "github.com/solo-io/skv2/pkg/reconcile/v2"

	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"

	v1_types "k8s.io/api/core/v1"

	apps_v1_types "k8s.io/api/apps/v1"

	gateway_solo_io_v1_types "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"

	gloo_solo_io_v1_types "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1"

	enterprise_gloo_solo_io_v1_types "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"

	ratelimit_api_solo_io_v1alpha1_types "github.com/solo-io/solo-apis/pkg/api/ratelimit.solo.io/v1alpha1"
)

type multiClusterReconcilerImpl struct {
	base input.InputReconciler
}

// Options for reconciling a snapshot
type ReconcileOptions struct {

	// Options for reconciling Services
	Services reconcile.Options
	// Options for reconciling Pods
	Pods reconcile.Options
	// Options for reconciling Deployments
	Deployments reconcile.Options
	// Options for reconciling DaemonSets
	DaemonSets reconcile.Options
	// Options for reconciling Gateways
	Gateways reconcile.Options
	// Options for reconciling MatchableHttpGateways
	MatchableHttpGateways reconcile.Options
	// Options for reconciling VirtualServices
	VirtualServices reconcile.Options
	// Options for reconciling RouteTables
	RouteTables reconcile.Options
	// Options for reconciling Upstreams
	Upstreams reconcile.Options
	// Options for reconciling UpstreamGroups
	UpstreamGroups reconcile.Options
	// Options for reconciling Settings
	Settings reconcile.Options
	// Options for reconciling Proxies
	Proxies reconcile.Options
	// Options for reconciling AuthConfigs
	AuthConfigs reconcile.Options
	// Options for reconciling RateLimitConfigs
	RateLimitConfigs reconcile.Options
}

// register the reconcile func with the cluster watcher
// the reconcileInterval, if greater than 0, will limit the number of reconciles
// to one per interval.
func RegisterMultiClusterReconciler(
	ctx context.Context,
	clusters multicluster.ClusterWatcher,
	reconcileFunc input.MultiClusterReconcileFunc,
	reconcileInterval time.Duration,
	options ReconcileOptions,
	predicates ...predicate.Predicate,
) input.InputReconciler {

	base := input.NewInputReconciler(
		ctx,
		reconcileFunc,
		nil,
		reconcileInterval,
	)

	r := &multiClusterReconcilerImpl{
		base: base,
	}

	// initialize reconcile loops

	multicluster_reconcile_v2.NewLoop("das", clusters, &v1_types.Service{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*v1_types.Service]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *v1_types.Service) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &v1_types.Pod{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*v1_types.Pod]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *v1_types.Pod) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &apps_v1_types.Deployment{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*apps_v1_types.Deployment]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *apps_v1_types.Deployment) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &apps_v1_types.DaemonSet{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*apps_v1_types.DaemonSet]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *apps_v1_types.DaemonSet) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gateway_solo_io_v1_types.Gateway{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gateway_solo_io_v1_types.Gateway]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gateway_solo_io_v1_types.Gateway) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gateway_solo_io_v1_types.MatchableHttpGateway{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gateway_solo_io_v1_types.MatchableHttpGateway]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gateway_solo_io_v1_types.MatchableHttpGateway) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gateway_solo_io_v1_types.VirtualService{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gateway_solo_io_v1_types.VirtualService]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gateway_solo_io_v1_types.VirtualService) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gateway_solo_io_v1_types.RouteTable{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gateway_solo_io_v1_types.RouteTable]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gateway_solo_io_v1_types.RouteTable) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gloo_solo_io_v1_types.Upstream{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gloo_solo_io_v1_types.Upstream]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gloo_solo_io_v1_types.Upstream) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gloo_solo_io_v1_types.UpstreamGroup{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gloo_solo_io_v1_types.UpstreamGroup]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gloo_solo_io_v1_types.UpstreamGroup) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gloo_solo_io_v1_types.Settings{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gloo_solo_io_v1_types.Settings]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gloo_solo_io_v1_types.Settings) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &gloo_solo_io_v1_types.Proxy{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*gloo_solo_io_v1_types.Proxy]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *gloo_solo_io_v1_types.Proxy) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &enterprise_gloo_solo_io_v1_types.AuthConfig{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*enterprise_gloo_solo_io_v1_types.AuthConfig]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *enterprise_gloo_solo_io_v1_types.AuthConfig) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)

	multicluster_reconcile_v2.NewLoop("das", clusters, &ratelimit_api_solo_io_v1alpha1_types.RateLimitConfig{}, reconcile_v2.Options{}).
		AddReconciler(ctx, &multicluster_v2.ReconcilerFuncs[*ratelimit_api_solo_io_v1alpha1_types.RateLimitConfig]{
			ReconcileFunc: func(ctx context.Context, clusterName string, obj *ratelimit_api_solo_io_v1alpha1_types.RateLimitConfig) (reconcile.Result, error) {
				obj.ClusterName = clusterName
				return r.base.ReconcileRemoteGeneric(obj)
			},
			ReconcileDeletionFunc: func(ctx context.Context, clusterName string, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ClusterObjectRef{
					Name:        obj.Name,
					Namespace:   obj.Namespace,
					ClusterName: clusterName,
				}
				_, err := r.base.ReconcileRemoteGeneric(ref)
				return err
			},
		}, predicates...)
	return r.base
}

type singleClusterReconcilerImpl struct {
	base input.InputReconciler
}

// register the reconcile func with the manager
// the reconcileInterval, if greater than 0, will limit the number of reconciles
// to one per interval.
func RegisterSingleClusterReconciler(
	ctx context.Context,
	mgr manager.Manager,
	reconcileFunc input.SingleClusterReconcileFunc,
	reconcileInterval time.Duration,
	options reconcile_v2.Options,
	predicates ...predicate.Predicate,
) (input.InputReconciler, error) {

	base := input.NewInputReconciler(
		ctx,
		nil,
		reconcileFunc,
		reconcileInterval,
	)

	r := &singleClusterReconcilerImpl{
		base: base,
	}

	// initialize reconcile loops

	if err := reconcile_v2.NewLoop("Service", "", mgr, &v1_types.Service{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*v1_types.Service]{
			ReconcileFunc: func(ctx context.Context, object *v1_types.Service) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &v1_types.Pod{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*v1_types.Pod]{
			ReconcileFunc: func(ctx context.Context, object *v1_types.Pod) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}

	if err := reconcile_v2.NewLoop("Service", "", mgr, &apps_v1_types.Deployment{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*apps_v1_types.Deployment]{
			ReconcileFunc: func(ctx context.Context, object *apps_v1_types.Deployment) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &apps_v1_types.DaemonSet{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*apps_v1_types.DaemonSet]{
			ReconcileFunc: func(ctx context.Context, object *apps_v1_types.DaemonSet) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}

	if err := reconcile_v2.NewLoop("Service", "", mgr, &gateway_solo_io_v1_types.Gateway{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gateway_solo_io_v1_types.Gateway]{
			ReconcileFunc: func(ctx context.Context, object *gateway_solo_io_v1_types.Gateway) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &gateway_solo_io_v1_types.MatchableHttpGateway{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gateway_solo_io_v1_types.MatchableHttpGateway]{
			ReconcileFunc: func(ctx context.Context, object *gateway_solo_io_v1_types.MatchableHttpGateway) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &gateway_solo_io_v1_types.VirtualService{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gateway_solo_io_v1_types.VirtualService]{
			ReconcileFunc: func(ctx context.Context, object *gateway_solo_io_v1_types.VirtualService) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &gateway_solo_io_v1_types.RouteTable{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gateway_solo_io_v1_types.RouteTable]{
			ReconcileFunc: func(ctx context.Context, object *gateway_solo_io_v1_types.RouteTable) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}

	if err := reconcile_v2.NewLoop("Service", "", mgr, &gloo_solo_io_v1_types.Upstream{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gloo_solo_io_v1_types.Upstream]{
			ReconcileFunc: func(ctx context.Context, object *gloo_solo_io_v1_types.Upstream) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &gloo_solo_io_v1_types.UpstreamGroup{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gloo_solo_io_v1_types.UpstreamGroup]{
			ReconcileFunc: func(ctx context.Context, object *gloo_solo_io_v1_types.UpstreamGroup) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &gloo_solo_io_v1_types.Settings{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gloo_solo_io_v1_types.Settings]{
			ReconcileFunc: func(ctx context.Context, object *gloo_solo_io_v1_types.Settings) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}
	if err := reconcile_v2.NewLoop("Service", "", mgr, &gloo_solo_io_v1_types.Proxy{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*gloo_solo_io_v1_types.Proxy]{
			ReconcileFunc: func(ctx context.Context, object *gloo_solo_io_v1_types.Proxy) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}

	if err := reconcile_v2.NewLoop("Service", "", mgr, &enterprise_gloo_solo_io_v1_types.AuthConfig{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*enterprise_gloo_solo_io_v1_types.AuthConfig]{
			ReconcileFunc: func(ctx context.Context, object *enterprise_gloo_solo_io_v1_types.AuthConfig) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}

	if err := reconcile_v2.NewLoop("Service", "", mgr, &ratelimit_api_solo_io_v1alpha1_types.RateLimitConfig{}, options).
		RunReconciler(ctx, &reconcile_v2.ReconcileFuncs[*ratelimit_api_solo_io_v1alpha1_types.RateLimitConfig]{
			ReconcileFunc: func(ctx context.Context, object *ratelimit_api_solo_io_v1alpha1_types.RateLimitConfig) (reconcile.Result, error) {
				return r.base.ReconcileRemoteGeneric(object)
			},
			DeletionReconcilerFunc: func(ctx context.Context, obj reconcile_v2.Request) error {
				ref := &sk_core_v1.ObjectRef{
					Name:      obj.Name,
					Namespace: obj.Namespace,
				}
				_, err := r.base.ReconcileLocalGeneric(ref)
				return err
			},
		}, predicates...); err != nil {
		return nil, err
	}

	return r.base, nil
}
