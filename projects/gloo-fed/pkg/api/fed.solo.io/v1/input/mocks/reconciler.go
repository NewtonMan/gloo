// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconciler.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"
	v10 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	v11 "github.com/solo-io/solo-apis/pkg/api/gloo.solo.io/v1"
	v12 "k8s.io/api/apps/v1"
	v13 "k8s.io/api/core/v1"
)

// MockmultiClusterReconciler is a mock of multiClusterReconciler interface
type MockmultiClusterReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockmultiClusterReconcilerMockRecorder
}

// MockmultiClusterReconcilerMockRecorder is the mock recorder for MockmultiClusterReconciler
type MockmultiClusterReconcilerMockRecorder struct {
	mock *MockmultiClusterReconciler
}

// NewMockmultiClusterReconciler creates a new mock instance
func NewMockmultiClusterReconciler(ctrl *gomock.Controller) *MockmultiClusterReconciler {
	mock := &MockmultiClusterReconciler{ctrl: ctrl}
	mock.recorder = &MockmultiClusterReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmultiClusterReconciler) EXPECT() *MockmultiClusterReconcilerMockRecorder {
	return m.recorder
}

// ReconcileService mocks base method
func (m *MockmultiClusterReconciler) ReconcileService(clusterName string, obj *v13.Service) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileService", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileService indicates an expected call of ReconcileService
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileService(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileService", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileService), clusterName, obj)
}

// ReconcilePod mocks base method
func (m *MockmultiClusterReconciler) ReconcilePod(clusterName string, obj *v13.Pod) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePod", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePod indicates an expected call of ReconcilePod
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcilePod(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePod", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcilePod), clusterName, obj)
}

// ReconcileDeployment mocks base method
func (m *MockmultiClusterReconciler) ReconcileDeployment(clusterName string, obj *v12.Deployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDeployment", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDeployment indicates an expected call of ReconcileDeployment
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileDeployment(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDeployment", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileDeployment), clusterName, obj)
}

// ReconcileDaemonSet mocks base method
func (m *MockmultiClusterReconciler) ReconcileDaemonSet(clusterName string, obj *v12.DaemonSet) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDaemonSet", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDaemonSet indicates an expected call of ReconcileDaemonSet
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileDaemonSet(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDaemonSet", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileDaemonSet), clusterName, obj)
}

// ReconcileGateway mocks base method
func (m *MockmultiClusterReconciler) ReconcileGateway(clusterName string, obj *v10.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileGateway), clusterName, obj)
}

// ReconcileVirtualService mocks base method
func (m *MockmultiClusterReconciler) ReconcileVirtualService(clusterName string, obj *v10.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileVirtualService(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileVirtualService), clusterName, obj)
}

// ReconcileRouteTable mocks base method
func (m *MockmultiClusterReconciler) ReconcileRouteTable(clusterName string, obj *v10.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileRouteTable(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileRouteTable), clusterName, obj)
}

// ReconcileUpstream mocks base method
func (m *MockmultiClusterReconciler) ReconcileUpstream(clusterName string, obj *v11.Upstream) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUpstream", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUpstream indicates an expected call of ReconcileUpstream
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileUpstream(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUpstream", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileUpstream), clusterName, obj)
}

// ReconcileUpstreamGroup mocks base method
func (m *MockmultiClusterReconciler) ReconcileUpstreamGroup(clusterName string, obj *v11.UpstreamGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUpstreamGroup", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUpstreamGroup indicates an expected call of ReconcileUpstreamGroup
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileUpstreamGroup(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUpstreamGroup", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileUpstreamGroup), clusterName, obj)
}

// ReconcileSettings mocks base method
func (m *MockmultiClusterReconciler) ReconcileSettings(clusterName string, obj *v11.Settings) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSettings", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSettings indicates an expected call of ReconcileSettings
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileSettings(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSettings", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileSettings), clusterName, obj)
}

// ReconcileProxy mocks base method
func (m *MockmultiClusterReconciler) ReconcileProxy(clusterName string, obj *v11.Proxy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProxy", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileProxy indicates an expected call of ReconcileProxy
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileProxy(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProxy", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileProxy), clusterName, obj)
}

// ReconcileAuthConfig mocks base method
func (m *MockmultiClusterReconciler) ReconcileAuthConfig(clusterName string, obj *v1.AuthConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAuthConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAuthConfig indicates an expected call of ReconcileAuthConfig
func (mr *MockmultiClusterReconcilerMockRecorder) ReconcileAuthConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAuthConfig", reflect.TypeOf((*MockmultiClusterReconciler)(nil).ReconcileAuthConfig), clusterName, obj)
}

// MocksingleClusterReconciler is a mock of singleClusterReconciler interface
type MocksingleClusterReconciler struct {
	ctrl     *gomock.Controller
	recorder *MocksingleClusterReconcilerMockRecorder
}

// MocksingleClusterReconcilerMockRecorder is the mock recorder for MocksingleClusterReconciler
type MocksingleClusterReconcilerMockRecorder struct {
	mock *MocksingleClusterReconciler
}

// NewMocksingleClusterReconciler creates a new mock instance
func NewMocksingleClusterReconciler(ctrl *gomock.Controller) *MocksingleClusterReconciler {
	mock := &MocksingleClusterReconciler{ctrl: ctrl}
	mock.recorder = &MocksingleClusterReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksingleClusterReconciler) EXPECT() *MocksingleClusterReconcilerMockRecorder {
	return m.recorder
}

// ReconcileService mocks base method
func (m *MocksingleClusterReconciler) ReconcileService(obj *v13.Service) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileService indicates an expected call of ReconcileService
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileService", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileService), obj)
}

// ReconcilePod mocks base method
func (m *MocksingleClusterReconciler) ReconcilePod(obj *v13.Pod) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePod", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePod indicates an expected call of ReconcilePod
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcilePod(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePod", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcilePod), obj)
}

// ReconcileDeployment mocks base method
func (m *MocksingleClusterReconciler) ReconcileDeployment(obj *v12.Deployment) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDeployment", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDeployment indicates an expected call of ReconcileDeployment
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileDeployment(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDeployment", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileDeployment), obj)
}

// ReconcileDaemonSet mocks base method
func (m *MocksingleClusterReconciler) ReconcileDaemonSet(obj *v12.DaemonSet) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDaemonSet", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDaemonSet indicates an expected call of ReconcileDaemonSet
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileDaemonSet(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDaemonSet", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileDaemonSet), obj)
}

// ReconcileGateway mocks base method
func (m *MocksingleClusterReconciler) ReconcileGateway(obj *v10.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileGateway), obj)
}

// ReconcileVirtualService mocks base method
func (m *MocksingleClusterReconciler) ReconcileVirtualService(obj *v10.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileVirtualService), obj)
}

// ReconcileRouteTable mocks base method
func (m *MocksingleClusterReconciler) ReconcileRouteTable(obj *v10.RouteTable) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRouteTable", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRouteTable indicates an expected call of ReconcileRouteTable
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileRouteTable(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRouteTable", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileRouteTable), obj)
}

// ReconcileUpstream mocks base method
func (m *MocksingleClusterReconciler) ReconcileUpstream(obj *v11.Upstream) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUpstream", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUpstream indicates an expected call of ReconcileUpstream
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileUpstream(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUpstream", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileUpstream), obj)
}

// ReconcileUpstreamGroup mocks base method
func (m *MocksingleClusterReconciler) ReconcileUpstreamGroup(obj *v11.UpstreamGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUpstreamGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUpstreamGroup indicates an expected call of ReconcileUpstreamGroup
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileUpstreamGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUpstreamGroup", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileUpstreamGroup), obj)
}

// ReconcileSettings mocks base method
func (m *MocksingleClusterReconciler) ReconcileSettings(obj *v11.Settings) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSettings", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSettings indicates an expected call of ReconcileSettings
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileSettings(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSettings", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileSettings), obj)
}

// ReconcileProxy mocks base method
func (m *MocksingleClusterReconciler) ReconcileProxy(obj *v11.Proxy) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProxy", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileProxy indicates an expected call of ReconcileProxy
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileProxy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProxy", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileProxy), obj)
}

// ReconcileAuthConfig mocks base method
func (m *MocksingleClusterReconciler) ReconcileAuthConfig(obj *v1.AuthConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileAuthConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileAuthConfig indicates an expected call of ReconcileAuthConfig
func (mr *MocksingleClusterReconcilerMockRecorder) ReconcileAuthConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileAuthConfig", reflect.TypeOf((*MocksingleClusterReconciler)(nil).ReconcileAuthConfig), obj)
}
