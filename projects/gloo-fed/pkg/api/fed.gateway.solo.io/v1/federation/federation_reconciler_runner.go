// Code generated by skv2. DO NOT EDIT.

// Definition for a template that provides an entrypoint for all a federated groups's reconcilers
package federation

import (
	"context"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/skv2/pkg/reconcile"
	gateway_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	fed_gateway_solo_io_v1 "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.gateway.solo.io/v1"
	fed_gateway_solo_io_v1_controller "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.gateway.solo.io/v1/controller"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/federation/placement"
	"github.com/solo-io/solo-projects/projects/gloo-fed/pkg/multicluster"
	"go.uber.org/zap"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

func Initialize(
	ctx context.Context,
	localManager manager.Manager,
	baseMCClientset gateway_solo_io_v1.MulticlusterClientset,
	clusterSet multicluster.ClusterSet,
	placementManager placement.Manager,
) error {

	federatedGateways := NewFederatedGatewayReconciler(
		ctx,
		fed_gateway_solo_io_v1.NewClientset(localManager.GetClient()).FederatedGateways(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedGatewayReconciler := fed_gateway_solo_io_v1_controller.NewFederatedGatewayReconcileLoop("federatedGateway", localManager, reconcile.Options{})
	if err := federatedGatewayReconciler.RunFederatedGatewayReconciler(ctx, federatedGateways); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedGateway reconciler", zap.Error(err))
		return err
	}

	federatedMatchableHttpGateways := NewFederatedMatchableHttpGatewayReconciler(
		ctx,
		fed_gateway_solo_io_v1.NewClientset(localManager.GetClient()).FederatedMatchableHttpGateways(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedMatchableHttpGatewayReconciler := fed_gateway_solo_io_v1_controller.NewFederatedMatchableHttpGatewayReconcileLoop("federatedMatchableHttpGateway", localManager, reconcile.Options{})
	if err := federatedMatchableHttpGatewayReconciler.RunFederatedMatchableHttpGatewayReconciler(ctx, federatedMatchableHttpGateways); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedMatchableHttpGateway reconciler", zap.Error(err))
		return err
	}

	federatedMatchableTcpGateways := NewFederatedMatchableTcpGatewayReconciler(
		ctx,
		fed_gateway_solo_io_v1.NewClientset(localManager.GetClient()).FederatedMatchableTcpGateways(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedMatchableTcpGatewayReconciler := fed_gateway_solo_io_v1_controller.NewFederatedMatchableTcpGatewayReconcileLoop("federatedMatchableTcpGateway", localManager, reconcile.Options{})
	if err := federatedMatchableTcpGatewayReconciler.RunFederatedMatchableTcpGatewayReconciler(ctx, federatedMatchableTcpGateways); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedMatchableTcpGateway reconciler", zap.Error(err))
		return err
	}

	federatedVirtualServices := NewFederatedVirtualServiceReconciler(
		ctx,
		fed_gateway_solo_io_v1.NewClientset(localManager.GetClient()).FederatedVirtualServices(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedVirtualServiceReconciler := fed_gateway_solo_io_v1_controller.NewFederatedVirtualServiceReconcileLoop("federatedVirtualService", localManager, reconcile.Options{})
	if err := federatedVirtualServiceReconciler.RunFederatedVirtualServiceReconciler(ctx, federatedVirtualServices); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedVirtualService reconciler", zap.Error(err))
		return err
	}

	federatedRouteTables := NewFederatedRouteTableReconciler(
		ctx,
		fed_gateway_solo_io_v1.NewClientset(localManager.GetClient()).FederatedRouteTables(),
		baseMCClientset,
		placementManager,
		clusterSet,
	)
	federatedRouteTableReconciler := fed_gateway_solo_io_v1_controller.NewFederatedRouteTableReconcileLoop("federatedRouteTable", localManager, reconcile.Options{})
	if err := federatedRouteTableReconciler.RunFederatedRouteTableReconciler(ctx, federatedRouteTables); err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Error running FederatedRouteTable reconciler", zap.Error(err))
		return err
	}

	return nil
}
