// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/multicluster.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// MultiClusterRoleBindings mocks base method.
func (m *MockClientset) MultiClusterRoleBindings() v1alpha1.MultiClusterRoleBindingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiClusterRoleBindings")
	ret0, _ := ret[0].(v1alpha1.MultiClusterRoleBindingClient)
	return ret0
}

// MultiClusterRoleBindings indicates an expected call of MultiClusterRoleBindings.
func (mr *MockClientsetMockRecorder) MultiClusterRoleBindings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiClusterRoleBindings", reflect.TypeOf((*MockClientset)(nil).MultiClusterRoleBindings))
}

// MultiClusterRoles mocks base method.
func (m *MockClientset) MultiClusterRoles() v1alpha1.MultiClusterRoleClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiClusterRoles")
	ret0, _ := ret[0].(v1alpha1.MultiClusterRoleClient)
	return ret0
}

// MultiClusterRoles indicates an expected call of MultiClusterRoles.
func (mr *MockClientsetMockRecorder) MultiClusterRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiClusterRoles", reflect.TypeOf((*MockClientset)(nil).MultiClusterRoles))
}

// MockMultiClusterRoleReader is a mock of MultiClusterRoleReader interface.
type MockMultiClusterRoleReader struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleReaderMockRecorder
}

// MockMultiClusterRoleReaderMockRecorder is the mock recorder for MockMultiClusterRoleReader.
type MockMultiClusterRoleReaderMockRecorder struct {
	mock *MockMultiClusterRoleReader
}

// NewMockMultiClusterRoleReader creates a new mock instance.
func NewMockMultiClusterRoleReader(ctrl *gomock.Controller) *MockMultiClusterRoleReader {
	mock := &MockMultiClusterRoleReader{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleReader) EXPECT() *MockMultiClusterRoleReaderMockRecorder {
	return m.recorder
}

// GetMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleReader) GetMultiClusterRole(ctx context.Context, key client.ObjectKey) (*v1alpha1.MultiClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiClusterRole", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiClusterRole indicates an expected call of GetMultiClusterRole.
func (mr *MockMultiClusterRoleReaderMockRecorder) GetMultiClusterRole(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleReader)(nil).GetMultiClusterRole), ctx, key)
}

// ListMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleReader) ListMultiClusterRole(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MultiClusterRoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultiClusterRole", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultiClusterRole indicates an expected call of ListMultiClusterRole.
func (mr *MockMultiClusterRoleReaderMockRecorder) ListMultiClusterRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleReader)(nil).ListMultiClusterRole), varargs...)
}

// MockMultiClusterRoleWriter is a mock of MultiClusterRoleWriter interface.
type MockMultiClusterRoleWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleWriterMockRecorder
}

// MockMultiClusterRoleWriterMockRecorder is the mock recorder for MockMultiClusterRoleWriter.
type MockMultiClusterRoleWriterMockRecorder struct {
	mock *MockMultiClusterRoleWriter
}

// NewMockMultiClusterRoleWriter creates a new mock instance.
func NewMockMultiClusterRoleWriter(ctrl *gomock.Controller) *MockMultiClusterRoleWriter {
	mock := &MockMultiClusterRoleWriter{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleWriter) EXPECT() *MockMultiClusterRoleWriterMockRecorder {
	return m.recorder
}

// CreateMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleWriter) CreateMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiClusterRole indicates an expected call of CreateMultiClusterRole.
func (mr *MockMultiClusterRoleWriterMockRecorder) CreateMultiClusterRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleWriter)(nil).CreateMultiClusterRole), varargs...)
}

// DeleteAllOfMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleWriter) DeleteAllOfMultiClusterRole(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMultiClusterRole indicates an expected call of DeleteAllOfMultiClusterRole.
func (mr *MockMultiClusterRoleWriterMockRecorder) DeleteAllOfMultiClusterRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleWriter)(nil).DeleteAllOfMultiClusterRole), varargs...)
}

// DeleteMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleWriter) DeleteMultiClusterRole(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiClusterRole indicates an expected call of DeleteMultiClusterRole.
func (mr *MockMultiClusterRoleWriterMockRecorder) DeleteMultiClusterRole(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleWriter)(nil).DeleteMultiClusterRole), varargs...)
}

// PatchMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleWriter) PatchMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRole indicates an expected call of PatchMultiClusterRole.
func (mr *MockMultiClusterRoleWriterMockRecorder) PatchMultiClusterRole(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleWriter)(nil).PatchMultiClusterRole), varargs...)
}

// UpdateMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleWriter) UpdateMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRole indicates an expected call of UpdateMultiClusterRole.
func (mr *MockMultiClusterRoleWriterMockRecorder) UpdateMultiClusterRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleWriter)(nil).UpdateMultiClusterRole), varargs...)
}

// UpsertMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleWriter) UpsertMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, transitionFuncs ...v1alpha1.MultiClusterRoleTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMultiClusterRole indicates an expected call of UpsertMultiClusterRole.
func (mr *MockMultiClusterRoleWriterMockRecorder) UpsertMultiClusterRole(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleWriter)(nil).UpsertMultiClusterRole), varargs...)
}

// MockMultiClusterRoleStatusWriter is a mock of MultiClusterRoleStatusWriter interface.
type MockMultiClusterRoleStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleStatusWriterMockRecorder
}

// MockMultiClusterRoleStatusWriterMockRecorder is the mock recorder for MockMultiClusterRoleStatusWriter.
type MockMultiClusterRoleStatusWriterMockRecorder struct {
	mock *MockMultiClusterRoleStatusWriter
}

// NewMockMultiClusterRoleStatusWriter creates a new mock instance.
func NewMockMultiClusterRoleStatusWriter(ctrl *gomock.Controller) *MockMultiClusterRoleStatusWriter {
	mock := &MockMultiClusterRoleStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleStatusWriter) EXPECT() *MockMultiClusterRoleStatusWriterMockRecorder {
	return m.recorder
}

// PatchMultiClusterRoleStatus mocks base method.
func (m *MockMultiClusterRoleStatusWriter) PatchMultiClusterRoleStatus(ctx context.Context, obj *v1alpha1.MultiClusterRole, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRoleStatus indicates an expected call of PatchMultiClusterRoleStatus.
func (mr *MockMultiClusterRoleStatusWriterMockRecorder) PatchMultiClusterRoleStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRoleStatus", reflect.TypeOf((*MockMultiClusterRoleStatusWriter)(nil).PatchMultiClusterRoleStatus), varargs...)
}

// UpdateMultiClusterRoleStatus mocks base method.
func (m *MockMultiClusterRoleStatusWriter) UpdateMultiClusterRoleStatus(ctx context.Context, obj *v1alpha1.MultiClusterRole, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRoleStatus indicates an expected call of UpdateMultiClusterRoleStatus.
func (mr *MockMultiClusterRoleStatusWriterMockRecorder) UpdateMultiClusterRoleStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRoleStatus", reflect.TypeOf((*MockMultiClusterRoleStatusWriter)(nil).UpdateMultiClusterRoleStatus), varargs...)
}

// MockMultiClusterRoleClient is a mock of MultiClusterRoleClient interface.
type MockMultiClusterRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleClientMockRecorder
}

// MockMultiClusterRoleClientMockRecorder is the mock recorder for MockMultiClusterRoleClient.
type MockMultiClusterRoleClientMockRecorder struct {
	mock *MockMultiClusterRoleClient
}

// NewMockMultiClusterRoleClient creates a new mock instance.
func NewMockMultiClusterRoleClient(ctrl *gomock.Controller) *MockMultiClusterRoleClient {
	mock := &MockMultiClusterRoleClient{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleClient) EXPECT() *MockMultiClusterRoleClientMockRecorder {
	return m.recorder
}

// CreateMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) CreateMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiClusterRole indicates an expected call of CreateMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) CreateMultiClusterRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).CreateMultiClusterRole), varargs...)
}

// DeleteAllOfMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) DeleteAllOfMultiClusterRole(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMultiClusterRole indicates an expected call of DeleteAllOfMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) DeleteAllOfMultiClusterRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).DeleteAllOfMultiClusterRole), varargs...)
}

// DeleteMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) DeleteMultiClusterRole(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiClusterRole indicates an expected call of DeleteMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) DeleteMultiClusterRole(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).DeleteMultiClusterRole), varargs...)
}

// GetMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) GetMultiClusterRole(ctx context.Context, key client.ObjectKey) (*v1alpha1.MultiClusterRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiClusterRole", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiClusterRole indicates an expected call of GetMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) GetMultiClusterRole(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).GetMultiClusterRole), ctx, key)
}

// ListMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) ListMultiClusterRole(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MultiClusterRoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultiClusterRole", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultiClusterRole indicates an expected call of ListMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) ListMultiClusterRole(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).ListMultiClusterRole), varargs...)
}

// PatchMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) PatchMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRole indicates an expected call of PatchMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) PatchMultiClusterRole(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).PatchMultiClusterRole), varargs...)
}

// PatchMultiClusterRoleStatus mocks base method.
func (m *MockMultiClusterRoleClient) PatchMultiClusterRoleStatus(ctx context.Context, obj *v1alpha1.MultiClusterRole, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRoleStatus indicates an expected call of PatchMultiClusterRoleStatus.
func (mr *MockMultiClusterRoleClientMockRecorder) PatchMultiClusterRoleStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRoleStatus", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).PatchMultiClusterRoleStatus), varargs...)
}

// UpdateMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) UpdateMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRole indicates an expected call of UpdateMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) UpdateMultiClusterRole(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).UpdateMultiClusterRole), varargs...)
}

// UpdateMultiClusterRoleStatus mocks base method.
func (m *MockMultiClusterRoleClient) UpdateMultiClusterRoleStatus(ctx context.Context, obj *v1alpha1.MultiClusterRole, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRoleStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRoleStatus indicates an expected call of UpdateMultiClusterRoleStatus.
func (mr *MockMultiClusterRoleClientMockRecorder) UpdateMultiClusterRoleStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRoleStatus", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).UpdateMultiClusterRoleStatus), varargs...)
}

// UpsertMultiClusterRole mocks base method.
func (m *MockMultiClusterRoleClient) UpsertMultiClusterRole(ctx context.Context, obj *v1alpha1.MultiClusterRole, transitionFuncs ...v1alpha1.MultiClusterRoleTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMultiClusterRole", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMultiClusterRole indicates an expected call of UpsertMultiClusterRole.
func (mr *MockMultiClusterRoleClientMockRecorder) UpsertMultiClusterRole(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMultiClusterRole", reflect.TypeOf((*MockMultiClusterRoleClient)(nil).UpsertMultiClusterRole), varargs...)
}

// MockMulticlusterMultiClusterRoleClient is a mock of MulticlusterMultiClusterRoleClient interface.
type MockMulticlusterMultiClusterRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMultiClusterRoleClientMockRecorder
}

// MockMulticlusterMultiClusterRoleClientMockRecorder is the mock recorder for MockMulticlusterMultiClusterRoleClient.
type MockMulticlusterMultiClusterRoleClientMockRecorder struct {
	mock *MockMulticlusterMultiClusterRoleClient
}

// NewMockMulticlusterMultiClusterRoleClient creates a new mock instance.
func NewMockMulticlusterMultiClusterRoleClient(ctrl *gomock.Controller) *MockMulticlusterMultiClusterRoleClient {
	mock := &MockMulticlusterMultiClusterRoleClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMultiClusterRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMultiClusterRoleClient) EXPECT() *MockMulticlusterMultiClusterRoleClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMultiClusterRoleClient) Cluster(cluster string) (v1alpha1.MultiClusterRoleClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.MultiClusterRoleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMultiClusterRoleClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMultiClusterRoleClient)(nil).Cluster), cluster)
}

// MockMultiClusterRoleBindingReader is a mock of MultiClusterRoleBindingReader interface.
type MockMultiClusterRoleBindingReader struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleBindingReaderMockRecorder
}

// MockMultiClusterRoleBindingReaderMockRecorder is the mock recorder for MockMultiClusterRoleBindingReader.
type MockMultiClusterRoleBindingReaderMockRecorder struct {
	mock *MockMultiClusterRoleBindingReader
}

// NewMockMultiClusterRoleBindingReader creates a new mock instance.
func NewMockMultiClusterRoleBindingReader(ctrl *gomock.Controller) *MockMultiClusterRoleBindingReader {
	mock := &MockMultiClusterRoleBindingReader{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleBindingReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleBindingReader) EXPECT() *MockMultiClusterRoleBindingReaderMockRecorder {
	return m.recorder
}

// GetMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingReader) GetMultiClusterRoleBinding(ctx context.Context, key client.ObjectKey) (*v1alpha1.MultiClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiClusterRoleBinding", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiClusterRoleBinding indicates an expected call of GetMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingReaderMockRecorder) GetMultiClusterRoleBinding(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingReader)(nil).GetMultiClusterRoleBinding), ctx, key)
}

// ListMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingReader) ListMultiClusterRoleBinding(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MultiClusterRoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultiClusterRoleBinding indicates an expected call of ListMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingReaderMockRecorder) ListMultiClusterRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingReader)(nil).ListMultiClusterRoleBinding), varargs...)
}

// MockMultiClusterRoleBindingWriter is a mock of MultiClusterRoleBindingWriter interface.
type MockMultiClusterRoleBindingWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleBindingWriterMockRecorder
}

// MockMultiClusterRoleBindingWriterMockRecorder is the mock recorder for MockMultiClusterRoleBindingWriter.
type MockMultiClusterRoleBindingWriterMockRecorder struct {
	mock *MockMultiClusterRoleBindingWriter
}

// NewMockMultiClusterRoleBindingWriter creates a new mock instance.
func NewMockMultiClusterRoleBindingWriter(ctrl *gomock.Controller) *MockMultiClusterRoleBindingWriter {
	mock := &MockMultiClusterRoleBindingWriter{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleBindingWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleBindingWriter) EXPECT() *MockMultiClusterRoleBindingWriterMockRecorder {
	return m.recorder
}

// CreateMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingWriter) CreateMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiClusterRoleBinding indicates an expected call of CreateMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingWriterMockRecorder) CreateMultiClusterRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingWriter)(nil).CreateMultiClusterRoleBinding), varargs...)
}

// DeleteAllOfMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingWriter) DeleteAllOfMultiClusterRoleBinding(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMultiClusterRoleBinding indicates an expected call of DeleteAllOfMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingWriterMockRecorder) DeleteAllOfMultiClusterRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingWriter)(nil).DeleteAllOfMultiClusterRoleBinding), varargs...)
}

// DeleteMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingWriter) DeleteMultiClusterRoleBinding(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiClusterRoleBinding indicates an expected call of DeleteMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingWriterMockRecorder) DeleteMultiClusterRoleBinding(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingWriter)(nil).DeleteMultiClusterRoleBinding), varargs...)
}

// PatchMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingWriter) PatchMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRoleBinding indicates an expected call of PatchMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingWriterMockRecorder) PatchMultiClusterRoleBinding(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingWriter)(nil).PatchMultiClusterRoleBinding), varargs...)
}

// UpdateMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingWriter) UpdateMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRoleBinding indicates an expected call of UpdateMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingWriterMockRecorder) UpdateMultiClusterRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingWriter)(nil).UpdateMultiClusterRoleBinding), varargs...)
}

// UpsertMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingWriter) UpsertMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, transitionFuncs ...v1alpha1.MultiClusterRoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMultiClusterRoleBinding indicates an expected call of UpsertMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingWriterMockRecorder) UpsertMultiClusterRoleBinding(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingWriter)(nil).UpsertMultiClusterRoleBinding), varargs...)
}

// MockMultiClusterRoleBindingStatusWriter is a mock of MultiClusterRoleBindingStatusWriter interface.
type MockMultiClusterRoleBindingStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleBindingStatusWriterMockRecorder
}

// MockMultiClusterRoleBindingStatusWriterMockRecorder is the mock recorder for MockMultiClusterRoleBindingStatusWriter.
type MockMultiClusterRoleBindingStatusWriterMockRecorder struct {
	mock *MockMultiClusterRoleBindingStatusWriter
}

// NewMockMultiClusterRoleBindingStatusWriter creates a new mock instance.
func NewMockMultiClusterRoleBindingStatusWriter(ctrl *gomock.Controller) *MockMultiClusterRoleBindingStatusWriter {
	mock := &MockMultiClusterRoleBindingStatusWriter{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleBindingStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleBindingStatusWriter) EXPECT() *MockMultiClusterRoleBindingStatusWriterMockRecorder {
	return m.recorder
}

// PatchMultiClusterRoleBindingStatus mocks base method.
func (m *MockMultiClusterRoleBindingStatusWriter) PatchMultiClusterRoleBindingStatus(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRoleBindingStatus indicates an expected call of PatchMultiClusterRoleBindingStatus.
func (mr *MockMultiClusterRoleBindingStatusWriterMockRecorder) PatchMultiClusterRoleBindingStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRoleBindingStatus", reflect.TypeOf((*MockMultiClusterRoleBindingStatusWriter)(nil).PatchMultiClusterRoleBindingStatus), varargs...)
}

// UpdateMultiClusterRoleBindingStatus mocks base method.
func (m *MockMultiClusterRoleBindingStatusWriter) UpdateMultiClusterRoleBindingStatus(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRoleBindingStatus indicates an expected call of UpdateMultiClusterRoleBindingStatus.
func (mr *MockMultiClusterRoleBindingStatusWriterMockRecorder) UpdateMultiClusterRoleBindingStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRoleBindingStatus", reflect.TypeOf((*MockMultiClusterRoleBindingStatusWriter)(nil).UpdateMultiClusterRoleBindingStatus), varargs...)
}

// MockMultiClusterRoleBindingClient is a mock of MultiClusterRoleBindingClient interface.
type MockMultiClusterRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockMultiClusterRoleBindingClientMockRecorder
}

// MockMultiClusterRoleBindingClientMockRecorder is the mock recorder for MockMultiClusterRoleBindingClient.
type MockMultiClusterRoleBindingClientMockRecorder struct {
	mock *MockMultiClusterRoleBindingClient
}

// NewMockMultiClusterRoleBindingClient creates a new mock instance.
func NewMockMultiClusterRoleBindingClient(ctrl *gomock.Controller) *MockMultiClusterRoleBindingClient {
	mock := &MockMultiClusterRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockMultiClusterRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiClusterRoleBindingClient) EXPECT() *MockMultiClusterRoleBindingClientMockRecorder {
	return m.recorder
}

// CreateMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) CreateMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiClusterRoleBinding indicates an expected call of CreateMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) CreateMultiClusterRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).CreateMultiClusterRoleBinding), varargs...)
}

// DeleteAllOfMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) DeleteAllOfMultiClusterRoleBinding(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfMultiClusterRoleBinding indicates an expected call of DeleteAllOfMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) DeleteAllOfMultiClusterRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).DeleteAllOfMultiClusterRoleBinding), varargs...)
}

// DeleteMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) DeleteMultiClusterRoleBinding(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiClusterRoleBinding indicates an expected call of DeleteMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) DeleteMultiClusterRoleBinding(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).DeleteMultiClusterRoleBinding), varargs...)
}

// GetMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) GetMultiClusterRoleBinding(ctx context.Context, key client.ObjectKey) (*v1alpha1.MultiClusterRoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiClusterRoleBinding", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiClusterRoleBinding indicates an expected call of GetMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) GetMultiClusterRoleBinding(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).GetMultiClusterRoleBinding), ctx, key)
}

// ListMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) ListMultiClusterRoleBinding(ctx context.Context, opts ...client.ListOption) (*v1alpha1.MultiClusterRoleBindingList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(*v1alpha1.MultiClusterRoleBindingList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultiClusterRoleBinding indicates an expected call of ListMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) ListMultiClusterRoleBinding(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).ListMultiClusterRoleBinding), varargs...)
}

// PatchMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) PatchMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRoleBinding indicates an expected call of PatchMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) PatchMultiClusterRoleBinding(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).PatchMultiClusterRoleBinding), varargs...)
}

// PatchMultiClusterRoleBindingStatus mocks base method.
func (m *MockMultiClusterRoleBindingClient) PatchMultiClusterRoleBindingStatus(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchMultiClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchMultiClusterRoleBindingStatus indicates an expected call of PatchMultiClusterRoleBindingStatus.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) PatchMultiClusterRoleBindingStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchMultiClusterRoleBindingStatus", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).PatchMultiClusterRoleBindingStatus), varargs...)
}

// UpdateMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) UpdateMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRoleBinding indicates an expected call of UpdateMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) UpdateMultiClusterRoleBinding(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).UpdateMultiClusterRoleBinding), varargs...)
}

// UpdateMultiClusterRoleBindingStatus mocks base method.
func (m *MockMultiClusterRoleBindingClient) UpdateMultiClusterRoleBindingStatus(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMultiClusterRoleBindingStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiClusterRoleBindingStatus indicates an expected call of UpdateMultiClusterRoleBindingStatus.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) UpdateMultiClusterRoleBindingStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiClusterRoleBindingStatus", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).UpdateMultiClusterRoleBindingStatus), varargs...)
}

// UpsertMultiClusterRoleBinding mocks base method.
func (m *MockMultiClusterRoleBindingClient) UpsertMultiClusterRoleBinding(ctx context.Context, obj *v1alpha1.MultiClusterRoleBinding, transitionFuncs ...v1alpha1.MultiClusterRoleBindingTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertMultiClusterRoleBinding", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMultiClusterRoleBinding indicates an expected call of UpsertMultiClusterRoleBinding.
func (mr *MockMultiClusterRoleBindingClientMockRecorder) UpsertMultiClusterRoleBinding(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMultiClusterRoleBinding", reflect.TypeOf((*MockMultiClusterRoleBindingClient)(nil).UpsertMultiClusterRoleBinding), varargs...)
}

// MockMulticlusterMultiClusterRoleBindingClient is a mock of MulticlusterMultiClusterRoleBindingClient interface.
type MockMulticlusterMultiClusterRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterMultiClusterRoleBindingClientMockRecorder
}

// MockMulticlusterMultiClusterRoleBindingClientMockRecorder is the mock recorder for MockMulticlusterMultiClusterRoleBindingClient.
type MockMulticlusterMultiClusterRoleBindingClientMockRecorder struct {
	mock *MockMulticlusterMultiClusterRoleBindingClient
}

// NewMockMulticlusterMultiClusterRoleBindingClient creates a new mock instance.
func NewMockMulticlusterMultiClusterRoleBindingClient(ctrl *gomock.Controller) *MockMulticlusterMultiClusterRoleBindingClient {
	mock := &MockMulticlusterMultiClusterRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterMultiClusterRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterMultiClusterRoleBindingClient) EXPECT() *MockMulticlusterMultiClusterRoleBindingClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterMultiClusterRoleBindingClient) Cluster(cluster string) (v1alpha1.MultiClusterRoleBindingClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.MultiClusterRoleBindingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterMultiClusterRoleBindingClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterMultiClusterRoleBindingClient)(nil).Cluster), cluster)
}
