// Code generated by skv2. DO NOT EDIT.

package single_cluster_resource_handler

import (
	"context"
	"sort"

	"github.com/ghodss/yaml"
	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/contextutils"
	skv2_v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	gateway_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	rpc_edge_v1 "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1"
	"github.com/solo-io/solo-projects/projects/apiserver/server/apiserverutils"
	"github.com/solo-io/solo-projects/projects/apiserver/server/services/glooinstance_handler"
	"go.uber.org/zap"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func NewSingleClusterGatewayResourceHandler(
	gatewayClientset gateway_solo_io_v1.Clientset,
	glooInstanceLister glooinstance_handler.SingleClusterGlooInstanceLister,
) rpc_edge_v1.GatewayResourceApiServer {
	return &singleClusterGatewayResourceHandler{
		gatewayClientset:   gatewayClientset,
		glooInstanceLister: glooInstanceLister,
	}
}

type singleClusterGatewayResourceHandler struct {
	gatewayClientset   gateway_solo_io_v1.Clientset
	glooInstanceLister glooinstance_handler.SingleClusterGlooInstanceLister
}

func (h *singleClusterGatewayResourceHandler) ListGateways(ctx context.Context, request *rpc_edge_v1.ListGatewaysRequest) (*rpc_edge_v1.ListGatewaysResponse, error) {
	var rpcGateways []*rpc_edge_v1.Gateway
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List gateways across all gloo edge instances
		instanceList, err := h.glooInstanceLister.ListGlooInstances(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList {
			rpcGatewayList, err := h.listGatewaysForGlooInstance(ctx, instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list gateways for gloo edge instance %v", instance)
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcGateways = append(rpcGateways, rpcGatewayList...)
		}
	} else {
		// List gateways for a specific gloo edge instance
		instance, err := h.glooInstanceLister.GetGlooInstance(ctx, request.GetGlooInstanceRef())
		if err != nil {
			wrapped := eris.Wrap(err, "Failed to get gloo edge instance")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcGateways, err = h.listGatewaysForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gateways for gloo edge instance %v", instance)
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	return &rpc_edge_v1.ListGatewaysResponse{
		Gateways: rpcGateways,
	}, nil
}

func (h *singleClusterGatewayResourceHandler) listGatewaysForGlooInstance(ctx context.Context, instance *rpc_edge_v1.GlooInstance) ([]*rpc_edge_v1.Gateway, error) {
	var gatewayList []*gateway_solo_io_v1.Gateway
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := h.gatewayClientset.Gateways().ListGateway(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				gatewayList = append(gatewayList, &list.Items[i])
			}
		}
	} else {
		list, err := h.gatewayClientset.Gateways().ListGateway(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			gatewayList = append(gatewayList, &list.Items[i])
		}
	}
	sort.Slice(gatewayList, func(i, j int) bool {
		x := gatewayList[i]
		y := gatewayList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcGateways []*rpc_edge_v1.Gateway
	glooInstanceRef := &skv2_v1.ObjectRef{
		Name:      instance.GetMetadata().GetName(),
		Namespace: instance.GetMetadata().GetNamespace(),
	}
	for _, gateway := range gatewayList {
		rpcGateways = append(rpcGateways, &rpc_edge_v1.Gateway{
			Metadata:     apiserverutils.ToMetadata(gateway.ObjectMeta),
			GlooInstance: glooInstanceRef,
			Spec:         &gateway.Spec,
			Status:       &gateway.Status,
		})
	}
	return rpcGateways, nil
}

func (h *singleClusterGatewayResourceHandler) GetGatewayYaml(ctx context.Context, request *rpc_edge_v1.GetGatewayYamlRequest) (*rpc_edge_v1.GetGatewayYamlResponse, error) {
	gateway, err := h.gatewayClientset.Gateways().GetGateway(ctx, client.ObjectKey{
		Namespace: request.GetGatewayRef().GetNamespace(),
		Name:      request.GetGatewayRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get gateway")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(gateway)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetGatewayYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (h *singleClusterGatewayResourceHandler) ListMatchableHttpGateways(ctx context.Context, request *rpc_edge_v1.ListMatchableHttpGatewaysRequest) (*rpc_edge_v1.ListMatchableHttpGatewaysResponse, error) {
	var rpcMatchableHttpGateways []*rpc_edge_v1.MatchableHttpGateway
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List matchableHttpGateways across all gloo edge instances
		instanceList, err := h.glooInstanceLister.ListGlooInstances(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList {
			rpcMatchableHttpGatewayList, err := h.listMatchableHttpGatewaysForGlooInstance(ctx, instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list matchableHttpGateways for gloo edge instance %v", instance)
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcMatchableHttpGateways = append(rpcMatchableHttpGateways, rpcMatchableHttpGatewayList...)
		}
	} else {
		// List matchableHttpGateways for a specific gloo edge instance
		instance, err := h.glooInstanceLister.GetGlooInstance(ctx, request.GetGlooInstanceRef())
		if err != nil {
			wrapped := eris.Wrap(err, "Failed to get gloo edge instance")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcMatchableHttpGateways, err = h.listMatchableHttpGatewaysForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list matchableHttpGateways for gloo edge instance %v", instance)
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	return &rpc_edge_v1.ListMatchableHttpGatewaysResponse{
		MatchableHttpGateways: rpcMatchableHttpGateways,
	}, nil
}

func (h *singleClusterGatewayResourceHandler) listMatchableHttpGatewaysForGlooInstance(ctx context.Context, instance *rpc_edge_v1.GlooInstance) ([]*rpc_edge_v1.MatchableHttpGateway, error) {
	var matchableHttpGatewayList []*gateway_solo_io_v1.MatchableHttpGateway
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := h.gatewayClientset.MatchableHttpGateways().ListMatchableHttpGateway(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				matchableHttpGatewayList = append(matchableHttpGatewayList, &list.Items[i])
			}
		}
	} else {
		list, err := h.gatewayClientset.MatchableHttpGateways().ListMatchableHttpGateway(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			matchableHttpGatewayList = append(matchableHttpGatewayList, &list.Items[i])
		}
	}
	sort.Slice(matchableHttpGatewayList, func(i, j int) bool {
		x := matchableHttpGatewayList[i]
		y := matchableHttpGatewayList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcMatchableHttpGateways []*rpc_edge_v1.MatchableHttpGateway
	glooInstanceRef := &skv2_v1.ObjectRef{
		Name:      instance.GetMetadata().GetName(),
		Namespace: instance.GetMetadata().GetNamespace(),
	}
	for _, matchableHttpGateway := range matchableHttpGatewayList {
		rpcMatchableHttpGateways = append(rpcMatchableHttpGateways, &rpc_edge_v1.MatchableHttpGateway{
			Metadata:     apiserverutils.ToMetadata(matchableHttpGateway.ObjectMeta),
			GlooInstance: glooInstanceRef,
			Spec:         &matchableHttpGateway.Spec,
			Status:       &matchableHttpGateway.Status,
		})
	}
	return rpcMatchableHttpGateways, nil
}

func (h *singleClusterGatewayResourceHandler) GetMatchableHttpGatewayYaml(ctx context.Context, request *rpc_edge_v1.GetMatchableHttpGatewayYamlRequest) (*rpc_edge_v1.GetMatchableHttpGatewayYamlResponse, error) {
	matchableHttpGateway, err := h.gatewayClientset.MatchableHttpGateways().GetMatchableHttpGateway(ctx, client.ObjectKey{
		Namespace: request.GetMatchableHttpGatewayRef().GetNamespace(),
		Name:      request.GetMatchableHttpGatewayRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get matchableHttpGateway")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(matchableHttpGateway)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetMatchableHttpGatewayYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (h *singleClusterGatewayResourceHandler) ListVirtualServices(ctx context.Context, request *rpc_edge_v1.ListVirtualServicesRequest) (*rpc_edge_v1.ListVirtualServicesResponse, error) {
	var rpcVirtualServices []*rpc_edge_v1.VirtualService
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List virtualServices across all gloo edge instances
		instanceList, err := h.glooInstanceLister.ListGlooInstances(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList {
			rpcVirtualServiceList, err := h.listVirtualServicesForGlooInstance(ctx, instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list virtualServices for gloo edge instance %v", instance)
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcVirtualServices = append(rpcVirtualServices, rpcVirtualServiceList...)
		}
	} else {
		// List virtualServices for a specific gloo edge instance
		instance, err := h.glooInstanceLister.GetGlooInstance(ctx, request.GetGlooInstanceRef())
		if err != nil {
			wrapped := eris.Wrap(err, "Failed to get gloo edge instance")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcVirtualServices, err = h.listVirtualServicesForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list virtualServices for gloo edge instance %v", instance)
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	return &rpc_edge_v1.ListVirtualServicesResponse{
		VirtualServices: rpcVirtualServices,
	}, nil
}

func (h *singleClusterGatewayResourceHandler) listVirtualServicesForGlooInstance(ctx context.Context, instance *rpc_edge_v1.GlooInstance) ([]*rpc_edge_v1.VirtualService, error) {
	var virtualServiceList []*gateway_solo_io_v1.VirtualService
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := h.gatewayClientset.VirtualServices().ListVirtualService(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				virtualServiceList = append(virtualServiceList, &list.Items[i])
			}
		}
	} else {
		list, err := h.gatewayClientset.VirtualServices().ListVirtualService(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			virtualServiceList = append(virtualServiceList, &list.Items[i])
		}
	}
	sort.Slice(virtualServiceList, func(i, j int) bool {
		x := virtualServiceList[i]
		y := virtualServiceList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcVirtualServices []*rpc_edge_v1.VirtualService
	glooInstanceRef := &skv2_v1.ObjectRef{
		Name:      instance.GetMetadata().GetName(),
		Namespace: instance.GetMetadata().GetNamespace(),
	}
	for _, virtualService := range virtualServiceList {
		rpcVirtualServices = append(rpcVirtualServices, &rpc_edge_v1.VirtualService{
			Metadata:     apiserverutils.ToMetadata(virtualService.ObjectMeta),
			GlooInstance: glooInstanceRef,
			Spec:         &virtualService.Spec,
			Status:       &virtualService.Status,
		})
	}
	return rpcVirtualServices, nil
}

func (h *singleClusterGatewayResourceHandler) GetVirtualServiceYaml(ctx context.Context, request *rpc_edge_v1.GetVirtualServiceYamlRequest) (*rpc_edge_v1.GetVirtualServiceYamlResponse, error) {
	virtualService, err := h.gatewayClientset.VirtualServices().GetVirtualService(ctx, client.ObjectKey{
		Namespace: request.GetVirtualServiceRef().GetNamespace(),
		Name:      request.GetVirtualServiceRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get virtualService")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(virtualService)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetVirtualServiceYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (h *singleClusterGatewayResourceHandler) ListRouteTables(ctx context.Context, request *rpc_edge_v1.ListRouteTablesRequest) (*rpc_edge_v1.ListRouteTablesResponse, error) {
	var rpcRouteTables []*rpc_edge_v1.RouteTable
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List routeTables across all gloo edge instances
		instanceList, err := h.glooInstanceLister.ListGlooInstances(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList {
			rpcRouteTableList, err := h.listRouteTablesForGlooInstance(ctx, instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list routeTables for gloo edge instance %v", instance)
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcRouteTables = append(rpcRouteTables, rpcRouteTableList...)
		}
	} else {
		// List routeTables for a specific gloo edge instance
		instance, err := h.glooInstanceLister.GetGlooInstance(ctx, request.GetGlooInstanceRef())
		if err != nil {
			wrapped := eris.Wrap(err, "Failed to get gloo edge instance")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcRouteTables, err = h.listRouteTablesForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list routeTables for gloo edge instance %v", instance)
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	return &rpc_edge_v1.ListRouteTablesResponse{
		RouteTables: rpcRouteTables,
	}, nil
}

func (h *singleClusterGatewayResourceHandler) listRouteTablesForGlooInstance(ctx context.Context, instance *rpc_edge_v1.GlooInstance) ([]*rpc_edge_v1.RouteTable, error) {
	var routeTableList []*gateway_solo_io_v1.RouteTable
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := h.gatewayClientset.RouteTables().ListRouteTable(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				routeTableList = append(routeTableList, &list.Items[i])
			}
		}
	} else {
		list, err := h.gatewayClientset.RouteTables().ListRouteTable(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			routeTableList = append(routeTableList, &list.Items[i])
		}
	}
	sort.Slice(routeTableList, func(i, j int) bool {
		x := routeTableList[i]
		y := routeTableList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcRouteTables []*rpc_edge_v1.RouteTable
	glooInstanceRef := &skv2_v1.ObjectRef{
		Name:      instance.GetMetadata().GetName(),
		Namespace: instance.GetMetadata().GetNamespace(),
	}
	for _, routeTable := range routeTableList {
		rpcRouteTables = append(rpcRouteTables, &rpc_edge_v1.RouteTable{
			Metadata:     apiserverutils.ToMetadata(routeTable.ObjectMeta),
			GlooInstance: glooInstanceRef,
			Spec:         &routeTable.Spec,
			Status:       &routeTable.Status,
		})
	}
	return rpcRouteTables, nil
}

func (h *singleClusterGatewayResourceHandler) GetRouteTableYaml(ctx context.Context, request *rpc_edge_v1.GetRouteTableYamlRequest) (*rpc_edge_v1.GetRouteTableYamlResponse, error) {
	routeTable, err := h.gatewayClientset.RouteTables().GetRouteTable(ctx, client.ObjectKey{
		Namespace: request.GetRouteTableRef().GetNamespace(),
		Name:      request.GetRouteTableRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get routeTable")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(routeTable)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetRouteTableYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}
