// Code generated by MockGen. DO NOT EDIT.
// Source: ./getter.go

// Package mock_config_getter is a generated GoMock package.
package mock_config_getter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1"
	discovery "k8s.io/client-go/discovery"
)

// MockEnvoyConfigDumpGetter is a mock of EnvoyConfigDumpGetter interface.
type MockEnvoyConfigDumpGetter struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyConfigDumpGetterMockRecorder
}

// MockEnvoyConfigDumpGetterMockRecorder is the mock recorder for MockEnvoyConfigDumpGetter.
type MockEnvoyConfigDumpGetterMockRecorder struct {
	mock *MockEnvoyConfigDumpGetter
}

// NewMockEnvoyConfigDumpGetter creates a new mock instance.
func NewMockEnvoyConfigDumpGetter(ctrl *gomock.Controller) *MockEnvoyConfigDumpGetter {
	mock := &MockEnvoyConfigDumpGetter{ctrl: ctrl}
	mock.recorder = &MockEnvoyConfigDumpGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyConfigDumpGetter) EXPECT() *MockEnvoyConfigDumpGetterMockRecorder {
	return m.recorder
}

// GetConfigs mocks base method.
func (m *MockEnvoyConfigDumpGetter) GetConfigs(ctx context.Context, glooInstance *v1.GlooInstance, discoveryClient discovery.DiscoveryClient) ([]*v1.ConfigDump, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigs", ctx, glooInstance, discoveryClient)
	ret0, _ := ret[0].([]*v1.ConfigDump)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigs indicates an expected call of GetConfigs.
func (mr *MockEnvoyConfigDumpGetterMockRecorder) GetConfigs(ctx, glooInstance, discoveryClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigs", reflect.TypeOf((*MockEnvoyConfigDumpGetter)(nil).GetConfigs), ctx, glooInstance, discoveryClient)
}
