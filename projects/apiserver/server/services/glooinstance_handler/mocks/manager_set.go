// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/skv2/pkg/multicluster (interfaces: ManagerSet)

// Package mock_glooinstance_handler is a generated GoMock package.
package mock_glooinstance_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"
)

// MockManagerSet is a mock of ManagerSet interface.
type MockManagerSet struct {
	ctrl     *gomock.Controller
	recorder *MockManagerSetMockRecorder
}

// MockManagerSetMockRecorder is the mock recorder for MockManagerSet.
type MockManagerSetMockRecorder struct {
	mock *MockManagerSet
}

// NewMockManagerSet creates a new mock instance.
func NewMockManagerSet(ctrl *gomock.Controller) *MockManagerSet {
	mock := &MockManagerSet{ctrl: ctrl}
	mock.recorder = &MockManagerSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerSet) EXPECT() *MockManagerSetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockManagerSet) Cluster(arg0 string) (manager.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", arg0)
	ret0, _ := ret[0].(manager.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockManagerSetMockRecorder) Cluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockManagerSet)(nil).Cluster), arg0)
}

// ListClusters mocks base method.
func (m *MockManagerSet) ListClusters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockManagerSetMockRecorder) ListClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockManagerSet)(nil).ListClusters))
}
