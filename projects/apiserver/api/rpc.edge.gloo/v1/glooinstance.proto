syntax = "proto3";
package rpc.edge.gloo.solo.io;

option (extproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

option go_package = "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1";

import "github.com/solo-io/solo-projects/projects/apiserver/api/rpc.edge.gloo/v1/common.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";

message GlooInstance {
    .rpc.edge.gloo.solo.io.ObjectMeta metadata = 1;
    GlooInstanceSpec spec = 2;
    GlooInstanceStatus status = 3;

    // The following is a copy of the spec from `projects/gloo-fed/api/fed/v1/instance.proto`.
    // We have a copy here so we can use it without having a direct dependency on the Gloo Fed APIs
    // (since this is also used by the Single Cluster Gloo apiserver)
    message GlooInstanceSpec {

        // The cluster on which this Gloo instance is located
        string cluster = 1;
    
        bool is_enterprise = 2;
    
        ControlPlane control_plane = 3;
    
        message ControlPlane {
            // The version
            string version = 1;
            // Namespace in which the control-plane (Gloo) is located
            string namespace = 2;
            // An optional list of watched namespaces for Gloo resources.
            // By default, if this list is empty, we look in all namespaces.
            repeated string watched_namespaces = 3;
        }
    
        repeated Proxy proxies = 4;
    
        message Proxy {
            // The number of requested proxy replicas.
            int32 replicas = 1;
            // The number of available proxy replicas.
            int32 available_replicas = 2;
            // The number of ready proxy replicas.
            int32 ready_replicas = 3;
            // Whether or not this proxy supports wasm plugins
            bool wasm_enabled = 4;
            // Whether or not this proxy allows its config dumps to be read
            bool read_config_multicluster_enabled = 11;
            // The version
            string version = 5;
            // Name of the proxy instance, this is important to distinguish it from other proxy instances,
            // which may be in the same namespace.
            string name = 6;
            // Namespace in which the proxy is located
            string namespace = 7;
            // Workload controller type indicates the type of workload controller managing the Proxy's pods (i.e. Deployment, DaemonSet)
            WorkloadController workload_controller_type = 10;
            // Zones in which the replicas of a given proxy deployment are running.
            // Kubernetes supports multi zone deployments, so 1 proxy may potentially live in multiple zones
            repeated string zones = 8;
    
            repeated IngressEndpoint ingress_endpoints = 9;
    
            message IngressEndpoint {
    
                string address = 1;
    
                repeated Port ports = 2;
    
                message Port {
    
                    uint32 port = 1;
    
                    string name = 2;
                }
    
                // Kubernetes service name, will be populated only if applicable
                string service_name = 3;
    
            }
    
            enum WorkloadController {
                UNDEFINED = 0;
                DEPLOYMENT = 1;
                DAEMON_SET = 2;
            }
        }
    
        // Geographical region in which this gloo instance is located.
        // Each proxy may potentially live in 1 or more zones, so zonal information is stored on the proxy
        string region = 5;
    
        Check check = 6;
    
        // Check describes the status of the objects powering the GlooInstance.
        message Check {
            // Gateways describes the Gateways configuring the GlooInstance.
            Summary gateways = 1;
    
            // VirtualServices describes the VirtualServices configuring the GlooInstance.
            Summary virtual_services = 2;
    
            // Route Tables describes the RouteTables available the GlooInstance.
            Summary route_tables = 3;
    
            // Auth Configs describes the AuthConfigs available to the GlooInstance.
            Summary auth_configs = 4;
    
            // Settings describes the Settings configuring the GlooInstance.
            Summary settings = 5;
    
            // Upstreams describes the Upstreams available to the GlooInstance.
            Summary upstreams = 6;
    
            // UpstreamGroups describes the UpstreamGroups available to the GlooInstance.
            Summary upstream_groups = 7;
    
            // Proxies describes the Proxies configuring the GlooInstance.
            Summary proxies = 8;

            // RateLimitConfigs describes the RateLimitConfigs available to the GlooInstance.
            Summary rate_limit_configs = 9;

            // MatchableHttpGateways describes the MatchableHttpGateways available to the GlooInstance.
            Summary matchable_http_gateways = 10;

            // MatchableTcpGateways describes the MatchableTcpGateways available to the GlooInstance.
            Summary matchable_tcp_gateways = 11;

            // Deployments describes the Deployments in the GlooInstance's install namespace.
            Summary deployments = 20;
    
            // Pods describes the pods in the GlooInstance's install namespace.
            Summary pods = 22;
    
            // Summary provides aggregate information for a given resource type.
            message Summary {
                // The total number of resources in any state.
                int32 total = 1;
    
                // Errors is a list of resource refs and their associated error messages.
                repeated ResourceReport errors = 2;
    
                // Warnings is a list of resource refs and their associated warning messages.
                repeated ResourceReport warnings = 3;
    
                // A ResourceReport references an object and provides a status message.
                message ResourceReport {
                    .core.skv2.solo.io.ObjectRef ref = 1;
                    string message = 2;
                }
            }
        }
    }
    
    message GlooInstanceStatus {}
}

message ListGlooInstancesRequest {}

message ListGlooInstancesResponse {
    repeated GlooInstance gloo_instances = 1;
}

message ClusterDetails {
    string cluster = 1;
    repeated GlooInstance gloo_instances = 2;
}

message ListClusterDetailsRequest {}

message ListClusterDetailsResponse {
    repeated ClusterDetails cluster_details = 1;
}

message ConfigDump {
    string name = 1;
    string raw = 2;
    string error = 3;
}

message GetConfigDumpsRequest {
    // A reference to the gloo instance to get the config dumps for. This field is required.
    .core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
}

message GetConfigDumpsResponse {
    repeated ConfigDump config_dumps = 1;
}

message GetUpstreamHostsRequest {
    // A reference to the gloo instance to get the upstream hosts mapping for. This field is required.
    .core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
}

message GetUpstreamHostsResponse {
    // map of upstream key (<namespace>.<name>) to list of hosts for the upstream
    map<string, HostList> upstream_hosts = 1;
}

message HostList {
    repeated Host hosts = 1;
}

// Represents an upstream host
message Host {
    // IP or hostname
    string address = 1;
    // Listening port
    uint32 port = 2;
    // Load balancing weight
    uint32 weight = 3;

    // A reference to the proxy that this host is associated with
    .core.skv2.solo.io.ObjectRef proxy_ref = 4;
}

service GlooInstanceApi {
    rpc ListGlooInstances (ListGlooInstancesRequest) returns (ListGlooInstancesResponse) {}
    rpc ListClusterDetails (ListClusterDetailsRequest) returns (ListClusterDetailsResponse) {}
    rpc GetConfigDumps (GetConfigDumpsRequest) returns (GetConfigDumpsResponse) {}
    rpc GetUpstreamHosts (GetUpstreamHostsRequest) returns (GetUpstreamHostsResponse) {}
}