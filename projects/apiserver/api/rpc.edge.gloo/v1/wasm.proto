syntax = "proto3";
package rpc.edge.gloo.solo.io;

option (extproto.equal_all) = true;
import "extproto/ext.proto";
option (extproto.hash_all) = true;

option go_package = "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1";

import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/core/matchers/matchers.proto";
import "github.com/solo-io/solo-apis/api/gloo/gloo/v1/options/wasm/wasm.proto";
import "github.com/solo-io/solo-apis/api/gloo/gateway/v1/gateway.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";

message WasmFilter {
    // name of the Wasm filter
    string name = 1;

    // root ID of the Wasm filter
    string root_id = 2;

    // the Wasm filter source.
    // May refer to either a local path source, http uri source, or Wasm image tag
    string source = 3;

    // JSON representation of the Wasm filter config
    string config = 4;

    repeated Location locations = 5;

    message Location {
        // references to the gateway that contains this Wasm Filter
        .core.skv2.solo.io.ClusterObjectRef gateway_ref = 1;
        // status of the gateway that contains this Wasm Filter
        .gateway.solo.io.GatewayStatus gateway_status = 2;
        // reference to the gloo instance that contains this Wasm Filter
        .core.skv2.solo.io.ObjectRef gloo_instance_ref = 3;
    }
}

message ListWasmFiltersRequest {}

message ListWasmFiltersResponse {
    repeated WasmFilter wasm_filters = 1;
}

message DescribeWasmFilterRequest {
    // name of the Wasm filter
    string name = 1;
    // the Root ID of the Wasm filter
    string root_id = 2;
    // reference to the Gateway that should contain this WasmFilter
    .core.skv2.solo.io.ObjectRef gateway_ref = 3;
}

message DescribeWasmFilterResponse {
    WasmFilter wasm_filter = 1;
}

service WasmFilterApi {
    rpc ListWasmFilters (ListWasmFiltersRequest) returns (ListWasmFiltersResponse) {}
    rpc DescribeWasmFilter (DescribeWasmFilterRequest) returns (DescribeWasmFilterResponse) {}
}