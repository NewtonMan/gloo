syntax = "proto3";

package rpc.edge.gloo.solo.io;

option go_package = "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/solo-apis/api/gloo/graphql.gloo/v1alpha1/graphql.proto";
import "github.com/solo-io/solo-projects/projects/apiserver/api/rpc.edge.gloo/v1/common.proto";

// GraphQLApi CR details.
message GraphqlApi {
    .rpc.edge.gloo.solo.io.ObjectMeta metadata = 1;
    .graphql.gloo.solo.io.GraphQLApiSpec spec = 2;
    .graphql.gloo.solo.io.GraphQLApiStatus status = 3;
    .core.skv2.solo.io.ObjectRef gloo_instance = 4;
}

// Summary fields of a GraphQLApi to be shown on list/table views.
message GraphqlApiSummary {
    message ExecutableSchemaSummary {
        uint32 num_resolvers = 1;
    }
    message StitchedSchemaSummary {
        uint32 num_subschemas = 1;
    }

    .rpc.edge.gloo.solo.io.ObjectMeta metadata = 1;
    .graphql.gloo.solo.io.GraphQLApiStatus status = 2;
    .core.skv2.solo.io.ObjectRef gloo_instance = 3;
    oneof api_type_summary {
        ExecutableSchemaSummary executable = 4;
        StitchedSchemaSummary stitched = 5;
    }
}

// Gets a GraphQLApi CR by reference.
message GetGraphqlApiRequest {
    // A reference to the GraphQLApi. If this is a single-cluster (non-federated) Gloo Edge installation,
    // cluster name is not used.
    .core.skv2.solo.io.ClusterObjectRef graphql_api_ref = 1;
}

message GetGraphqlApiResponse {
    GraphqlApi graphql_api = 1;
}

// Gets a list of GraphQLApi CRs.
message ListGraphqlApisRequest {
    // (Optional) A reference to a Gloo Edge instance. If provided, only GraphQLApis on this Gloo Edge instance will be
    // returned. Otherwise, all GraphQLApis across all Gloo Edge instances will be returned.
    .core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
}

message ListGraphqlApisResponse {
    repeated GraphqlApiSummary graphql_apis = 1;
}

// Gets the yaml for a GraphQLApi CR.
message GetGraphqlApiYamlRequest {
    // A reference to the GraphQLApi. If this is a single-cluster (non-federated) Gloo Edge installation,
    // cluster name is not used.
    .core.skv2.solo.io.ClusterObjectRef graphql_api_ref = 1;
}

message GetGraphqlApiYamlResponse {
    .rpc.edge.gloo.solo.io.ResourceYaml yaml_data = 1;
}

// Creates a new GraphQLApi.
message CreateGraphqlApiRequest {
    // A reference to the GraphQLApi to create. If this is a single-cluster (non-federated) Gloo Edge installation,
    // cluster name is not used.
    .core.skv2.solo.io.ClusterObjectRef graphql_api_ref = 1;

    // The spec for the new GraphQLApi.
    .graphql.gloo.solo.io.GraphQLApiSpec spec = 2;
}

message CreateGraphqlApiResponse {
    // The updated GraphQLApi.
    GraphqlApi graphql_api = 1;
}

// Updates an existing GraphQLApi.
message UpdateGraphqlApiRequest {
    // A reference to an existing GraphQLApi to update. If this is a single-cluster (non-federated) Gloo Edge installation,
    // cluster name is not used.
    .core.skv2.solo.io.ClusterObjectRef graphql_api_ref = 1;

    // The updated GraphQLApi spec.
    .graphql.gloo.solo.io.GraphQLApiSpec spec = 2;
}

message UpdateGraphqlApiResponse {
    // The updated GraphQLApi.
    GraphqlApi graphql_api = 1;
}

// Deletes a GraphQLApi by reference.
message DeleteGraphqlApiRequest {
    // A reference to the GraphQLApi to delete. If this is a single-cluster (non-federated) Gloo Edge installation,
    // cluster name is not used.
    .core.skv2.solo.io.ClusterObjectRef graphql_api_ref = 1;
}

message DeleteGraphqlApiResponse {
    // Reference to the deleted GraphQLApi.
    .core.skv2.solo.io.ClusterObjectRef graphql_api_ref = 1;
}

// Validates the given resolver yaml.
message ValidateResolverYamlRequest {

    enum ResolverType {
        RESOLVER_NOT_SET = 0;
        REST_RESOLVER = 1;
        GRPC_RESOLVER = 2;
    }

    // The resolver yaml to validate.
    string yaml = 1;

    // The type of resolver.
    ResolverType resolver_type = 2;
}

// This empty response is returned if validation succeeded. Otherwise, an error is returned.
message ValidateResolverYamlResponse {
}

// Validates a schema definition.
//
// The input to the request can be either a schema definition string or a GraphQLApi spec:
// - When creating a new GraphQLApi from scratch, the schema definition string should be passed in.
// - When editing an existing GraphQLApi, the full GraphQLApi spec should be passed in.
//
// This endpoint will currently validate the following:
// 1. The schema definition string can be parsed.
// 2. All usages of supported directives are syntactically correct.
// 3. Resolver names referenced via `@resolve` directives in the schema definition have a corresponding
//    entry in the GraphQLApi's resolutions map.
message ValidateSchemaDefinitionRequest {
    oneof input {
        // A schema definition string.
        string schema_definition = 1;

        // A GraphQLApi spec.
        .graphql.gloo.solo.io.GraphQLApiSpec spec = 2;
    }
}

// This empty response is returned if validation succeeded. Otherwise, an error is returned.
message ValidateSchemaDefinitionResponse {
}

message GetStitchedSchemaDefinitionRequest {
    // This is the ref to the stitched schema we want the definition of
    .core.skv2.solo.io.ClusterObjectRef stitched_schema_api_ref = 1;
}

// Returns the stitched schema SDL as a string if processing stitched schema config succeeded,
// else an error is returned and stitched_schema_sdl is empty.
message GetStitchedSchemaDefinitionResponse {
    string stitched_schema_sdl = 1;
}

service GraphqlConfigApi {
    rpc GetGraphqlApi (GetGraphqlApiRequest) returns (GetGraphqlApiResponse) {}
    rpc ListGraphqlApis (ListGraphqlApisRequest) returns (ListGraphqlApisResponse) {}
    rpc GetGraphqlApiYaml (GetGraphqlApiYamlRequest) returns (GetGraphqlApiYamlResponse) {}
    rpc CreateGraphqlApi (CreateGraphqlApiRequest) returns (CreateGraphqlApiResponse) {}
    rpc UpdateGraphqlApi (UpdateGraphqlApiRequest) returns (UpdateGraphqlApiResponse) {}
    rpc DeleteGraphqlApi (DeleteGraphqlApiRequest) returns (DeleteGraphqlApiResponse) {}
    rpc ValidateResolverYaml (ValidateResolverYamlRequest) returns (ValidateResolverYamlResponse) {}
    rpc ValidateSchemaDefinition (ValidateSchemaDefinitionRequest) returns (ValidateSchemaDefinitionResponse) {}

    rpc GetStitchedSchemaDefinition (GetStitchedSchemaDefinitionRequest) returns (GetStitchedSchemaDefinitionResponse) {}
}
