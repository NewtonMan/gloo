type SecretQuery {
  list(selector: InputMapStringString): [Secret]
  get(name: String!): Secret
}

type SecretMutation {
  create(secret: InputSecret!): Secret
  update(secret: InputSecret!): Secret
  delete(name: String!): Secret
}

type Secret {
  kind: SecretKind!
  metadata: Metadata!
}

union SecretKind = AwsSecret | AzureSecret | TlsSecret

type AwsSecret {
  accessKey: String!
  secretKey: String!
}

type AzureSecret {
  apiKeys: MapStringString
}

type TlsSecret {
  certChain: String!
  privateKey: String!
  rootCa: String! # note: it is okay to leave this as an empty string
}

input InputSecret {
  kind: InputSecretKind!
  metadata: InputMetadata!
}

input InputSecretKind {
  # oneof: aws, azure, tls
  aws: InputAwsSecret
  azure: InputAzureSecret
  tls: InputTlsSecret
}

input InputAwsSecret {
  accessKey: String!
  secretKey: String!
}

input InputAzureSecret {
  apiKeys: InputMapStringString!
}

input InputTlsSecret {
  certChain: String!
  privateKey: String!
  rootCa: String! # note: it is okay to leave this as an empty string
}
