# Top Level
schema {
    query: Query
    mutation: Mutation
}

type Query {
    version: String!
    getOAuthEndpoint: OAuthEndpoint!
    allNamespaces: [Namespace!]!
    namespace(name: String!): Namespace!
    settings: Settings
}

type Mutation {
    upstreams: UpstreamMutation!
    virtualServices: VirtualServiceMutation!
    resolverMaps: ResolverMapMutation!
    schemas: SchemaMutation!
    secrets: SecretMutation!
    artifacts: ArtifactMutation!
    settings: SettingsMutation!
}

type Subscription {
    upstreams(namespace: String!, selector: InputMapStringString): [Upstream]
    virtualServices(
        namespace: String!
        selector: InputMapStringString
    ): [VirtualService]
}

type Namespace {
    name: String!

    upstreams: [Upstream]!
    upstream(name: String!): Upstream

    virtualServices: [VirtualService]!
    virtualService(name: String!): VirtualService

    secrets: [Secret]!
    secret(name: String!): Secret

    artifacts: [Artifact]!
    artifact(name: String!): Artifact

    schemas: [Schema]!
    schema(name: String!): Schema

    resolverMaps: [ResolverMap]!
    resolverMap(name: String!): ResolverMap
}
