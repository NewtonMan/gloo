# Top Level
schema {
  query: Query
  mutation: Mutation
}

type Query {
  resource(guid: String!): Resource!
  version: String!
  upstreams(namespace: String!): UpstreamQuery!
  virtualServices(namespace: String!): VirtualServiceQuery!
  schemas(namespace: String!): SchemaQuery!
  secrets(namespace: String!): SecretQuery!
  settings: SettingsQuery!
  vcs: VcsQuery!
  versioned(branch: String!): VersionedQuery!
}

type Mutation {
  upstreams(namespace: String!): UpstreamMutation!
  virtualServices(namespace: String!): VirtualServiceMutation!
  resolverMaps(namespace: String!): ResolverMapMutation!
  schemas(namespace: String!): SchemaMutation!
  secrets(namespace: String!): SecretMutation!
  artifacts(namespace: String!): ArtifactMutation!
  settings: SettingsMutation!
  vcs: VcsMutation!
  versioned(branch: String!): VersionedMutation!
}

type Subscription {
  upstreams(namespace: String!, selector: InputMapStringString): [Upstream]
  virtualServices(
    namespace: String!
    selector: InputMapStringString
  ): [VirtualService]
}

union Resource =
    Upstream
  | VirtualService
  | ResolverMap
  | Schema
  | Secret
  | Artifact
  | Settings

# TODO: add other versioned resources
# Queries resources inside a changeset
type VersionedQuery {
  virtualServices(namespace: String!): VirtualServiceQuery!
}

# TODO: add other versioned resources
# Mutates resources inside a changeset
type VersionedMutation {
  virtualServices(namespace: String!): VirtualServiceMutation!
}
