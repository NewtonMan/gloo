// Code generated by skv2. DO NOT EDIT.

package gateway_resource_handler

import (
	"context"
	"sort"
	"strings"

	"github.com/ghodss/yaml"
	"github.com/rotisserie/eris"
	"go.uber.org/zap"

	"github.com/solo-io/go-utils/contextutils"
	skv2v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	gateway_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/gateway.solo.io/v1"
	rpc_edge_v1 "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1"
	"github.com/solo-io/solo-projects/projects/apiserver/server/apiserverutils"
	fedv1 "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.solo.io/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func NewFedGatewayResourceHandler(
	instanceClient fedv1.GlooInstanceClient,
	mcGatewayCRDClientset gateway_solo_io_v1.MulticlusterClientset,

) rpc_edge_v1.GatewayResourceApiServer {
	return &fedGatewayResourceHandler{
		instanceClient:        instanceClient,
		mcGatewayCRDClientset: mcGatewayCRDClientset,
	}
}

type fedGatewayResourceHandler struct {
	instanceClient        fedv1.GlooInstanceClient
	mcGatewayCRDClientset gateway_solo_io_v1.MulticlusterClientset
}

func (k *fedGatewayResourceHandler) ListGateways(ctx context.Context, request *rpc_edge_v1.ListGatewaysRequest) (*rpc_edge_v1.ListGatewaysResponse, error) {
	var rpcGateways []*rpc_edge_v1.Gateway
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List gateways across all gloo edge instances
		instanceList, err := k.instanceClient.ListGlooInstance(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList.Items {
			rpcGatewayList, err := k.listGatewaysForGlooInstance(ctx, &instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list gateways for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcGateways = append(rpcGateways, rpcGatewayList...)
		}
	} else {
		// List gateways for a specific gloo edge instance
		instance, err := k.instanceClient.GetGlooInstance(ctx, types.NamespacedName{
			Name:      request.GetGlooInstanceRef().GetName(),
			Namespace: request.GetGlooInstanceRef().GetNamespace(),
		})
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to get gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcGateways, err = k.listGatewaysForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gateways for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	// Search, Filter
	var filteredGateways []*rpc_edge_v1.Gateway
	qs := request.GetQueryString()
	sf := request.GetStatusFilter()
	if sf != nil || qs != "" {
		for _, d := range rpcGateways {
			if (sf == nil || sf.State == int32(d.Status.State)) && strings.Contains(d.Metadata.Name, qs) {
				filteredGateways = append(filteredGateways, d)
			}
		}
	} else {
		filteredGateways = rpcGateways
	}
	// Sort
	sortOptions := request.GetSortOptions()
	if sortOptions != nil {
		isDescending := sortOptions.GetDescending()
		sortKey := sortOptions.GetSortKey()
		if isDescending == true {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredGateways, func(i, j int) bool {
					a := filteredGateways[i]
					b := filteredGateways[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) > b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredGateways, func(i, j int) bool {
					a := filteredGateways[i]
					b := filteredGateways[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) > b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredGateways, func(i, j int) bool {
					a := filteredGateways[i]
					b := filteredGateways[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace > string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		} else {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredGateways, func(i, j int) bool {
					a := filteredGateways[i]
					b := filteredGateways[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) < b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredGateways, func(i, j int) bool {
					a := filteredGateways[i]
					b := filteredGateways[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) < b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredGateways, func(i, j int) bool {
					a := filteredGateways[i]
					b := filteredGateways[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace < string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		}
	}
	// Paginate
	paginatedGateways := filteredGateways
	pagination := request.GetPagination()
	totalCount := int32(len(filteredGateways))
	if pagination.GetLimit() > 0 && pagination.GetOffset() >= 0 {
		start := apiserverutils.Min(pagination.GetOffset(), totalCount)
		end := apiserverutils.Min(pagination.GetOffset()+pagination.GetLimit(), totalCount)
		paginatedGateways = filteredGateways[start:end]
	}
	// Build response
	res := &rpc_edge_v1.ListGatewaysResponse{
		Gateways: paginatedGateways,
		Total:    totalCount,
	}
	return res, nil
}

func (k *fedGatewayResourceHandler) listGatewaysForGlooInstance(ctx context.Context, instance *fedv1.GlooInstance) ([]*rpc_edge_v1.Gateway, error) {

	gatewayCRDClientset, err := k.mcGatewayCRDClientset.Cluster(instance.Spec.GetCluster())
	if err != nil {
		return nil, err
	}
	gatewayClient := gatewayCRDClientset.Gateways()

	var gatewayGatewayList []*gateway_solo_io_v1.Gateway
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := gatewayClient.ListGateway(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				gatewayGatewayList = append(gatewayGatewayList, &list.Items[i])
			}
		}
	} else {
		list, err := gatewayClient.ListGateway(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			gatewayGatewayList = append(gatewayGatewayList, &list.Items[i])
		}
	}
	sort.Slice(gatewayGatewayList, func(i, j int) bool {
		x := gatewayGatewayList[i]
		y := gatewayGatewayList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcGateways []*rpc_edge_v1.Gateway
	for _, gateway := range gatewayGatewayList {
		rpcGateways = append(rpcGateways, BuildRpcGateway(gateway, &skv2v1.ObjectRef{
			Name:      instance.GetName(),
			Namespace: instance.GetNamespace(),
		}, instance.Spec.GetCluster()))
	}
	return rpcGateways, nil
}

func BuildRpcGateway(gateway *gateway_solo_io_v1.Gateway, glooInstance *skv2v1.ObjectRef, cluster string) *rpc_edge_v1.Gateway {
	m := &rpc_edge_v1.Gateway{
		Metadata:     apiserverutils.ToMetadata(gateway.ObjectMeta),
		GlooInstance: glooInstance,
		Spec:         &gateway.Spec,
		Status:       &gateway.Status,
	}
	m.Metadata.ClusterName = cluster
	return m
}

func (k *fedGatewayResourceHandler) GetGatewayYaml(ctx context.Context, request *rpc_edge_v1.GetGatewayYamlRequest) (*rpc_edge_v1.GetGatewayYamlResponse, error) {
	gatewayClientSet, err := k.mcGatewayCRDClientset.Cluster(request.GetGatewayRef().GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get gateway client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	gateway, err := gatewayClientSet.Gateways().GetGateway(ctx, client.ObjectKey{
		Namespace: request.GetGatewayRef().GetNamespace(),
		Name:      request.GetGatewayRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get gateway")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(gateway)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetGatewayYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (k *fedGatewayResourceHandler) GetGatewayDetails(ctx context.Context, request *rpc_edge_v1.GetGatewayDetailsRequest) (*rpc_edge_v1.GetGatewayDetailsResponse, error) {
	GatewayRef := request.GetGatewayRef()
	if GatewayRef == nil {
		return nil, eris.Errorf("Gateway ref missing from request: %v", request)
	}
	clientset, err := k.mcGatewayCRDClientset.Cluster(GatewayRef.GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get Gateway client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	Gateway, err := clientset.Gateways().GetGateway(ctx, client.ObjectKey{
		Namespace: GatewayRef.GetNamespace(),
		Name:      GatewayRef.GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get Gateway")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	// find which gloo instance this Gateway belongs to, by finding a gloo instance that is watching
	// the Gateway's namespace
	instanceList, err := k.instanceClient.ListGlooInstance(ctx)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	var glooInstance *fedv1.GlooInstance
	for _, instance := range instanceList.Items {
		watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
		if len(watchedNamespaces) == 0 {
			glooInstance = &instance
			break
		}
		for _, ns := range watchedNamespaces {
			if ns == GatewayRef.GetNamespace() {
				glooInstance = &instance
				break
			}
		}
		if glooInstance != nil {
			break
		}
	}
	if glooInstance == nil {
		return nil, eris.Errorf("Failed to find a gloo edge instance for namespace %s", Gateway.GetNamespace())
	}
	rpcGateway := &rpc_edge_v1.Gateway{
		Metadata: apiserverutils.ToMetadata(Gateway.ObjectMeta),
		GlooInstance: &skv2v1.ObjectRef{
			Name:      glooInstance.GetName(),
			Namespace: glooInstance.GetNamespace(),
		},
		Spec:   &Gateway.Spec,
		Status: &Gateway.Status,
	}
	rpcGateway.Metadata.ClusterName = glooInstance.Spec.GetCluster()
	return &rpc_edge_v1.GetGatewayDetailsResponse{
		Gateway: rpcGateway,
	}, nil
}

func (k *fedGatewayResourceHandler) ListMatchableHttpGateways(ctx context.Context, request *rpc_edge_v1.ListMatchableHttpGatewaysRequest) (*rpc_edge_v1.ListMatchableHttpGatewaysResponse, error) {
	var rpcMatchableHttpGateways []*rpc_edge_v1.MatchableHttpGateway
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List matchableHttpGateways across all gloo edge instances
		instanceList, err := k.instanceClient.ListGlooInstance(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList.Items {
			rpcMatchableHttpGatewayList, err := k.listMatchableHttpGatewaysForGlooInstance(ctx, &instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list matchableHttpGateways for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcMatchableHttpGateways = append(rpcMatchableHttpGateways, rpcMatchableHttpGatewayList...)
		}
	} else {
		// List matchableHttpGateways for a specific gloo edge instance
		instance, err := k.instanceClient.GetGlooInstance(ctx, types.NamespacedName{
			Name:      request.GetGlooInstanceRef().GetName(),
			Namespace: request.GetGlooInstanceRef().GetNamespace(),
		})
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to get gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcMatchableHttpGateways, err = k.listMatchableHttpGatewaysForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list matchableHttpGateways for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	// Search, Filter
	var filteredMatchableHttpGateways []*rpc_edge_v1.MatchableHttpGateway
	qs := request.GetQueryString()
	sf := request.GetStatusFilter()
	if sf != nil || qs != "" {
		for _, d := range rpcMatchableHttpGateways {
			if (sf == nil || sf.State == int32(d.Status.State)) && strings.Contains(d.Metadata.Name, qs) {
				filteredMatchableHttpGateways = append(filteredMatchableHttpGateways, d)
			}
		}
	} else {
		filteredMatchableHttpGateways = rpcMatchableHttpGateways
	}
	// Sort
	sortOptions := request.GetSortOptions()
	if sortOptions != nil {
		isDescending := sortOptions.GetDescending()
		sortKey := sortOptions.GetSortKey()
		if isDescending == true {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredMatchableHttpGateways, func(i, j int) bool {
					a := filteredMatchableHttpGateways[i]
					b := filteredMatchableHttpGateways[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) > b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredMatchableHttpGateways, func(i, j int) bool {
					a := filteredMatchableHttpGateways[i]
					b := filteredMatchableHttpGateways[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) > b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredMatchableHttpGateways, func(i, j int) bool {
					a := filteredMatchableHttpGateways[i]
					b := filteredMatchableHttpGateways[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace > string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		} else {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredMatchableHttpGateways, func(i, j int) bool {
					a := filteredMatchableHttpGateways[i]
					b := filteredMatchableHttpGateways[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) < b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredMatchableHttpGateways, func(i, j int) bool {
					a := filteredMatchableHttpGateways[i]
					b := filteredMatchableHttpGateways[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) < b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredMatchableHttpGateways, func(i, j int) bool {
					a := filteredMatchableHttpGateways[i]
					b := filteredMatchableHttpGateways[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace < string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		}
	}
	// Paginate
	paginatedMatchableHttpGateways := filteredMatchableHttpGateways
	pagination := request.GetPagination()
	totalCount := int32(len(filteredMatchableHttpGateways))
	if pagination.GetLimit() > 0 && pagination.GetOffset() >= 0 {
		start := apiserverutils.Min(pagination.GetOffset(), totalCount)
		end := apiserverutils.Min(pagination.GetOffset()+pagination.GetLimit(), totalCount)
		paginatedMatchableHttpGateways = filteredMatchableHttpGateways[start:end]
	}
	// Build response
	res := &rpc_edge_v1.ListMatchableHttpGatewaysResponse{
		MatchableHttpGateways: paginatedMatchableHttpGateways,
		Total:                 totalCount,
	}
	return res, nil
}

func (k *fedGatewayResourceHandler) listMatchableHttpGatewaysForGlooInstance(ctx context.Context, instance *fedv1.GlooInstance) ([]*rpc_edge_v1.MatchableHttpGateway, error) {

	gatewayCRDClientset, err := k.mcGatewayCRDClientset.Cluster(instance.Spec.GetCluster())
	if err != nil {
		return nil, err
	}
	matchableHttpGatewayClient := gatewayCRDClientset.MatchableHttpGateways()

	var gatewayMatchableHttpGatewayList []*gateway_solo_io_v1.MatchableHttpGateway
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := matchableHttpGatewayClient.ListMatchableHttpGateway(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				gatewayMatchableHttpGatewayList = append(gatewayMatchableHttpGatewayList, &list.Items[i])
			}
		}
	} else {
		list, err := matchableHttpGatewayClient.ListMatchableHttpGateway(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			gatewayMatchableHttpGatewayList = append(gatewayMatchableHttpGatewayList, &list.Items[i])
		}
	}
	sort.Slice(gatewayMatchableHttpGatewayList, func(i, j int) bool {
		x := gatewayMatchableHttpGatewayList[i]
		y := gatewayMatchableHttpGatewayList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcMatchableHttpGateways []*rpc_edge_v1.MatchableHttpGateway
	for _, matchableHttpGateway := range gatewayMatchableHttpGatewayList {
		rpcMatchableHttpGateways = append(rpcMatchableHttpGateways, BuildRpcMatchableHttpGateway(matchableHttpGateway, &skv2v1.ObjectRef{
			Name:      instance.GetName(),
			Namespace: instance.GetNamespace(),
		}, instance.Spec.GetCluster()))
	}
	return rpcMatchableHttpGateways, nil
}

func BuildRpcMatchableHttpGateway(matchableHttpGateway *gateway_solo_io_v1.MatchableHttpGateway, glooInstance *skv2v1.ObjectRef, cluster string) *rpc_edge_v1.MatchableHttpGateway {
	m := &rpc_edge_v1.MatchableHttpGateway{
		Metadata:     apiserverutils.ToMetadata(matchableHttpGateway.ObjectMeta),
		GlooInstance: glooInstance,
		Spec:         &matchableHttpGateway.Spec,
		Status:       &matchableHttpGateway.Status,
	}
	m.Metadata.ClusterName = cluster
	return m
}

func (k *fedGatewayResourceHandler) GetMatchableHttpGatewayYaml(ctx context.Context, request *rpc_edge_v1.GetMatchableHttpGatewayYamlRequest) (*rpc_edge_v1.GetMatchableHttpGatewayYamlResponse, error) {
	gatewayClientSet, err := k.mcGatewayCRDClientset.Cluster(request.GetMatchableHttpGatewayRef().GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get gateway client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	matchableHttpGateway, err := gatewayClientSet.MatchableHttpGateways().GetMatchableHttpGateway(ctx, client.ObjectKey{
		Namespace: request.GetMatchableHttpGatewayRef().GetNamespace(),
		Name:      request.GetMatchableHttpGatewayRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get matchableHttpGateway")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(matchableHttpGateway)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetMatchableHttpGatewayYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (k *fedGatewayResourceHandler) GetMatchableHttpGatewayDetails(ctx context.Context, request *rpc_edge_v1.GetMatchableHttpGatewayDetailsRequest) (*rpc_edge_v1.GetMatchableHttpGatewayDetailsResponse, error) {
	MatchableHttpGatewayRef := request.GetMatchableHttpGatewayRef()
	if MatchableHttpGatewayRef == nil {
		return nil, eris.Errorf("MatchableHttpGateway ref missing from request: %v", request)
	}
	clientset, err := k.mcGatewayCRDClientset.Cluster(MatchableHttpGatewayRef.GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get MatchableHttpGateway client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	MatchableHttpGateway, err := clientset.MatchableHttpGateways().GetMatchableHttpGateway(ctx, client.ObjectKey{
		Namespace: MatchableHttpGatewayRef.GetNamespace(),
		Name:      MatchableHttpGatewayRef.GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get MatchableHttpGateway")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	// find which gloo instance this MatchableHttpGateway belongs to, by finding a gloo instance that is watching
	// the MatchableHttpGateway's namespace
	instanceList, err := k.instanceClient.ListGlooInstance(ctx)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	var glooInstance *fedv1.GlooInstance
	for _, instance := range instanceList.Items {
		watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
		if len(watchedNamespaces) == 0 {
			glooInstance = &instance
			break
		}
		for _, ns := range watchedNamespaces {
			if ns == MatchableHttpGatewayRef.GetNamespace() {
				glooInstance = &instance
				break
			}
		}
		if glooInstance != nil {
			break
		}
	}
	if glooInstance == nil {
		return nil, eris.Errorf("Failed to find a gloo edge instance for namespace %s", MatchableHttpGateway.GetNamespace())
	}
	rpcMatchableHttpGateway := &rpc_edge_v1.MatchableHttpGateway{
		Metadata: apiserverutils.ToMetadata(MatchableHttpGateway.ObjectMeta),
		GlooInstance: &skv2v1.ObjectRef{
			Name:      glooInstance.GetName(),
			Namespace: glooInstance.GetNamespace(),
		},
		Spec:   &MatchableHttpGateway.Spec,
		Status: &MatchableHttpGateway.Status,
	}
	rpcMatchableHttpGateway.Metadata.ClusterName = glooInstance.Spec.GetCluster()
	return &rpc_edge_v1.GetMatchableHttpGatewayDetailsResponse{
		MatchableHttpGateway: rpcMatchableHttpGateway,
	}, nil
}

func (k *fedGatewayResourceHandler) ListVirtualServices(ctx context.Context, request *rpc_edge_v1.ListVirtualServicesRequest) (*rpc_edge_v1.ListVirtualServicesResponse, error) {
	var rpcVirtualServices []*rpc_edge_v1.VirtualService
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List virtualServices across all gloo edge instances
		instanceList, err := k.instanceClient.ListGlooInstance(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList.Items {
			rpcVirtualServiceList, err := k.listVirtualServicesForGlooInstance(ctx, &instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list virtualServices for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcVirtualServices = append(rpcVirtualServices, rpcVirtualServiceList...)
		}
	} else {
		// List virtualServices for a specific gloo edge instance
		instance, err := k.instanceClient.GetGlooInstance(ctx, types.NamespacedName{
			Name:      request.GetGlooInstanceRef().GetName(),
			Namespace: request.GetGlooInstanceRef().GetNamespace(),
		})
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to get gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcVirtualServices, err = k.listVirtualServicesForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list virtualServices for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	// Search, Filter
	var filteredVirtualServices []*rpc_edge_v1.VirtualService
	qs := request.GetQueryString()
	sf := request.GetStatusFilter()
	if sf != nil || qs != "" {
		for _, d := range rpcVirtualServices {
			if (sf == nil || sf.State == int32(d.Status.State)) && strings.Contains(d.Metadata.Name, qs) {
				filteredVirtualServices = append(filteredVirtualServices, d)
			}
		}
	} else {
		filteredVirtualServices = rpcVirtualServices
	}
	// Sort
	sortOptions := request.GetSortOptions()
	if sortOptions != nil {
		isDescending := sortOptions.GetDescending()
		sortKey := sortOptions.GetSortKey()
		if isDescending == true {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredVirtualServices, func(i, j int) bool {
					a := filteredVirtualServices[i]
					b := filteredVirtualServices[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) > b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredVirtualServices, func(i, j int) bool {
					a := filteredVirtualServices[i]
					b := filteredVirtualServices[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) > b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredVirtualServices, func(i, j int) bool {
					a := filteredVirtualServices[i]
					b := filteredVirtualServices[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace > string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		} else {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredVirtualServices, func(i, j int) bool {
					a := filteredVirtualServices[i]
					b := filteredVirtualServices[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) < b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredVirtualServices, func(i, j int) bool {
					a := filteredVirtualServices[i]
					b := filteredVirtualServices[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) < b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredVirtualServices, func(i, j int) bool {
					a := filteredVirtualServices[i]
					b := filteredVirtualServices[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace < string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		}
	}
	// Paginate
	paginatedVirtualServices := filteredVirtualServices
	pagination := request.GetPagination()
	totalCount := int32(len(filteredVirtualServices))
	if pagination.GetLimit() > 0 && pagination.GetOffset() >= 0 {
		start := apiserverutils.Min(pagination.GetOffset(), totalCount)
		end := apiserverutils.Min(pagination.GetOffset()+pagination.GetLimit(), totalCount)
		paginatedVirtualServices = filteredVirtualServices[start:end]
	}
	// Build response
	res := &rpc_edge_v1.ListVirtualServicesResponse{
		VirtualServices: paginatedVirtualServices,
		Total:           totalCount,
	}
	return res, nil
}

func (k *fedGatewayResourceHandler) listVirtualServicesForGlooInstance(ctx context.Context, instance *fedv1.GlooInstance) ([]*rpc_edge_v1.VirtualService, error) {

	gatewayCRDClientset, err := k.mcGatewayCRDClientset.Cluster(instance.Spec.GetCluster())
	if err != nil {
		return nil, err
	}
	virtualServiceClient := gatewayCRDClientset.VirtualServices()

	var gatewayVirtualServiceList []*gateway_solo_io_v1.VirtualService
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := virtualServiceClient.ListVirtualService(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				gatewayVirtualServiceList = append(gatewayVirtualServiceList, &list.Items[i])
			}
		}
	} else {
		list, err := virtualServiceClient.ListVirtualService(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			gatewayVirtualServiceList = append(gatewayVirtualServiceList, &list.Items[i])
		}
	}
	sort.Slice(gatewayVirtualServiceList, func(i, j int) bool {
		x := gatewayVirtualServiceList[i]
		y := gatewayVirtualServiceList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcVirtualServices []*rpc_edge_v1.VirtualService
	for _, virtualService := range gatewayVirtualServiceList {
		rpcVirtualServices = append(rpcVirtualServices, BuildRpcVirtualService(virtualService, &skv2v1.ObjectRef{
			Name:      instance.GetName(),
			Namespace: instance.GetNamespace(),
		}, instance.Spec.GetCluster()))
	}
	return rpcVirtualServices, nil
}

func BuildRpcVirtualService(virtualService *gateway_solo_io_v1.VirtualService, glooInstance *skv2v1.ObjectRef, cluster string) *rpc_edge_v1.VirtualService {
	m := &rpc_edge_v1.VirtualService{
		Metadata:     apiserverutils.ToMetadata(virtualService.ObjectMeta),
		GlooInstance: glooInstance,
		Spec:         &virtualService.Spec,
		Status:       &virtualService.Status,
	}
	m.Metadata.ClusterName = cluster
	return m
}

func (k *fedGatewayResourceHandler) GetVirtualServiceYaml(ctx context.Context, request *rpc_edge_v1.GetVirtualServiceYamlRequest) (*rpc_edge_v1.GetVirtualServiceYamlResponse, error) {
	gatewayClientSet, err := k.mcGatewayCRDClientset.Cluster(request.GetVirtualServiceRef().GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get gateway client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	virtualService, err := gatewayClientSet.VirtualServices().GetVirtualService(ctx, client.ObjectKey{
		Namespace: request.GetVirtualServiceRef().GetNamespace(),
		Name:      request.GetVirtualServiceRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get virtualService")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(virtualService)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetVirtualServiceYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (k *fedGatewayResourceHandler) GetVirtualServiceDetails(ctx context.Context, request *rpc_edge_v1.GetVirtualServiceDetailsRequest) (*rpc_edge_v1.GetVirtualServiceDetailsResponse, error) {
	VirtualServiceRef := request.GetVirtualServiceRef()
	if VirtualServiceRef == nil {
		return nil, eris.Errorf("VirtualService ref missing from request: %v", request)
	}
	clientset, err := k.mcGatewayCRDClientset.Cluster(VirtualServiceRef.GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get VirtualService client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	VirtualService, err := clientset.VirtualServices().GetVirtualService(ctx, client.ObjectKey{
		Namespace: VirtualServiceRef.GetNamespace(),
		Name:      VirtualServiceRef.GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get VirtualService")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	// find which gloo instance this VirtualService belongs to, by finding a gloo instance that is watching
	// the VirtualService's namespace
	instanceList, err := k.instanceClient.ListGlooInstance(ctx)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	var glooInstance *fedv1.GlooInstance
	for _, instance := range instanceList.Items {
		watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
		if len(watchedNamespaces) == 0 {
			glooInstance = &instance
			break
		}
		for _, ns := range watchedNamespaces {
			if ns == VirtualServiceRef.GetNamespace() {
				glooInstance = &instance
				break
			}
		}
		if glooInstance != nil {
			break
		}
	}
	if glooInstance == nil {
		return nil, eris.Errorf("Failed to find a gloo edge instance for namespace %s", VirtualService.GetNamespace())
	}
	rpcVirtualService := &rpc_edge_v1.VirtualService{
		Metadata: apiserverutils.ToMetadata(VirtualService.ObjectMeta),
		GlooInstance: &skv2v1.ObjectRef{
			Name:      glooInstance.GetName(),
			Namespace: glooInstance.GetNamespace(),
		},
		Spec:   &VirtualService.Spec,
		Status: &VirtualService.Status,
	}
	rpcVirtualService.Metadata.ClusterName = glooInstance.Spec.GetCluster()
	return &rpc_edge_v1.GetVirtualServiceDetailsResponse{
		VirtualService: rpcVirtualService,
	}, nil
}

func (k *fedGatewayResourceHandler) ListRouteTables(ctx context.Context, request *rpc_edge_v1.ListRouteTablesRequest) (*rpc_edge_v1.ListRouteTablesResponse, error) {
	var rpcRouteTables []*rpc_edge_v1.RouteTable
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List routeTables across all gloo edge instances
		instanceList, err := k.instanceClient.ListGlooInstance(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList.Items {
			rpcRouteTableList, err := k.listRouteTablesForGlooInstance(ctx, &instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list routeTables for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcRouteTables = append(rpcRouteTables, rpcRouteTableList...)
		}
	} else {
		// List routeTables for a specific gloo edge instance
		instance, err := k.instanceClient.GetGlooInstance(ctx, types.NamespacedName{
			Name:      request.GetGlooInstanceRef().GetName(),
			Namespace: request.GetGlooInstanceRef().GetNamespace(),
		})
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to get gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcRouteTables, err = k.listRouteTablesForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list routeTables for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	// Search, Filter
	var filteredRouteTables []*rpc_edge_v1.RouteTable
	qs := request.GetQueryString()
	sf := request.GetStatusFilter()
	if sf != nil || qs != "" {
		for _, d := range rpcRouteTables {
			if (sf == nil || sf.State == int32(d.Status.State)) && strings.Contains(d.Metadata.Name, qs) {
				filteredRouteTables = append(filteredRouteTables, d)
			}
		}
	} else {
		filteredRouteTables = rpcRouteTables
	}
	// Sort
	sortOptions := request.GetSortOptions()
	if sortOptions != nil {
		isDescending := sortOptions.GetDescending()
		sortKey := sortOptions.GetSortKey()
		if isDescending == true {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredRouteTables, func(i, j int) bool {
					a := filteredRouteTables[i]
					b := filteredRouteTables[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) > b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredRouteTables, func(i, j int) bool {
					a := filteredRouteTables[i]
					b := filteredRouteTables[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) > b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredRouteTables, func(i, j int) bool {
					a := filteredRouteTables[i]
					b := filteredRouteTables[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace > string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		} else {
			switch sortKey {
			case rpc_edge_v1.SortOptions_NAME:
				sort.SliceStable(filteredRouteTables, func(i, j int) bool {
					a := filteredRouteTables[i]
					b := filteredRouteTables[j]
					return a.Metadata.Name+a.Metadata.Namespace+string(a.Status.State) < b.Metadata.Name+b.Metadata.Namespace+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_NAMESPACE:
				sort.SliceStable(filteredRouteTables, func(i, j int) bool {
					a := filteredRouteTables[i]
					b := filteredRouteTables[j]
					return a.Metadata.Namespace+a.Metadata.Name+string(a.Status.State) < b.Metadata.Namespace+b.Metadata.Name+string(b.Status.State)
				})
			case rpc_edge_v1.SortOptions_STATUS:
				sort.SliceStable(filteredRouteTables, func(i, j int) bool {
					a := filteredRouteTables[i]
					b := filteredRouteTables[j]
					return string(a.Status.State)+a.Metadata.Name+a.Metadata.Namespace < string(b.Status.State)+b.Metadata.Name+b.Metadata.Namespace
				})
			}
		}
	}
	// Paginate
	paginatedRouteTables := filteredRouteTables
	pagination := request.GetPagination()
	totalCount := int32(len(filteredRouteTables))
	if pagination.GetLimit() > 0 && pagination.GetOffset() >= 0 {
		start := apiserverutils.Min(pagination.GetOffset(), totalCount)
		end := apiserverutils.Min(pagination.GetOffset()+pagination.GetLimit(), totalCount)
		paginatedRouteTables = filteredRouteTables[start:end]
	}
	// Build response
	res := &rpc_edge_v1.ListRouteTablesResponse{
		RouteTables: paginatedRouteTables,
		Total:       totalCount,
	}
	return res, nil
}

func (k *fedGatewayResourceHandler) listRouteTablesForGlooInstance(ctx context.Context, instance *fedv1.GlooInstance) ([]*rpc_edge_v1.RouteTable, error) {

	gatewayCRDClientset, err := k.mcGatewayCRDClientset.Cluster(instance.Spec.GetCluster())
	if err != nil {
		return nil, err
	}
	routeTableClient := gatewayCRDClientset.RouteTables()

	var gatewayRouteTableList []*gateway_solo_io_v1.RouteTable
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := routeTableClient.ListRouteTable(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				gatewayRouteTableList = append(gatewayRouteTableList, &list.Items[i])
			}
		}
	} else {
		list, err := routeTableClient.ListRouteTable(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			gatewayRouteTableList = append(gatewayRouteTableList, &list.Items[i])
		}
	}
	sort.Slice(gatewayRouteTableList, func(i, j int) bool {
		x := gatewayRouteTableList[i]
		y := gatewayRouteTableList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcRouteTables []*rpc_edge_v1.RouteTable
	for _, routeTable := range gatewayRouteTableList {
		rpcRouteTables = append(rpcRouteTables, BuildRpcRouteTable(routeTable, &skv2v1.ObjectRef{
			Name:      instance.GetName(),
			Namespace: instance.GetNamespace(),
		}, instance.Spec.GetCluster()))
	}
	return rpcRouteTables, nil
}

func BuildRpcRouteTable(routeTable *gateway_solo_io_v1.RouteTable, glooInstance *skv2v1.ObjectRef, cluster string) *rpc_edge_v1.RouteTable {
	m := &rpc_edge_v1.RouteTable{
		Metadata:     apiserverutils.ToMetadata(routeTable.ObjectMeta),
		GlooInstance: glooInstance,
		Spec:         &routeTable.Spec,
		Status:       &routeTable.Status,
	}
	m.Metadata.ClusterName = cluster
	return m
}

func (k *fedGatewayResourceHandler) GetRouteTableYaml(ctx context.Context, request *rpc_edge_v1.GetRouteTableYamlRequest) (*rpc_edge_v1.GetRouteTableYamlResponse, error) {
	gatewayClientSet, err := k.mcGatewayCRDClientset.Cluster(request.GetRouteTableRef().GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get gateway client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	routeTable, err := gatewayClientSet.RouteTables().GetRouteTable(ctx, client.ObjectKey{
		Namespace: request.GetRouteTableRef().GetNamespace(),
		Name:      request.GetRouteTableRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get routeTable")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(routeTable)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetRouteTableYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}

func (k *fedGatewayResourceHandler) GetRouteTableDetails(ctx context.Context, request *rpc_edge_v1.GetRouteTableDetailsRequest) (*rpc_edge_v1.GetRouteTableDetailsResponse, error) {
	RouteTableRef := request.GetRouteTableRef()
	if RouteTableRef == nil {
		return nil, eris.Errorf("RouteTable ref missing from request: %v", request)
	}
	clientset, err := k.mcGatewayCRDClientset.Cluster(RouteTableRef.GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get RouteTable client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	RouteTable, err := clientset.RouteTables().GetRouteTable(ctx, client.ObjectKey{
		Namespace: RouteTableRef.GetNamespace(),
		Name:      RouteTableRef.GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get RouteTable")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	// find which gloo instance this RouteTable belongs to, by finding a gloo instance that is watching
	// the RouteTable's namespace
	instanceList, err := k.instanceClient.ListGlooInstance(ctx)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	var glooInstance *fedv1.GlooInstance
	for _, instance := range instanceList.Items {
		watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
		if len(watchedNamespaces) == 0 {
			glooInstance = &instance
			break
		}
		for _, ns := range watchedNamespaces {
			if ns == RouteTableRef.GetNamespace() {
				glooInstance = &instance
				break
			}
		}
		if glooInstance != nil {
			break
		}
	}
	if glooInstance == nil {
		return nil, eris.Errorf("Failed to find a gloo edge instance for namespace %s", RouteTable.GetNamespace())
	}
	rpcRouteTable := &rpc_edge_v1.RouteTable{
		Metadata: apiserverutils.ToMetadata(RouteTable.ObjectMeta),
		GlooInstance: &skv2v1.ObjectRef{
			Name:      glooInstance.GetName(),
			Namespace: glooInstance.GetNamespace(),
		},
		Spec:   &RouteTable.Spec,
		Status: &RouteTable.Status,
	}
	rpcRouteTable.Metadata.ClusterName = glooInstance.Spec.GetCluster()
	return &rpc_edge_v1.GetRouteTableDetailsResponse{
		RouteTable: rpcRouteTable,
	}, nil
}
