// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/apiserver/api/fed.rpc/v1/glooinstance.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GlooInstance) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GlooInstance)
	if !ok {
		that2, ok := that.(GlooInstance)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStatus()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStatus()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStatus(), target.GetStatus()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListGlooInstancesRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListGlooInstancesRequest)
	if !ok {
		that2, ok := that.(ListGlooInstancesRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListGlooInstancesResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListGlooInstancesResponse)
	if !ok {
		that2, ok := that.(ListGlooInstancesResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetGlooInstances()) != len(target.GetGlooInstances()) {
		return false
	}
	for idx, v := range m.GetGlooInstances() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGlooInstances()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGlooInstances()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ClusterDetails) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClusterDetails)
	if !ok {
		that2, ok := that.(ClusterDetails)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetCluster(), target.GetCluster()) != 0 {
		return false
	}

	if len(m.GetGlooInstances()) != len(target.GetGlooInstances()) {
		return false
	}
	for idx, v := range m.GetGlooInstances() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGlooInstances()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGlooInstances()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ListClusterDetailsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListClusterDetailsRequest)
	if !ok {
		that2, ok := that.(ListClusterDetailsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListClusterDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListClusterDetailsResponse)
	if !ok {
		that2, ok := that.(ListClusterDetailsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClusterDetails()) != len(target.GetClusterDetails()) {
		return false
	}
	for idx, v := range m.GetClusterDetails() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClusterDetails()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClusterDetails()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ConfigDump) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ConfigDump)
	if !ok {
		that2, ok := that.(ConfigDump)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetRaw(), target.GetRaw()) != 0 {
		return false
	}

	if strings.Compare(m.GetError(), target.GetError()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GetConfigDumpsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetConfigDumpsRequest)
	if !ok {
		that2, ok := that.(GetConfigDumpsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlooInstanceRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlooInstanceRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlooInstanceRef(), target.GetGlooInstanceRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetConfigDumpsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetConfigDumpsResponse)
	if !ok {
		that2, ok := that.(GetConfigDumpsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetConfigDumps()) != len(target.GetConfigDumps()) {
		return false
	}
	for idx, v := range m.GetConfigDumps() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfigDumps()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetConfigDumps()[idx]) {
				return false
			}
		}

	}

	return true
}
