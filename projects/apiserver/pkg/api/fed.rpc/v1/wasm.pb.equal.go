// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/apiserver/api/fed.rpc/v1/wasm.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *WasmFilter) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WasmFilter)
	if !ok {
		that2, ok := that.(WasmFilter)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetRootId(), target.GetRootId()) != 0 {
		return false
	}

	if strings.Compare(m.GetSource(), target.GetSource()) != 0 {
		return false
	}

	if strings.Compare(m.GetConfig(), target.GetConfig()) != 0 {
		return false
	}

	if len(m.GetLocations()) != len(target.GetLocations()) {
		return false
	}
	for idx, v := range m.GetLocations() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocations()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetLocations()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ListWasmFiltersRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListWasmFiltersRequest)
	if !ok {
		that2, ok := that.(ListWasmFiltersRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListWasmFiltersResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListWasmFiltersResponse)
	if !ok {
		that2, ok := that.(ListWasmFiltersResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWasmFilters()) != len(target.GetWasmFilters()) {
		return false
	}
	for idx, v := range m.GetWasmFilters() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetWasmFilters()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetWasmFilters()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *DescribeWasmFilterRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DescribeWasmFilterRequest)
	if !ok {
		that2, ok := that.(DescribeWasmFilterRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetRootId(), target.GetRootId()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetGatewayRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGatewayRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGatewayRef(), target.GetGatewayRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DescribeWasmFilterResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DescribeWasmFilterResponse)
	if !ok {
		that2, ok := that.(DescribeWasmFilterResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetWasmFilter()).(equality.Equalizer); ok {
		if !h.Equal(target.GetWasmFilter()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetWasmFilter(), target.GetWasmFilter()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *WasmFilter_Location) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*WasmFilter_Location)
	if !ok {
		that2, ok := that.(WasmFilter_Location)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGatewayRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGatewayRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGatewayRef(), target.GetGatewayRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetGatewayStatus()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGatewayStatus()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGatewayStatus(), target.GetGatewayStatus()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetGlooInstanceRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlooInstanceRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlooInstanceRef(), target.GetGlooInstanceRef()) {
			return false
		}
	}

	return true
}
