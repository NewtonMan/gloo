// Code generated by skv2. DO NOT EDIT.

package enterprise_gloo_resource_handler

import (
	"context"
	"sort"

	"github.com/ghodss/yaml"
	"github.com/rotisserie/eris"
	"go.uber.org/zap"

	"github.com/solo-io/go-utils/contextutils"
	skv2v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	enterprise_gloo_solo_io_v1 "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"
	rpc_edge_v1 "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1"
	"github.com/solo-io/solo-projects/projects/apiserver/server/apiserverutils"
	fedv1 "github.com/solo-io/solo-projects/projects/gloo-fed/pkg/api/fed.solo.io/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func NewFedEnterpriseGlooResourceHandler(
	instanceClient fedv1.GlooInstanceClient,
	mcEnterpriseGlooCRDClientset enterprise_gloo_solo_io_v1.MulticlusterClientset,

) rpc_edge_v1.EnterpriseGlooResourceApiServer {
	return &fedEnterpriseGlooResourceHandler{
		instanceClient:               instanceClient,
		mcEnterpriseGlooCRDClientset: mcEnterpriseGlooCRDClientset,
	}
}

type fedEnterpriseGlooResourceHandler struct {
	instanceClient               fedv1.GlooInstanceClient
	mcEnterpriseGlooCRDClientset enterprise_gloo_solo_io_v1.MulticlusterClientset
}

func (k *fedEnterpriseGlooResourceHandler) ListAuthConfigs(ctx context.Context, request *rpc_edge_v1.ListAuthConfigsRequest) (*rpc_edge_v1.ListAuthConfigsResponse, error) {

	var rpcAuthConfigs []*rpc_edge_v1.AuthConfig
	if request.GetGlooInstanceRef() == nil || request.GetGlooInstanceRef().GetName() == "" || request.GetGlooInstanceRef().GetNamespace() == "" {
		// List authConfigs across all gloo edge instances
		instanceList, err := k.instanceClient.ListGlooInstance(ctx)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list gloo edge instances")
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		for _, instance := range instanceList.Items {
			rpcAuthConfigList, err := k.listAuthConfigsForGlooInstance(ctx, &instance)
			if err != nil {
				wrapped := eris.Wrapf(err, "Failed to list authConfigs for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
				contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
				return nil, wrapped
			}
			rpcAuthConfigs = append(rpcAuthConfigs, rpcAuthConfigList...)
		}
	} else {
		// List authConfigs for a specific gloo edge instance
		instance, err := k.instanceClient.GetGlooInstance(ctx, types.NamespacedName{
			Name:      request.GetGlooInstanceRef().GetName(),
			Namespace: request.GetGlooInstanceRef().GetNamespace(),
		})
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to get gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
		rpcAuthConfigs, err = k.listAuthConfigsForGlooInstance(ctx, instance)
		if err != nil {
			wrapped := eris.Wrapf(err, "Failed to list authConfigs for gloo edge instance %s.%s", instance.GetNamespace(), instance.GetName())
			contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
			return nil, wrapped
		}
	}

	return &rpc_edge_v1.ListAuthConfigsResponse{
		AuthConfigs: rpcAuthConfigs,
	}, nil
}

func (k *fedEnterpriseGlooResourceHandler) listAuthConfigsForGlooInstance(ctx context.Context, instance *fedv1.GlooInstance) ([]*rpc_edge_v1.AuthConfig, error) {

	enterprise_glooCRDClientset, err := k.mcEnterpriseGlooCRDClientset.Cluster(instance.Spec.GetCluster())
	if err != nil {
		return nil, err
	}
	authConfigClient := enterprise_glooCRDClientset.AuthConfigs()

	var enterprise_glooAuthConfigList []*enterprise_gloo_solo_io_v1.AuthConfig
	watchedNamespaces := instance.Spec.GetControlPlane().GetWatchedNamespaces()
	if len(watchedNamespaces) != 0 {
		for _, ns := range watchedNamespaces {
			list, err := authConfigClient.ListAuthConfig(ctx, client.InNamespace(ns))
			if err != nil {
				return nil, err
			}
			for i, _ := range list.Items {
				enterprise_glooAuthConfigList = append(enterprise_glooAuthConfigList, &list.Items[i])
			}
		}
	} else {
		list, err := authConfigClient.ListAuthConfig(ctx)
		if err != nil {
			return nil, err
		}
		for i, _ := range list.Items {
			enterprise_glooAuthConfigList = append(enterprise_glooAuthConfigList, &list.Items[i])
		}
	}
	sort.Slice(enterprise_glooAuthConfigList, func(i, j int) bool {
		x := enterprise_glooAuthConfigList[i]
		y := enterprise_glooAuthConfigList[j]
		return x.GetNamespace()+x.GetName() < y.GetNamespace()+y.GetName()
	})

	var rpcAuthConfigs []*rpc_edge_v1.AuthConfig
	for _, authConfig := range enterprise_glooAuthConfigList {
		rpcAuthConfigs = append(rpcAuthConfigs, BuildRpcAuthConfig(authConfig, &skv2v1.ObjectRef{
			Name:      instance.GetName(),
			Namespace: instance.GetNamespace(),
		}, instance.Spec.GetCluster()))
	}
	return rpcAuthConfigs, nil
}

func BuildRpcAuthConfig(authConfig *enterprise_gloo_solo_io_v1.AuthConfig, glooInstance *skv2v1.ObjectRef, cluster string) *rpc_edge_v1.AuthConfig {
	m := &rpc_edge_v1.AuthConfig{
		Metadata:     apiserverutils.ToMetadata(authConfig.ObjectMeta),
		GlooInstance: glooInstance,
		Spec:         &authConfig.Spec,
		Status:       &authConfig.Status,
	}
	m.Metadata.ClusterName = cluster
	return m
}

func (k *fedEnterpriseGlooResourceHandler) GetAuthConfigYaml(ctx context.Context, request *rpc_edge_v1.GetAuthConfigYamlRequest) (*rpc_edge_v1.GetAuthConfigYamlResponse, error) {
	enterprise_glooClientSet, err := k.mcEnterpriseGlooCRDClientset.Cluster(request.GetAuthConfigRef().GetClusterName())
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get enterprise_gloo client set")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	authConfig, err := enterprise_glooClientSet.AuthConfigs().GetAuthConfig(ctx, client.ObjectKey{
		Namespace: request.GetAuthConfigRef().GetNamespace(),
		Name:      request.GetAuthConfigRef().GetName(),
	})
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to get authConfig")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	content, err := yaml.Marshal(authConfig)
	if err != nil {
		wrapped := eris.Wrapf(err, "Failed to marshal kube resource into yaml")
		contextutils.LoggerFrom(ctx).Errorw(wrapped.Error(), zap.Error(err), zap.Any("request", request))
		return nil, wrapped
	}
	return &rpc_edge_v1.GetAuthConfigYamlResponse{
		YamlData: &rpc_edge_v1.ResourceYaml{
			Yaml: string(content),
		},
	}, nil
}
