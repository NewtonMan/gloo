// Code generated by skv2. DO NOT EDIT.

package enterprise_gloo_resource_handler

import (
	"context"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/go-utils/stringutils"
	corev1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	types "github.com/solo-io/solo-apis/pkg/api/enterprise.gloo.solo.io/v1"
	rpc_edge_v1 "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/rpc.edge.gloo/v1"
	"github.com/solo-io/solo-projects/projects/apiserver/server/apiserverutils"
	"go.uber.org/zap"
)

func GetAuthConfigSummary(ctx context.Context, authConfigClient types.AuthConfigClient, watchedNamespaces []string) *rpc_edge_v1.GlooInstance_GlooInstanceSpec_Check_Summary {
	summary := &rpc_edge_v1.GlooInstance_GlooInstanceSpec_Check_Summary{}

	authConfigList, err := authConfigClient.ListAuthConfig(ctx)
	if err != nil {
		contextutils.LoggerFrom(ctx).Warnw("Failed to get AuthConfig summary", zap.Error(err), zap.Any("watchedNamespaces", watchedNamespaces))
		return summary
	}

	for _, authConfig := range authConfigList.Items {
		authConfig := authConfig

		// If the resource is not in a watched namespace, continue
		if len(watchedNamespaces) > 0 && !stringutils.ContainsString(authConfig.Namespace, watchedNamespaces) {
			continue
		}

		summary.Total += 1

		if authConfig.Status.GetState() == types.AuthConfigStatus_Rejected {
			summary.Errors = append(summary.Errors, &rpc_edge_v1.GlooInstance_GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      authConfig.Name,
					Namespace: authConfig.Namespace,
				},
				Message: authConfig.Status.Reason,
			})
		}

		if authConfig.Status.GetState() == types.AuthConfigStatus_Warning {
			summary.Warnings = append(summary.Warnings, &rpc_edge_v1.GlooInstance_GlooInstanceSpec_Check_Summary_ResourceReport{
				Ref: &corev1.ObjectRef{
					Name:      authConfig.Name,
					Namespace: authConfig.Namespace,
				},
				Message: authConfig.Status.Reason,
			})
		}

	}

	apiserverutils.SortCheckSummaryLists(summary)
	return summary
}
