// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/apiserver/api/rpc.edge.gloo/v1/graphql.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GraphqlApi) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GraphqlApi)
	if !ok {
		that2, ok := that.(GraphqlApi)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStatus()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStatus()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStatus(), target.GetStatus()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetGlooInstance()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlooInstance()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlooInstance(), target.GetGlooInstance()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetGraphqlApiRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetGraphqlApiRequest)
	if !ok {
		that2, ok := that.(GetGraphqlApiRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApiRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApiRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApiRef(), target.GetGraphqlApiRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetGraphqlApiResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetGraphqlApiResponse)
	if !ok {
		that2, ok := that.(GetGraphqlApiResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApi()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApi()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApi(), target.GetGraphqlApi()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListGraphqlApisRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListGraphqlApisRequest)
	if !ok {
		that2, ok := that.(ListGraphqlApisRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlooInstanceRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlooInstanceRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlooInstanceRef(), target.GetGlooInstanceRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListGraphqlApisResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListGraphqlApisResponse)
	if !ok {
		that2, ok := that.(ListGraphqlApisResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetGraphqlApis()) != len(target.GetGraphqlApis()) {
		return false
	}
	for idx, v := range m.GetGraphqlApis() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetGraphqlApis()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetGraphqlApis()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GetGraphqlApiYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetGraphqlApiYamlRequest)
	if !ok {
		that2, ok := that.(GetGraphqlApiYamlRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApiRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApiRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApiRef(), target.GetGraphqlApiRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetGraphqlApiYamlResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetGraphqlApiYamlResponse)
	if !ok {
		that2, ok := that.(GetGraphqlApiYamlResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetYamlData()).(equality.Equalizer); ok {
		if !h.Equal(target.GetYamlData()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetYamlData(), target.GetYamlData()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CreateGraphqlApiRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateGraphqlApiRequest)
	if !ok {
		that2, ok := that.(CreateGraphqlApiRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApiRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApiRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApiRef(), target.GetGraphqlApiRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CreateGraphqlApiResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateGraphqlApiResponse)
	if !ok {
		that2, ok := that.(CreateGraphqlApiResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApi()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApi()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApi(), target.GetGraphqlApi()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateGraphqlApiRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateGraphqlApiRequest)
	if !ok {
		that2, ok := that.(UpdateGraphqlApiRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApiRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApiRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApiRef(), target.GetGraphqlApiRef()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateGraphqlApiResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateGraphqlApiResponse)
	if !ok {
		that2, ok := that.(UpdateGraphqlApiResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApi()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApi()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApi(), target.GetGraphqlApi()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteGraphqlApiRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteGraphqlApiRequest)
	if !ok {
		that2, ok := that.(DeleteGraphqlApiRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApiRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApiRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApiRef(), target.GetGraphqlApiRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteGraphqlApiResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteGraphqlApiResponse)
	if !ok {
		that2, ok := that.(DeleteGraphqlApiResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGraphqlApiRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGraphqlApiRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGraphqlApiRef(), target.GetGraphqlApiRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ValidateResolverYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValidateResolverYamlRequest)
	if !ok {
		that2, ok := that.(ValidateResolverYamlRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetYaml(), target.GetYaml()) != 0 {
		return false
	}

	if m.GetResolverType() != target.GetResolverType() {
		return false
	}

	return true
}

// Equal function
func (m *ValidateResolverYamlResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValidateResolverYamlResponse)
	if !ok {
		that2, ok := that.(ValidateResolverYamlResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ValidateSchemaDefinitionRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValidateSchemaDefinitionRequest)
	if !ok {
		that2, ok := that.(ValidateSchemaDefinitionRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Input.(type) {

	case *ValidateSchemaDefinitionRequest_SchemaDefinition:
		if _, ok := target.Input.(*ValidateSchemaDefinitionRequest_SchemaDefinition); !ok {
			return false
		}

		if strings.Compare(m.GetSchemaDefinition(), target.GetSchemaDefinition()) != 0 {
			return false
		}

	case *ValidateSchemaDefinitionRequest_Spec:
		if _, ok := target.Input.(*ValidateSchemaDefinitionRequest_Spec); !ok {
			return false
		}

		if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSpec()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSpec(), target.GetSpec()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Input != target.Input {
			return false
		}
	}

	return true
}

// Equal function
func (m *ValidateSchemaDefinitionResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ValidateSchemaDefinitionResponse)
	if !ok {
		that2, ok := that.(ValidateSchemaDefinitionResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
