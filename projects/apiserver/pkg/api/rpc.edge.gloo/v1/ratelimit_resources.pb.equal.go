// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/apiserver/api/rpc.edge.gloo/v1/ratelimit_resources.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *RateLimitConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitConfig)
	if !ok {
		that2, ok := that.(RateLimitConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMetadata(), target.GetMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetSpec()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSpec()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSpec(), target.GetSpec()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStatus()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStatus()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStatus(), target.GetStatus()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetGlooInstance()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlooInstance()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlooInstance(), target.GetGlooInstance()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListRateLimitConfigsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListRateLimitConfigsRequest)
	if !ok {
		that2, ok := that.(ListRateLimitConfigsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetGlooInstanceRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGlooInstanceRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGlooInstanceRef(), target.GetGlooInstanceRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListRateLimitConfigsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListRateLimitConfigsResponse)
	if !ok {
		that2, ok := that.(ListRateLimitConfigsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRateLimitConfigs()) != len(target.GetRateLimitConfigs()) {
		return false
	}
	for idx, v := range m.GetRateLimitConfigs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimitConfigs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRateLimitConfigs()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *GetRateLimitConfigYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetRateLimitConfigYamlRequest)
	if !ok {
		that2, ok := that.(GetRateLimitConfigYamlRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRateLimitConfigRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRateLimitConfigRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRateLimitConfigRef(), target.GetRateLimitConfigRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetRateLimitConfigYamlResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetRateLimitConfigYamlResponse)
	if !ok {
		that2, ok := that.(GetRateLimitConfigYamlResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetYamlData()).(equality.Equalizer); ok {
		if !h.Equal(target.GetYamlData()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetYamlData(), target.GetYamlData()) {
			return false
		}
	}

	return true
}
