schema: 
 - "gql_schemas/*.graphql"

# Let gqlgen know where to put the generated server
exec:
  filename: pkg/graphql/graph/generated.go
  package: graph

# Let gqlgen know where to the generated models (if any)
model:
  filename: pkg/graphql/models/generated.go
  package: models

# Optional, turns on resolver stub generation
resolver:
  filename: pkg/graphql/resolver.go # where to write them
  type: GraphqlResolver  # whats the resolver root implementation type called?

# Tell gqlgen about any existing models you want to reuse for
# graphql. These normally come from the db or a remote api.
models:
  UpstreamMutation:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.UpstreamMutation
  VirtualServiceMutation:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.VirtualServiceMutation
  SecretMutation:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.SecretMutation
  ArtifactMutation:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.ArtifactMutation
  Namespace:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.Namespace
  SettingsMutation:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.SettingsMutation
  Duration:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.Duration
  VcsMutation:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.VcsMutation
  UnsignedInt:
    model: github.com/solo-io/solo-projects/projects/apiserver/pkg/graphql/customtypes.UnsignedInt

