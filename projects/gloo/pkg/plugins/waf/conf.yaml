# config_map
apiVersion: v1
kind: ConfigMap
metadata:
  name: modsecurity-conf
  labels:
    app: gloo
    gloo: gateway-proxy
data:
  modsecurity.conf: |
    # -- Rule engine initialization ----------------------------------------------

    # Enable ModSecurity, attaching it to every transaction. Use detection
      # only to start with, because that minimises the chances of post-installation
      # disruption.
      #
      SecRuleEngine DetectionOnly


      # -- Request body handling ---------------------------------------------------

      # Allow ModSecurity to access request bodies. If you don't, ModSecurity
      # won't be able to see any POST parameters, which opens a large security
      # hole for attackers to exploit.
      #
      SecRequestBodyAccess On


      # Enable XML request body parser.
      # Initiate XML Processor in case of xml content-type
      #
      SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
      "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

      # Enable JSON request body parser.
      # Initiate JSON Processor in case of JSON content-type; change accordingly
      # if your application does not use 'application/json'
      #
      SecRule REQUEST_HEADERS:Content-Type "application/json" \
      "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

      # Maximum request body size we will accept for buffering. If you support
      # file uploads then the value given on the first line has to be as large
      # as the largest file you are willing to accept. The second value refers
      # to the size of data, with files excluded. You want to keep that value as
      # low as practical.
      #
      SecRequestBodyLimit 13107200
      SecRequestBodyNoFilesLimit 131072

      # What do do if the request body size is above our configured limit.
      # Keep in mind that this setting will automatically be set to ProcessPartial
      # when SecRuleEngine is set to DetectionOnly mode in order to minimize
      # disruptions when initially deploying ModSecurity.
      #
      SecRequestBodyLimitAction Reject

      # Verify that we've correctly processed the request body.
      # As a rule of thumb, when failing to process a request body
      # you should reject the request (when deployed in blocking mode)
      # or log a high-severity alert (when deployed in detection-only mode).
      #
      SecRule REQBODY_ERROR "!@eq 0" \
      "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

      # By default be strict with what we accept in the multipart/form-data
      # request body. If the rule below proves to be too strict for your
      # environment consider changing it to detection-only. You are encouraged
      # _not_ to remove it altogether.
      #
      SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
      "id:'200003',phase:2,t:none,log,deny,status:400, \
    msg:'Multipart request body failed strict validation: \
    PE %{REQBODY_PROCESSOR_ERROR}, \
    BQ %{MULTIPART_BOUNDARY_QUOTED}, \
    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
    DB %{MULTIPART_DATA_BEFORE}, \
    DA %{MULTIPART_DATA_AFTER}, \
    HF %{MULTIPART_HEADER_FOLDING}, \
    LF %{MULTIPART_LF_LINE}, \
    SM %{MULTIPART_MISSING_SEMICOLON}, \
    IQ %{MULTIPART_INVALID_QUOTING}, \
    IP %{MULTIPART_INVALID_PART}, \
    IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
    FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

      # Did we see anything that might be a boundary?
      #
      # Here is a short description about the ModSecurity Multipart parser: the
      # parser returns with value 0, if all "boundary-like" line matches with
      # the boundary string which given in MIME header. In any other cases it returns
      # with different value, eg. 1 or 2.
      #
      # The RFC 1341 descript the multipart content-type and its syntax must contains
      # only three mandatory lines (above the content):
      # * Content-Type: multipart/mixed; boundary=BOUNDARY_STRING
      # * --BOUNDARY_STRING
      # * --BOUNDARY_STRING--
      #
      # First line indicates, that this is a multipart content, second shows that
      # here starts a part of the multipart content, third shows the end of content.
      #
      # If there are any other lines, which starts with "--", then it should be
      # another boundary id - or not.
      #
      # After 3.0.3, there are two kinds of types of boundary errors: strict and permissive.
      #
      # If multipart content contains the three necessary lines with correct order, but
      # there are one or more lines with "--", then parser returns with value 2 (non-zero).
      #
      # If some of the necessary lines (usually the start or end) misses, or the order
      # is wrong, then parser returns with value 1 (also a non-zero).
      #
      # You can choose, which one is what you need. The example below contains the
      # 'strict' mode, which means if there are any lines with start of "--", then
      # ModSecurity blocked the content. But the next, commented example contains
      # the 'permissive' mode, then you check only if the necessary lines exists in
      # correct order. Whit this, you can enable to upload PEM files (eg "----BEGIN.."),
      # or other text files, which contains eg. HTTP headers.
      #
      # The difference is only the operator - in strict mode (first) the content blocked
      # in case of any non-zero value. In permissive mode (second, commented) the
      # content blocked only if the value is explicit 1. If it 0 or 2, the content will
      # allowed.
      #

      #
      # See #1747 and #1924 for further information on the possible values for
      # MULTIPART_UNMATCHED_BOUNDARY.
      #
      SecRule MULTIPART_UNMATCHED_BOUNDARY "@eq 1" \
      "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"


      # PCRE Tuning
      # We want to avoid a potential RegEx DoS condition
      #
      SecPcreMatchLimit 1000
      SecPcreMatchLimitRecursion 1000

      # Some internal errors will set flags in TX and we will need to look for these.
      # All of these are prefixed with "MSC_".  The following flags currently exist:
      #
      # MSC_PCRE_LIMITS_EXCEEDED: PCRE match limits were exceeded.
      #
      SecRule TX:/^MSC_/ "!@streq 0" \
      "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"


      # -- Response body handling --------------------------------------------------

      # Allow ModSecurity to access response bodies.
      # You should have this directive enabled in order to identify errors
      # and data leakage issues.
      #
      # Do keep in mind that enabling this directive does increases both
      # memory consumption and response latency.
      #
      SecResponseBodyAccess On

      # Which response MIME types do you want to inspect? You should adjust the
      # configuration below to catch documents but avoid static files
      # (e.g., images and archives).
      #
      SecResponseBodyMimeType text/plain text/html text/xml

      # Buffer response bodies of up to 512 KB in length.
      SecResponseBodyLimit 524288

      # What happens when we encounter a response body larger than the configured
      # limit? By default, we process what we have and let the rest through.
      # That's somewhat less secure, but does not break any legitimate pages.
      #
      SecResponseBodyLimitAction ProcessPartial


      # -- Filesystem configuration ------------------------------------------------

      # The location where ModSecurity stores temporary files (for example, when
      # it needs to handle a file upload that is larger than the configured limit).
      #
      # This default setting is chosen due to all systems have /tmp available however,
      # this is less than ideal. It is recommended that you specify a location that's private.
      #
      SecTmpDir /tmp/

      # The location where ModSecurity will keep its persistent data.  This default setting
      # is chosen due to all systems have /tmp available however, it
      # too should be updated to a place that other users can't access.
      #
      SecDataDir /tmp/


      # -- Miscellaneous -----------------------------------------------------------

      # Use the most commonly used application/x-www-form-urlencoded parameter
      # separator. There's probably only one application somewhere that uses
      # something else so don't expect to change this value.
      #
      SecArgumentSeparator &

      # Settle on version 0 (zero) cookies, as that is what most applications
      # use. Using an incorrect cookie version may open your installation to
      # evasion attacks (against the rules that examine named cookies).
      #
      SecCookieFormat 0


      # Specify your Unicode Code Point.
      # This mapping is used by the t:urlDecodeUni transformation function
      # to properly map encoded data to your language. Properly setting
      # these directives helps to reduce false positives and negatives.
      #
    # SecUnicodeMapFile unicode.mapping 20127
  crs-setup.conf: |
    # Default: Anomaly Scoring mode, log to error log, log to ModSecurity audit log
    # - By default, offending requests are blocked with an error 403 response.
    # - To change the disruptive action, see RESPONSE-999-EXCEPTIONS.conf.example
    #   and review section 'Changing the Disruptive Action for Anomaly Mode'.
    # - In Apache, you can use ErrorDocument to show a friendly error page or
    #   perform a redirect: https://httpd.apache.org/docs/2.4/custom-error.html
    #
    SecDefaultAction "phase:1,log,auditlog,pass"
    SecDefaultAction "phase:2,log,auditlog,pass"

    #
    # -- [[ Paranoia Level Initialization ]] ---------------------------------------
    #
    #SecAction \
    #  "id:900000,\
    #   phase:1,\
    #   nolog,\
    #   pass,\
    #   t:none,\
    #   setvar:tx.paranoia_level=1"

    #SecAction \
    #  "id:900001,\
    #   phase:1,\
    #   nolog,\
    #   pass,\
    #   t:none,\
    #   setvar:tx.executing_paranoia_level=1"


    #
    # -- [[ Enforce Body Processor URLENCODED ]] -----------------------------------
    #
    #SecAction \
    #  "id:900010,\
    #   phase:1,\
    #   nolog,\
    #   pass,\
    #   t:none,\
    #   setvar:tx.enforce_bodyproc_urlencoded=1"


    #
    # -- [[ Anomaly Mode Severity Levels ]] ----------------------------------------
    #
    #SecAction \
    # "id:900100,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.critical_anomaly_score=5,\
    #  setvar:tx.error_anomaly_score=4,\
    #  setvar:tx.warning_anomaly_score=3,\
    #  setvar:tx.notice_anomaly_score=2"


    #
    # -- [[ Anomaly Mode Blocking Threshold Levels ]] ------------------------------
    #
    #SecAction \
    # "id:900110,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.inbound_anomaly_score_threshold=5,\
    #  setvar:tx.outbound_anomaly_score_threshold=4"

    #
    # -- [[ Application Specific Rule Exclusions ]] ----------------------------------------
    #
    #SecAction \
    # "id:900130,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.crs_exclusions_drupal=1,\
    #  setvar:tx.crs_exclusions_wordpress=1,\
    #  setvar:tx.crs_exclusions_nextcloud=1,\
    #  setvar:tx.crs_exclusions_dokuwiki=1,\
    #  setvar:tx.crs_exclusions_cpanel=1"

    #
    # -- [[ HTTP Policy Settings ]] ------------------------------------------------
    #
    #SecAction \
    # "id:900200,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.allowed_methods=GET HEAD POST OPTIONS'"

    # Content-Types that a client is allowed to send in a request.
    # Default: application/x-www-form-urlencoded|multipart/form-data|text/xml|\
    # application/xml|application/soap+xml|application/x-amf|application/json|\
    # application/octet-stream|text/plain
    # Uncomment this rule to change the default.
    #SecAction \
    # "id:900220,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/soap+xml|application/x-amf|application/json|application/octet-stream|text/plain'"

    # Content-Types charsets that a client is allowed to send in a request.
    # Default: utf-8|iso-8859-1|iso-8859-15|windows-1252
    # Uncomment this rule to change the default.
    # Use "|" to separate multiple charsets like in the rule defining
    # tx.allowed_request_content_type.
    #SecAction \
    # "id:900270,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.allowed_request_content_type_charset=utf-8|iso-8859-1|iso-8859-15|windows-1252'"

    # Allowed HTTP versions.
    # Default: HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0
    # Example for legacy clients: HTTP/0.9 HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0
    # Note that some web server versions use 'HTTP/2', some 'HTTP/2.0', so
    # we include both version strings by default.
    # Uncomment this rule to change the default.
    #SecAction \
    # "id:900230,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.allowed_http_versions=HTTP/1.0 HTTP/1.1 HTTP/2 HTTP/2.0'"

    # Forbidden file extensions.
    # Guards against unintended exposure of development/configuration files.
    # Default: .asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/
    # Example: .bak/ .config/ .conf/ .db/ .ini/ .log/ .old/ .pass/ .pdb/ .sql/
    # Uncomment this rule to change the default.
    #SecAction \
    # "id:900240,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/'"

    # Forbidden request headers.
    # Header names should be lowercase, enclosed by /slashes/ as delimiters.
    # Blocking Proxy header prevents 'httpoxy' vulnerability: https://httpoxy.org
    # Default: /proxy/ /lock-token/ /content-range/ /translate/ /if/
    # Uncomment this rule to change the default.
    #SecAction \
    # "id:900250,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.restricted_headers=/proxy/ /lock-token/ /content-range/ /translate/ /if/'"

    # File extensions considered static files.
    # Extensions include the dot, lowercase, enclosed by /slashes/ as delimiters.
    # Used in DoS protection rule. See section "Anti-Automation / DoS Protection".
    # Default: /.jpg/ /.jpeg/ /.png/ /.gif/ /.js/ /.css/ /.ico/ /.svg/ /.webp/
    # Uncomment this rule to change the default.
    #SecAction \
    # "id:900260,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.static_extensions=/.jpg/ /.jpeg/ /.png/ /.gif/ /.js/ /.css/ /.ico/ /.svg/ /.webp/'"


    #
    # -- [[ HTTP Argument/Upload Limits ]] -----------------------------------------
    #
    # Block request if number of arguments is too high
    # Default: unlimited
    # Example: 255
    # Uncomment this rule to set a limit.
    #SecAction \
    # "id:900300,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.max_num_args=255"

    # Block request if the length of any argument name is too high
    # Default: unlimited
    # Example: 100
    # Uncomment this rule to set a limit.
    #SecAction \
    # "id:900310,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.arg_name_length=100"

    # Block request if the length of any argument value is too high
    # Default: unlimited
    # Example: 400
    # Uncomment this rule to set a limit.
    #SecAction \
    # "id:900320,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.arg_length=400"

    # Block request if the total length of all combined arguments is too high
    # Default: unlimited
    # Example: 64000
    # Uncomment this rule to set a limit.
    #SecAction \
    # "id:900330,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.total_arg_length=64000"

    # Block request if the file size of any individual uploaded file is too high
    # Default: unlimited
    # Example: 1048576
    # Uncomment this rule to set a limit.
    #SecAction \
    # "id:900340,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.max_file_size=1048576"

    # Block request if the total size of all combined uploaded files is too high
    # Default: unlimited
    # Example: 1048576
    # Uncomment this rule to set a limit.
    #SecAction \
    # "id:900350,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.combined_file_sizes=1048576"


    #
    # -- [[ Easing In / Sampling Percentage ]] -------------------------------------
    #
    #SecAction "id:900400,\
    #  phase:1,\
    #  pass,\
    #  nolog,\
    #  setvar:tx.sampling_percentage=100"


    #
    # -- [[ Project Honey Pot HTTP Blacklist ]] ------------------------------------
    #
    #SecHttpBlKey XXXXXXXXXXXXXXXXX
    #SecAction "id:900500,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.block_search_ip=1,\
    #  setvar:tx.block_suspicious_ip=1,\
    #  setvar:tx.block_harvester_ip=1,\
    #  setvar:tx.block_spammer_ip=1"


    #
    # -=[ Block Countries ]=-
    #
    #SecAction \
    # "id:900600,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.high_risk_country_codes='"


    #
    # -- [[ Anti-Automation / DoS Protection ]] ------------------------------------
    #
    #SecAction \
    # "id:900700,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:'tx.dos_burst_time_slice=60',\
    #  setvar:'tx.dos_counter_threshold=100',\
    #  setvar:'tx.dos_block_timeout=600'"


    #
    # -- [[ Check UTF-8 encoding ]] ------------------------------------------------
    #
    #SecAction \
    # "id:900950,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.crs_validate_utf8_encoding=1"


    #
    # -- [[ Blocking Based on IP Reputation ]] ------------------------------------
    #
    #SecAction \
    # "id:900960,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.do_reput_block=1"
    #
    # Uncomment this rule to change the blocking time:
    # Default: 300 (5 minutes)
    #
    #SecAction \
    # "id:900970,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  setvar:tx.reput_block_duration=300"


    #
    # -- [[ Collection timeout ]] --------------------------------------------------
    #
    # Please keep this directive uncommented.
    # Default: 600 (10 minutes)
    SecCollectionTimeout 600


    #
    # -- [[ Debug Mode ]] ----------------------------------------------------------
    #
    #Include /path/to/crs/util/debug/RESPONSE-981-DEBUG.conf
    #SecRule REMOTE_ADDR "@ipMatch 192.168.1.100" \
    # "id:900980,\
    #  phase:1,\
    #  nolog,\
    #  pass,\
    #  t:none,\
    #  ctl:ruleEngine=DetectionOnly,\
    #  setvar:tx.crs_debug_mode=1"

    SecAction \
     "id:900990,\
      phase:1,\
      nolog,\
      pass,\
      t:none,\
      setvar:tx.crs_setup_version=310"
