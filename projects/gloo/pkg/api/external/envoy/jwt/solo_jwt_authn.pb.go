// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/gloo/api/external/envoy/jwt/solo_jwt_authn.proto

package jwt

import (
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SoloJwtAuthnPerRoute struct {
	Requirement     string                                          `protobuf:"bytes,1,opt,name=requirement,proto3" json:"requirement,omitempty"`
	ClaimsToHeaders map[string]*SoloJwtAuthnPerRoute_ClaimToHeaders `protobuf:"bytes,2,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// clear the route cache if claims were added to the header
	ClearRouteCache      bool     `protobuf:"varint,3,opt,name=clear_route_cache,json=clearRouteCache,proto3" json:"clear_route_cache,omitempty"`
	PayloadInMetadata    string   `protobuf:"bytes,4,opt,name=payload_in_metadata,json=payloadInMetadata,proto3" json:"payload_in_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoloJwtAuthnPerRoute) Reset()         { *m = SoloJwtAuthnPerRoute{} }
func (m *SoloJwtAuthnPerRoute) String() string { return proto.CompactTextString(m) }
func (*SoloJwtAuthnPerRoute) ProtoMessage()    {}
func (*SoloJwtAuthnPerRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac08c47c2da36e62, []int{0}
}
func (m *SoloJwtAuthnPerRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoloJwtAuthnPerRoute.Unmarshal(m, b)
}
func (m *SoloJwtAuthnPerRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoloJwtAuthnPerRoute.Marshal(b, m, deterministic)
}
func (m *SoloJwtAuthnPerRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoloJwtAuthnPerRoute.Merge(m, src)
}
func (m *SoloJwtAuthnPerRoute) XXX_Size() int {
	return xxx_messageInfo_SoloJwtAuthnPerRoute.Size(m)
}
func (m *SoloJwtAuthnPerRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_SoloJwtAuthnPerRoute.DiscardUnknown(m)
}

var xxx_messageInfo_SoloJwtAuthnPerRoute proto.InternalMessageInfo

func (m *SoloJwtAuthnPerRoute) GetRequirement() string {
	if m != nil {
		return m.Requirement
	}
	return ""
}

func (m *SoloJwtAuthnPerRoute) GetClaimsToHeaders() map[string]*SoloJwtAuthnPerRoute_ClaimToHeaders {
	if m != nil {
		return m.ClaimsToHeaders
	}
	return nil
}

func (m *SoloJwtAuthnPerRoute) GetClearRouteCache() bool {
	if m != nil {
		return m.ClearRouteCache
	}
	return false
}

func (m *SoloJwtAuthnPerRoute) GetPayloadInMetadata() string {
	if m != nil {
		return m.PayloadInMetadata
	}
	return ""
}

// If this is specified, one of the claims will be copied to a header
// and the route cache will be cleared.
type SoloJwtAuthnPerRoute_ClaimToHeader struct {
	Claim                string   `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Header               string   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Append               bool     `protobuf:"varint,3,opt,name=append,proto3" json:"append,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoloJwtAuthnPerRoute_ClaimToHeader) Reset()         { *m = SoloJwtAuthnPerRoute_ClaimToHeader{} }
func (m *SoloJwtAuthnPerRoute_ClaimToHeader) String() string { return proto.CompactTextString(m) }
func (*SoloJwtAuthnPerRoute_ClaimToHeader) ProtoMessage()    {}
func (*SoloJwtAuthnPerRoute_ClaimToHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac08c47c2da36e62, []int{0, 0}
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeader.Unmarshal(m, b)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeader.Marshal(b, m, deterministic)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeader.Merge(m, src)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeader) XXX_Size() int {
	return xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeader.Size(m)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeader proto.InternalMessageInfo

func (m *SoloJwtAuthnPerRoute_ClaimToHeader) GetClaim() string {
	if m != nil {
		return m.Claim
	}
	return ""
}

func (m *SoloJwtAuthnPerRoute_ClaimToHeader) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *SoloJwtAuthnPerRoute_ClaimToHeader) GetAppend() bool {
	if m != nil {
		return m.Append
	}
	return false
}

type SoloJwtAuthnPerRoute_ClaimToHeaders struct {
	Claims               []*SoloJwtAuthnPerRoute_ClaimToHeader `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) Reset()         { *m = SoloJwtAuthnPerRoute_ClaimToHeaders{} }
func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) String() string { return proto.CompactTextString(m) }
func (*SoloJwtAuthnPerRoute_ClaimToHeaders) ProtoMessage()    {}
func (*SoloJwtAuthnPerRoute_ClaimToHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac08c47c2da36e62, []int{0, 1}
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeaders.Unmarshal(m, b)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeaders.Marshal(b, m, deterministic)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeaders.Merge(m, src)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) XXX_Size() int {
	return xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeaders.Size(m)
}
func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_SoloJwtAuthnPerRoute_ClaimToHeaders proto.InternalMessageInfo

func (m *SoloJwtAuthnPerRoute_ClaimToHeaders) GetClaims() []*SoloJwtAuthnPerRoute_ClaimToHeader {
	if m != nil {
		return m.Claims
	}
	return nil
}

func init() {
	proto.RegisterType((*SoloJwtAuthnPerRoute)(nil), "envoy.config.filter.http.solo_jwt_authn.v2.SoloJwtAuthnPerRoute")
	proto.RegisterMapType((map[string]*SoloJwtAuthnPerRoute_ClaimToHeaders)(nil), "envoy.config.filter.http.solo_jwt_authn.v2.SoloJwtAuthnPerRoute.ClaimsToHeadersEntry")
	proto.RegisterType((*SoloJwtAuthnPerRoute_ClaimToHeader)(nil), "envoy.config.filter.http.solo_jwt_authn.v2.SoloJwtAuthnPerRoute.ClaimToHeader")
	proto.RegisterType((*SoloJwtAuthnPerRoute_ClaimToHeaders)(nil), "envoy.config.filter.http.solo_jwt_authn.v2.SoloJwtAuthnPerRoute.ClaimToHeaders")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-projects/projects/gloo/api/external/envoy/jwt/solo_jwt_authn.proto", fileDescriptor_ac08c47c2da36e62)
}

var fileDescriptor_ac08c47c2da36e62 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x6b, 0x13, 0x41,
	0x14, 0x67, 0x93, 0x36, 0xe8, 0x04, 0x3f, 0x32, 0x06, 0x5d, 0x72, 0x0a, 0x9e, 0x42, 0xc1, 0x59,
	0x88, 0x97, 0xe2, 0xcd, 0x16, 0xc1, 0x0a, 0x6a, 0x89, 0xf6, 0xd2, 0xcb, 0x32, 0xdd, 0x7d, 0xc9,
	0x4e, 0x3a, 0x99, 0x37, 0xce, 0xbe, 0x4d, 0xb2, 0x47, 0xff, 0x06, 0x6f, 0xfe, 0xb3, 0xca, 0xce,
	0x6c, 0xc4, 0x48, 0x85, 0x16, 0x7a, 0xda, 0xf7, 0x35, 0xbf, 0x8f, 0xc7, 0x3e, 0x76, 0xb9, 0x50,
	0x54, 0x54, 0x57, 0x22, 0xc3, 0x55, 0x52, 0xa2, 0xc6, 0x57, 0x0a, 0xc3, 0xd7, 0x3a, 0x5c, 0x42,
	0x46, 0x65, 0xf2, 0x27, 0x58, 0x68, 0xc4, 0x44, 0x5a, 0x95, 0xc0, 0x96, 0xc0, 0x19, 0xa9, 0x13,
	0x30, 0x6b, 0xac, 0x93, 0xe5, 0x86, 0xfc, 0x93, 0x74, 0xb9, 0xa1, 0x54, 0x56, 0x54, 0x18, 0x61,
	0x1d, 0x12, 0xf2, 0x23, 0xdf, 0x17, 0x19, 0x9a, 0xb9, 0x5a, 0x88, 0xb9, 0xd2, 0x04, 0x4e, 0x14,
	0x44, 0x56, 0xfc, 0x33, 0xbe, 0x9e, 0x8e, 0x5e, 0xac, 0xa5, 0x56, 0xb9, 0x24, 0x48, 0x76, 0x41,
	0x00, 0x79, 0xf9, 0xeb, 0x80, 0x0d, 0xbf, 0xa0, 0xc6, 0x0f, 0x1b, 0x7a, 0xdb, 0x0c, 0x9f, 0x83,
	0x9b, 0x61, 0x45, 0xc0, 0xc7, 0xac, 0xef, 0xe0, 0x5b, 0xa5, 0x1c, 0xac, 0xc0, 0x50, 0x1c, 0x8d,
	0xa3, 0xc9, 0xc3, 0xd9, 0xdf, 0x25, 0xfe, 0x3d, 0x62, 0x83, 0x4c, 0x4b, 0xb5, 0x2a, 0x53, 0xc2,
	0xb4, 0x00, 0x99, 0x83, 0x2b, 0xe3, 0xce, 0xb8, 0x3b, 0xe9, 0x4f, 0x2f, 0xc4, 0xed, 0xc5, 0x89,
	0x9b, 0xf8, 0xc5, 0xa9, 0x47, 0xfe, 0x8a, 0xef, 0x03, 0xee, 0x3b, 0x43, 0xae, 0x9e, 0x3d, 0xc9,
	0xf6, 0xab, 0xfc, 0xa8, 0x91, 0x00, 0xd2, 0xa5, 0xae, 0x79, 0x94, 0x66, 0x32, 0x2b, 0x20, 0xee,
	0x8e, 0xa3, 0xc9, 0x83, 0x66, 0x16, 0x64, 0x00, 0x3b, 0x6d, 0xca, 0x5c, 0xb0, 0x67, 0x56, 0xd6,
	0x1a, 0x65, 0x9e, 0x2a, 0x93, 0xae, 0x80, 0x64, 0x2e, 0x49, 0xc6, 0x07, 0xde, 0xd9, 0xa0, 0x6d,
	0x9d, 0x99, 0x8f, 0x6d, 0x63, 0x74, 0xc1, 0x1e, 0x79, 0x11, 0x3b, 0x36, 0x3e, 0x64, 0x87, 0x9e,
	0xbf, 0x5d, 0x46, 0x48, 0xf8, 0x73, 0xd6, 0x0b, 0xde, 0xe3, 0x8e, 0x2f, 0xb7, 0x59, 0x53, 0x97,
	0xd6, 0x82, 0xc9, 0x5b, 0x3d, 0x6d, 0x36, 0xda, 0xb2, 0xc7, 0x7b, 0xb0, 0x25, 0x9f, 0xb3, 0x5e,
	0xf0, 0x15, 0x47, 0x7e, 0x79, 0x9f, 0xee, 0x67, 0x79, 0x3b, 0x82, 0x59, 0x8b, 0x3e, 0xfa, 0x11,
	0xb1, 0xe1, 0x4d, 0x6b, 0xe5, 0x4f, 0x59, 0xf7, 0x1a, 0xea, 0xd6, 0x56, 0x13, 0x72, 0x60, 0x87,
	0x6b, 0xa9, 0x2b, 0xf0, 0x9e, 0xfa, 0xd3, 0xcf, 0xf7, 0xab, 0xa8, 0x9c, 0x05, 0xf4, 0x37, 0x9d,
	0xe3, 0xe8, 0xe4, 0x67, 0xc4, 0x8e, 0x15, 0x06, 0x02, 0xeb, 0x70, 0x5b, 0xdf, 0x81, 0xeb, 0x64,
	0xb0, 0x47, 0xd6, 0xfc, 0xd1, 0xe7, 0xd1, 0xe5, 0xd9, 0x1d, 0x8f, 0xce, 0x5e, 0x2f, 0xfe, 0x73,
	0x78, 0x57, 0x3d, 0x7f, 0x25, 0xaf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x98, 0x9b, 0x72, 0xcb,
	0xc8, 0x03, 0x00, 0x00,
}
