// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugins/consul/consul.proto

package consul // import "github.com/solo-io/solo-projects/projects/gloo/pkg/api/v1/plugins/consul"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import plugins "github.com/solo-io/solo-projects/projects/gloo/pkg/api/v1/plugins"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Upstream Spec for Consul Upstreams
// consul Upstreams represent a set of one or more addressable pods for a consul Service
// the Gloo consul Upstream maps to a single service port. Because consul Services support mulitple ports,
// Gloo requires that a different upstream be created for each port
// consul Upstreams are typically generated automatically by Gloo from the consul API
type UpstreamSpec struct {
	// The name of the Consul Service
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The list of service tags Gloo should search for on a service instance
	// before deciding whether or not to include the instance as part of this
	// upstream
	ServiceTags []string `protobuf:"bytes,2,rep,name=service_tags,json=serviceTags" json:"service_tags,omitempty"`
	//     An optional Service Spec describing the service listening at this address
	ServiceSpec *plugins.ServiceSpec `protobuf:"bytes,3,opt,name=service_spec,json=serviceSpec" json:"service_spec,omitempty"`
	// is this consul service connect enabled.
	ConnectEnabled       bool     `protobuf:"varint,4,opt,name=connect_enabled,json=connectEnabled,proto3" json:"connect_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamSpec) Reset()         { *m = UpstreamSpec{} }
func (m *UpstreamSpec) String() string { return proto.CompactTextString(m) }
func (*UpstreamSpec) ProtoMessage()    {}
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_consul_18ef201fe1813bdd, []int{0}
}
func (m *UpstreamSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamSpec.Unmarshal(m, b)
}
func (m *UpstreamSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamSpec.Marshal(b, m, deterministic)
}
func (dst *UpstreamSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamSpec.Merge(dst, src)
}
func (m *UpstreamSpec) XXX_Size() int {
	return xxx_messageInfo_UpstreamSpec.Size(m)
}
func (m *UpstreamSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamSpec proto.InternalMessageInfo

func (m *UpstreamSpec) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UpstreamSpec) GetServiceTags() []string {
	if m != nil {
		return m.ServiceTags
	}
	return nil
}

func (m *UpstreamSpec) GetServiceSpec() *plugins.ServiceSpec {
	if m != nil {
		return m.ServiceSpec
	}
	return nil
}

func (m *UpstreamSpec) GetConnectEnabled() bool {
	if m != nil {
		return m.ConnectEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*UpstreamSpec)(nil), "consul.plugins.gloo.solo.io.UpstreamSpec")
}
func (this *UpstreamSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamSpec)
	if !ok {
		that2, ok := that.(UpstreamSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if len(this.ServiceTags) != len(that1.ServiceTags) {
		return false
	}
	for i := range this.ServiceTags {
		if this.ServiceTags[i] != that1.ServiceTags[i] {
			return false
		}
	}
	if !this.ServiceSpec.Equal(that1.ServiceSpec) {
		return false
	}
	if this.ConnectEnabled != that1.ConnectEnabled {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("plugins/consul/consul.proto", fileDescriptor_consul_18ef201fe1813bdd) }

var fileDescriptor_consul_18ef201fe1813bdd = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x89, 0x15, 0xd1, 0x6d, 0x51, 0x58, 0x3c, 0x2c, 0x2d, 0xc8, 0xd6, 0x8b, 0x7b, 0x31,
	0x41, 0x7d, 0x03, 0x51, 0xf0, 0x54, 0xa4, 0xd5, 0x8b, 0x97, 0x92, 0x8d, 0x43, 0x8c, 0x66, 0x33,
	0x61, 0x93, 0xed, 0x33, 0xf9, 0x1e, 0xbe, 0x89, 0x4f, 0x22, 0xd9, 0xec, 0xd6, 0x45, 0xbc, 0xf4,
	0x34, 0x93, 0x9f, 0x2f, 0xff, 0x4c, 0xfe, 0x24, 0x33, 0xab, 0x1b, 0xa9, 0x8c, 0x63, 0x02, 0x8d,
	0x6b, 0x74, 0x57, 0xa8, 0xad, 0xd1, 0x63, 0x3a, 0xeb, 0x4f, 0x91, 0xa1, 0x52, 0x23, 0x52, 0x87,
	0x1a, 0xa9, 0xc2, 0xe9, 0xa9, 0x44, 0x89, 0x2d, 0xc7, 0x42, 0x17, 0xaf, 0x4c, 0x1f, 0xa5, 0xf2,
	0x6f, 0x4d, 0x49, 0x05, 0x56, 0x2c, 0x90, 0x97, 0x0a, 0x63, 0xb5, 0x35, 0xbe, 0x83, 0xf0, 0x8e,
	0x6d, 0x9b, 0xe0, 0xc6, 0xb8, 0x55, 0x6c, 0x73, 0xc5, 0xfa, 0x2d, 0x1c, 0xd4, 0x1b, 0x25, 0x60,
	0xed, 0x2c, 0x88, 0xe8, 0x78, 0xfe, 0x45, 0x92, 0xc9, 0xb3, 0x75, 0xbe, 0x06, 0x5e, 0xad, 0x2c,
	0x88, 0x74, 0x9e, 0x4c, 0x7a, 0xcc, 0xf0, 0x0a, 0x32, 0x92, 0x93, 0xe2, 0x68, 0x39, 0xee, 0xb4,
	0x05, 0xaf, 0x60, 0x88, 0x78, 0x2e, 0x5d, 0xb6, 0x97, 0x8f, 0x06, 0xc8, 0x13, 0x97, 0x2e, 0xbd,
	0xfb, 0x45, 0xc2, 0xb0, 0x6c, 0x94, 0x93, 0x62, 0x7c, 0x3d, 0xff, 0xf7, 0xad, 0x74, 0x15, 0xc9,
	0x30, 0x7e, 0xeb, 0xd2, 0xee, 0x72, 0x91, 0x9c, 0x08, 0x34, 0x06, 0x84, 0x5f, 0x83, 0xe1, 0xa5,
	0x86, 0xd7, 0x6c, 0x3f, 0x27, 0xc5, 0xe1, 0xf2, 0xb8, 0x93, 0xef, 0xa3, 0x7a, 0xbb, 0xf8, 0xfc,
	0x3e, 0x23, 0x2f, 0x0f, 0x3b, 0xa6, 0x63, 0x3f, 0xe4, 0xdf, 0x84, 0xe2, 0x97, 0x94, 0x07, 0x6d,
	0x38, 0x37, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x66, 0x4c, 0xba, 0xbb, 0xc0, 0x01, 0x00, 0x00,
}
