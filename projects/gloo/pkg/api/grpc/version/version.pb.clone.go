// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/grpc/version/version.proto

package version

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ServerVersion) Clone() proto.Message {
	var target *ServerVersion
	if m == nil {
		return target
	}
	target = &ServerVersion{}

	target.Type = m.GetType()

	target.Enterprise = m.GetEnterprise()

	switch m.VersionType.(type) {

	case *ServerVersion_Kubernetes:

		if h, ok := interface{}(m.GetKubernetes()).(clone.Cloner); ok {
			target.VersionType = &ServerVersion_Kubernetes{
				Kubernetes: h.Clone().(*Kubernetes),
			}
		} else {
			target.VersionType = &ServerVersion_Kubernetes{
				Kubernetes: proto.Clone(m.GetKubernetes()).(*Kubernetes),
			}
		}

	}

	return target
}

// Clone function
func (m *Kubernetes) Clone() proto.Message {
	var target *Kubernetes
	if m == nil {
		return target
	}
	target = &Kubernetes{}

	if m.GetContainers() != nil {
		target.Containers = make([]*Kubernetes_Container, len(m.GetContainers()))
		for idx, v := range m.GetContainers() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Containers[idx] = h.Clone().(*Kubernetes_Container)
			} else {
				target.Containers[idx] = proto.Clone(v).(*Kubernetes_Container)
			}

		}
	}

	target.Namespace = m.GetNamespace()

	return target
}

// Clone function
func (m *ClientVersion) Clone() proto.Message {
	var target *ClientVersion
	if m == nil {
		return target
	}
	target = &ClientVersion{}

	target.Version = m.GetVersion()

	return target
}

// Clone function
func (m *KubernetesClusterVersion) Clone() proto.Message {
	var target *KubernetesClusterVersion
	if m == nil {
		return target
	}
	target = &KubernetesClusterVersion{}

	target.Major = m.GetMajor()

	target.Minor = m.GetMinor()

	target.GitVersion = m.GetGitVersion()

	target.BuildDate = m.GetBuildDate()

	target.Platform = m.GetPlatform()

	return target
}

// Clone function
func (m *Status) Clone() proto.Message {
	var target *Status
	if m == nil {
		return target
	}
	target = &Status{}

	switch m.Status.(type) {

	case *Status_Ok:

		if h, ok := interface{}(m.GetOk()).(clone.Cloner); ok {
			target.Status = &Status_Ok{
				Ok: h.Clone().(*Status_OkStatus),
			}
		} else {
			target.Status = &Status_Ok{
				Ok: proto.Clone(m.GetOk()).(*Status_OkStatus),
			}
		}

	case *Status_Error:

		if h, ok := interface{}(m.GetError()).(clone.Cloner); ok {
			target.Status = &Status_Error{
				Error: h.Clone().(*Status_ErrorStatus),
			}
		} else {
			target.Status = &Status_Error{
				Error: proto.Clone(m.GetError()).(*Status_ErrorStatus),
			}
		}

	}

	return target
}

// Clone function
func (m *Version) Clone() proto.Message {
	var target *Version
	if m == nil {
		return target
	}
	target = &Version{}

	if h, ok := interface{}(m.GetClient()).(clone.Cloner); ok {
		target.Client = h.Clone().(*ClientVersion)
	} else {
		target.Client = proto.Clone(m.GetClient()).(*ClientVersion)
	}

	if m.GetServer() != nil {
		target.Server = make([]*ServerVersion, len(m.GetServer()))
		for idx, v := range m.GetServer() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Server[idx] = h.Clone().(*ServerVersion)
			} else {
				target.Server[idx] = proto.Clone(v).(*ServerVersion)
			}

		}
	}

	if h, ok := interface{}(m.GetKubernetesCluster()).(clone.Cloner); ok {
		target.KubernetesCluster = h.Clone().(*KubernetesClusterVersion)
	} else {
		target.KubernetesCluster = proto.Clone(m.GetKubernetesCluster()).(*KubernetesClusterVersion)
	}

	if h, ok := interface{}(m.GetStatus()).(clone.Cloner); ok {
		target.Status = h.Clone().(*Status)
	} else {
		target.Status = proto.Clone(m.GetStatus()).(*Status)
	}

	return target
}

// Clone function
func (m *Kubernetes_Container) Clone() proto.Message {
	var target *Kubernetes_Container
	if m == nil {
		return target
	}
	target = &Kubernetes_Container{}

	target.Tag = m.GetTag()

	target.Name = m.GetName()

	target.Registry = m.GetRegistry()

	target.OssTag = m.GetOssTag()

	return target
}

// Clone function
func (m *Status_OkStatus) Clone() proto.Message {
	var target *Status_OkStatus
	if m == nil {
		return target
	}
	target = &Status_OkStatus{}

	return target
}

// Clone function
func (m *Status_ErrorStatus) Clone() proto.Message {
	var target *Status_ErrorStatus
	if m == nil {
		return target
	}
	target = &Status_ErrorStatus{}

	if m.GetWarnings() != nil {
		target.Warnings = make([]string, len(m.GetWarnings()))
		for idx, v := range m.GetWarnings() {

			target.Warnings[idx] = v

		}
	}

	if m.GetErrors() != nil {
		target.Errors = make([]string, len(m.GetErrors()))
		for idx, v := range m.GetErrors() {

			target.Errors[idx] = v

		}
	}

	return target
}
