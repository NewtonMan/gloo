// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/grpc/version/version.proto

package version

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ServerVersion) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ServerVersion)
	if !ok {
		that2, ok := that.(ServerVersion)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetType() != target.GetType() {
		return false
	}

	if m.GetEnterprise() != target.GetEnterprise() {
		return false
	}

	switch m.VersionType.(type) {

	case *ServerVersion_Kubernetes:
		if _, ok := target.VersionType.(*ServerVersion_Kubernetes); !ok {
			return false
		}

		if h, ok := interface{}(m.GetKubernetes()).(equality.Equalizer); ok {
			if !h.Equal(target.GetKubernetes()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetKubernetes(), target.GetKubernetes()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.VersionType != target.VersionType {
			return false
		}
	}

	return true
}

// Equal function
func (m *Kubernetes) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Kubernetes)
	if !ok {
		that2, ok := that.(Kubernetes)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetContainers()) != len(target.GetContainers()) {
		return false
	}
	for idx, v := range m.GetContainers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetContainers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetContainers()[idx]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ClientVersion) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ClientVersion)
	if !ok {
		that2, ok := that.(ClientVersion)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetVersion(), target.GetVersion()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *KubernetesClusterVersion) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*KubernetesClusterVersion)
	if !ok {
		that2, ok := that.(KubernetesClusterVersion)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetMajor(), target.GetMajor()) != 0 {
		return false
	}

	if strings.Compare(m.GetMinor(), target.GetMinor()) != 0 {
		return false
	}

	if strings.Compare(m.GetGitVersion(), target.GetGitVersion()) != 0 {
		return false
	}

	if strings.Compare(m.GetBuildDate(), target.GetBuildDate()) != 0 {
		return false
	}

	if strings.Compare(m.GetPlatform(), target.GetPlatform()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *Status) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Status.(type) {

	case *Status_Ok:
		if _, ok := target.Status.(*Status_Ok); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOk()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOk()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOk(), target.GetOk()) {
				return false
			}
		}

	case *Status_Error:
		if _, ok := target.Status.(*Status_Error); !ok {
			return false
		}

		if h, ok := interface{}(m.GetError()).(equality.Equalizer); ok {
			if !h.Equal(target.GetError()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetError(), target.GetError()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Status != target.Status {
			return false
		}
	}

	return true
}

// Equal function
func (m *Version) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetClient()).(equality.Equalizer); ok {
		if !h.Equal(target.GetClient()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetClient(), target.GetClient()) {
			return false
		}
	}

	if len(m.GetServer()) != len(target.GetServer()) {
		return false
	}
	for idx, v := range m.GetServer() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetServer()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetServer()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetKubernetesCluster()).(equality.Equalizer); ok {
		if !h.Equal(target.GetKubernetesCluster()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetKubernetesCluster(), target.GetKubernetesCluster()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStatus()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStatus()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStatus(), target.GetStatus()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *Kubernetes_Container) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Kubernetes_Container)
	if !ok {
		that2, ok := that.(Kubernetes_Container)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetTag(), target.GetTag()) != 0 {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if strings.Compare(m.GetRegistry(), target.GetRegistry()) != 0 {
		return false
	}

	if strings.Compare(m.GetOssTag(), target.GetOssTag()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *Status_OkStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Status_OkStatus)
	if !ok {
		that2, ok := that.(Status_OkStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *Status_ErrorStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Status_ErrorStatus)
	if !ok {
		that2, ok := that.(Status_ErrorStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetWarnings()) != len(target.GetWarnings()) {
		return false
	}
	for idx, v := range m.GetWarnings() {

		if strings.Compare(v, target.GetWarnings()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetErrors()) != len(target.GetErrors()) {
		return false
	}
	for idx, v := range m.GetErrors() {

		if strings.Compare(v, target.GetErrors()[idx]) != 0 {
			return false
		}

	}

	return true
}
