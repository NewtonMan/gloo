// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-kit/pkg/api/v2/reporter (interfaces: Reporter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	reporter "github.com/solo-io/solo-kit/pkg/api/v2/reporter"
)

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// WriteReports mocks base method
func (m *MockReporter) WriteReports(arg0 context.Context, arg1 reporter.ResourceReports, arg2 map[string]*core.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReports", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteReports indicates an expected call of WriteReports
func (mr *MockReporterMockRecorder) WriteReports(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReports", reflect.TypeOf((*MockReporter)(nil).WriteReports), arg0, arg1, arg2)
}
