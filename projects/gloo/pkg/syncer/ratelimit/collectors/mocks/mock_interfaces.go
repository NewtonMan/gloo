// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_collectors is a generated GoMock package.
package mock_collectors

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	enterprise "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise"
	reporter "github.com/solo-io/solo-kit/pkg/api/v2/reporter"
	collectors "github.com/solo-io/solo-projects/projects/gloo/pkg/syncer/ratelimit/collectors"
	zap "go.uber.org/zap"
)

// MockConfigCollector is a mock of ConfigCollector interface
type MockConfigCollector struct {
	ctrl     *gomock.Controller
	recorder *MockConfigCollectorMockRecorder
}

// MockConfigCollectorMockRecorder is the mock recorder for MockConfigCollector
type MockConfigCollectorMockRecorder struct {
	mock *MockConfigCollector
}

// NewMockConfigCollector creates a new mock instance
func NewMockConfigCollector(ctrl *gomock.Controller) *MockConfigCollector {
	mock := &MockConfigCollector{ctrl: ctrl}
	mock.recorder = &MockConfigCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigCollector) EXPECT() *MockConfigCollectorMockRecorder {
	return m.recorder
}

// ProcessVirtualHost mocks base method
func (m *MockConfigCollector) ProcessVirtualHost(virtualHost *v1.VirtualHost, proxy *v1.Proxy, reports reporter.ResourceReports) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessVirtualHost", virtualHost, proxy, reports)
}

// ProcessVirtualHost indicates an expected call of ProcessVirtualHost
func (mr *MockConfigCollectorMockRecorder) ProcessVirtualHost(virtualHost, proxy, reports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVirtualHost", reflect.TypeOf((*MockConfigCollector)(nil).ProcessVirtualHost), virtualHost, proxy, reports)
}

// ProcessRoute mocks base method
func (m *MockConfigCollector) ProcessRoute(route *v1.Route, virtualHost *v1.VirtualHost, proxy *v1.Proxy, reports reporter.ResourceReports) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessRoute", route, virtualHost, proxy, reports)
}

// ProcessRoute indicates an expected call of ProcessRoute
func (mr *MockConfigCollectorMockRecorder) ProcessRoute(route, virtualHost, proxy, reports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRoute", reflect.TypeOf((*MockConfigCollector)(nil).ProcessRoute), route, virtualHost, proxy, reports)
}

// ToXdsConfiguration mocks base method
func (m *MockConfigCollector) ToXdsConfiguration() (*enterprise.RateLimitConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToXdsConfiguration")
	ret0, _ := ret[0].(*enterprise.RateLimitConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToXdsConfiguration indicates an expected call of ToXdsConfiguration
func (mr *MockConfigCollectorMockRecorder) ToXdsConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToXdsConfiguration", reflect.TypeOf((*MockConfigCollector)(nil).ToXdsConfiguration))
}

// MockConfigCollectorFactory is a mock of ConfigCollectorFactory interface
type MockConfigCollectorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConfigCollectorFactoryMockRecorder
}

// MockConfigCollectorFactoryMockRecorder is the mock recorder for MockConfigCollectorFactory
type MockConfigCollectorFactoryMockRecorder struct {
	mock *MockConfigCollectorFactory
}

// NewMockConfigCollectorFactory creates a new mock instance
func NewMockConfigCollectorFactory(ctrl *gomock.Controller) *MockConfigCollectorFactory {
	mock := &MockConfigCollectorFactory{ctrl: ctrl}
	mock.recorder = &MockConfigCollectorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigCollectorFactory) EXPECT() *MockConfigCollectorFactoryMockRecorder {
	return m.recorder
}

// MakeInstance mocks base method
func (m *MockConfigCollectorFactory) MakeInstance(typ collectors.CollectorType, snapshot *v1.ApiSnapshot, logger *zap.SugaredLogger) (collectors.ConfigCollector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeInstance", typ, snapshot, logger)
	ret0, _ := ret[0].(collectors.ConfigCollector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeInstance indicates an expected call of MakeInstance
func (mr *MockConfigCollectorFactoryMockRecorder) MakeInstance(typ, snapshot, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeInstance", reflect.TypeOf((*MockConfigCollectorFactory)(nil).MakeInstance), typ, snapshot, logger)
}
