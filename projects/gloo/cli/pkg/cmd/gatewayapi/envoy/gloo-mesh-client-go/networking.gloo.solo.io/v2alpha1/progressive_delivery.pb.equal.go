// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2alpha1/progressive_delivery.proto

package v2alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ProgressiveDeliverySpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProgressiveDeliverySpec)
	if !ok {
		that2, ok := that.(ProgressiveDeliverySpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRouteTableRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRouteTableRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRouteTableRef(), target.GetRouteTableRef()) {
			return false
		}
	}

	if len(m.GetVirtualServicePatch()) != len(target.GetVirtualServicePatch()) {
		return false
	}
	for idx, v := range m.GetVirtualServicePatch() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetVirtualServicePatch()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetVirtualServicePatch()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ProgressiveDeliveryStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProgressiveDeliveryStatus)
	if !ok {
		that2, ok := that.(ProgressiveDeliveryStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetCommon()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCommon()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCommon(), target.GetCommon()) {
			return false
		}
	}

	if len(m.GetPatchedVirtualServices()) != len(target.GetPatchedVirtualServices()) {
		return false
	}
	for idx, v := range m.GetPatchedVirtualServices() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPatchedVirtualServices()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPatchedVirtualServices()[idx]) {
				return false
			}
		}

	}

	if len(m.GetFailedToPatchVirtualServices()) != len(target.GetFailedToPatchVirtualServices()) {
		return false
	}
	for idx, v := range m.GetFailedToPatchVirtualServices() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetFailedToPatchVirtualServices()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetFailedToPatchVirtualServices()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *Destination) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*Destination)
	if !ok {
		that2, ok := that.(Destination)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetHost(), target.GetHost()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetSubset()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSubset()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSubset(), target.GetSubset()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPort()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPort()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPort(), target.GetPort()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *SubsetSelector) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SubsetSelector)
	if !ok {
		that2, ok := that.(SubsetSelector)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for k, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ProgressiveDeliverySpec_VirtualServiceRoute) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProgressiveDeliverySpec_VirtualServiceRoute)
	if !ok {
		that2, ok := that.(ProgressiveDeliverySpec_VirtualServiceRoute)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetName(), target.GetName()) != 0 {
		return false
	}

	if len(m.GetRoute()) != len(target.GetRoute()) {
		return false
	}
	for idx, v := range m.GetRoute() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetRoute()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetRoute()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ProgressiveDeliverySpec_HttpRouteDestination) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ProgressiveDeliverySpec_HttpRouteDestination)
	if !ok {
		that2, ok := that.(ProgressiveDeliverySpec_HttpRouteDestination)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetDestination()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDestination()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDestination(), target.GetDestination()) {
			return false
		}
	}

	if m.GetWeight() != target.GetWeight() {
		return false
	}

	return true
}
