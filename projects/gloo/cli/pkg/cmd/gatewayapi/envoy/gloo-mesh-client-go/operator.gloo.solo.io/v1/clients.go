// Code generated by skv2. DO NOT EDIT.

package v1

import (
	"context"

	operator_gloo_solo_io_v1 "github.com/solo-io/gloo-operator/api/v1"
	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the operator.gloo.solo.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the operator.gloo.solo.io/v1 APIs
type Clientset interface {
	// clienset for the operator.gloo.solo.io/v1/v1 APIs
	ServiceMeshControllers() ServiceMeshControllerClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := operator_gloo_solo_io_v1.SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the operator.gloo.solo.io/v1/v1 APIs
func (c *clientSet) ServiceMeshControllers() ServiceMeshControllerClient {
	return NewServiceMeshControllerClient(c.client)
}

// Reader knows how to read and list ServiceMeshControllers.
type ServiceMeshControllerReader interface {
	// Get retrieves a ServiceMeshController for the given object key
	GetServiceMeshController(ctx context.Context, key client.ObjectKey) (*operator_gloo_solo_io_v1.ServiceMeshController, error)

	// List retrieves list of ServiceMeshControllers for a given namespace and list options.
	ListServiceMeshController(ctx context.Context, opts ...client.ListOption) (*operator_gloo_solo_io_v1.ServiceMeshControllerList, error)
}

// ServiceMeshControllerTransitionFunction instructs the ServiceMeshControllerWriter how to transition between an existing
// ServiceMeshController object and a desired on an Upsert
type ServiceMeshControllerTransitionFunction func(existing, desired *operator_gloo_solo_io_v1.ServiceMeshController) error

// Writer knows how to create, delete, and update ServiceMeshControllers.
type ServiceMeshControllerWriter interface {
	// Create saves the ServiceMeshController object.
	CreateServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, opts ...client.CreateOption) error

	// Delete deletes the ServiceMeshController object.
	DeleteServiceMeshController(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given ServiceMeshController object.
	UpdateServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, opts ...client.UpdateOption) error

	// Patch patches the given ServiceMeshController object.
	PatchServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all ServiceMeshController objects matching the given options.
	DeleteAllOfServiceMeshController(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the ServiceMeshController object.
	UpsertServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, transitionFuncs ...ServiceMeshControllerTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a ServiceMeshController object.
type ServiceMeshControllerStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given ServiceMeshController object.
	UpdateServiceMeshControllerStatus(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given ServiceMeshController object's subresource.
	PatchServiceMeshControllerStatus(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on ServiceMeshControllers.
type ServiceMeshControllerClient interface {
	ServiceMeshControllerReader
	ServiceMeshControllerWriter
	ServiceMeshControllerStatusWriter
}

type serviceMeshControllerClient struct {
	client client.Client
}

func NewServiceMeshControllerClient(client client.Client) *serviceMeshControllerClient {
	return &serviceMeshControllerClient{client: client}
}

func (c *serviceMeshControllerClient) GetServiceMeshController(ctx context.Context, key client.ObjectKey) (*operator_gloo_solo_io_v1.ServiceMeshController, error) {
	obj := &operator_gloo_solo_io_v1.ServiceMeshController{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *serviceMeshControllerClient) ListServiceMeshController(ctx context.Context, opts ...client.ListOption) (*operator_gloo_solo_io_v1.ServiceMeshControllerList, error) {
	list := &operator_gloo_solo_io_v1.ServiceMeshControllerList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *serviceMeshControllerClient) CreateServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *serviceMeshControllerClient) DeleteServiceMeshController(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &operator_gloo_solo_io_v1.ServiceMeshController{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *serviceMeshControllerClient) UpdateServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *serviceMeshControllerClient) PatchServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *serviceMeshControllerClient) DeleteAllOfServiceMeshController(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &operator_gloo_solo_io_v1.ServiceMeshController{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *serviceMeshControllerClient) UpsertServiceMeshController(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, transitionFuncs ...ServiceMeshControllerTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*operator_gloo_solo_io_v1.ServiceMeshController), desired.(*operator_gloo_solo_io_v1.ServiceMeshController)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *serviceMeshControllerClient) UpdateServiceMeshControllerStatus(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *serviceMeshControllerClient) PatchServiceMeshControllerStatus(ctx context.Context, obj *operator_gloo_solo_io_v1.ServiceMeshController, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides ServiceMeshControllerClients for multiple clusters.
type MulticlusterServiceMeshControllerClient interface {
	// Cluster returns a ServiceMeshControllerClient for the given cluster
	Cluster(cluster string) (ServiceMeshControllerClient, error)
}

type multiclusterServiceMeshControllerClient struct {
	client multicluster.Client
}

func NewMulticlusterServiceMeshControllerClient(client multicluster.Client) MulticlusterServiceMeshControllerClient {
	return &multiclusterServiceMeshControllerClient{client: client}
}

func (m *multiclusterServiceMeshControllerClient) Cluster(cluster string) (ServiceMeshControllerClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewServiceMeshControllerClient(client), nil
}
