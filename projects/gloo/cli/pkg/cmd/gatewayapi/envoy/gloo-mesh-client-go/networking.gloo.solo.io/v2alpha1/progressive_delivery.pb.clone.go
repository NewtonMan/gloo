// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-apis/api/gloo.solo.io/networking/v2alpha1/progressive_delivery.proto

package v2alpha1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/common.gloo.solo.io/v2"

	istio_io_api_networking_v1alpha3 "istio.io/api/networking/v1alpha3"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ProgressiveDeliverySpec) Clone() proto.Message {
	var target *ProgressiveDeliverySpec
	if m == nil {
		return target
	}
	target = &ProgressiveDeliverySpec{}

	if h, ok := interface{}(m.GetRouteTableRef()).(clone.Cloner); ok {
		target.RouteTableRef = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
	} else {
		target.RouteTableRef = proto.Clone(m.GetRouteTableRef()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
	}

	if m.GetVirtualServicePatch() != nil {
		target.VirtualServicePatch = make([]*ProgressiveDeliverySpec_VirtualServiceRoute, len(m.GetVirtualServicePatch()))
		for idx, v := range m.GetVirtualServicePatch() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.VirtualServicePatch[idx] = h.Clone().(*ProgressiveDeliverySpec_VirtualServiceRoute)
			} else {
				target.VirtualServicePatch[idx] = proto.Clone(v).(*ProgressiveDeliverySpec_VirtualServiceRoute)
			}

		}
	}

	return target
}

// Clone function
func (m *ProgressiveDeliveryStatus) Clone() proto.Message {
	var target *ProgressiveDeliveryStatus
	if m == nil {
		return target
	}
	target = &ProgressiveDeliveryStatus{}

	if h, ok := interface{}(m.GetCommon()).(clone.Cloner); ok {
		target.Common = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	} else {
		target.Common = proto.Clone(m.GetCommon()).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.Status)
	}

	if m.GetPatchedVirtualServices() != nil {
		target.PatchedVirtualServices = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetPatchedVirtualServices()))
		for idx, v := range m.GetPatchedVirtualServices() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PatchedVirtualServices[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.PatchedVirtualServices[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	if m.GetFailedToPatchVirtualServices() != nil {
		target.FailedToPatchVirtualServices = make([]*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference, len(m.GetFailedToPatchVirtualServices()))
		for idx, v := range m.GetFailedToPatchVirtualServices() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.FailedToPatchVirtualServices[idx] = h.Clone().(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			} else {
				target.FailedToPatchVirtualServices[idx] = proto.Clone(v).(*github_com_solo_io_gloo_mesh_solo_apis_client_go_common_gloo_solo_io_v2.ObjectReference)
			}

		}
	}

	return target
}

// Clone function
func (m *Destination) Clone() proto.Message {
	var target *Destination
	if m == nil {
		return target
	}
	target = &Destination{}

	target.Host = m.GetHost()

	if h, ok := interface{}(m.GetSubset()).(clone.Cloner); ok {
		target.Subset = h.Clone().(*SubsetSelector)
	} else {
		target.Subset = proto.Clone(m.GetSubset()).(*SubsetSelector)
	}

	if h, ok := interface{}(m.GetPort()).(clone.Cloner); ok {
		target.Port = h.Clone().(*istio_io_api_networking_v1alpha3.PortSelector)
	} else {
		target.Port = proto.Clone(m.GetPort()).(*istio_io_api_networking_v1alpha3.PortSelector)
	}

	return target
}

// Clone function
func (m *SubsetSelector) Clone() proto.Message {
	var target *SubsetSelector
	if m == nil {
		return target
	}
	target = &SubsetSelector{}

	target.Name = m.GetName()

	if m.GetLabels() != nil {
		target.Labels = make(map[string]string, len(m.GetLabels()))
		for k, v := range m.GetLabels() {

			target.Labels[k] = v

		}
	}

	return target
}

// Clone function
func (m *ProgressiveDeliverySpec_VirtualServiceRoute) Clone() proto.Message {
	var target *ProgressiveDeliverySpec_VirtualServiceRoute
	if m == nil {
		return target
	}
	target = &ProgressiveDeliverySpec_VirtualServiceRoute{}

	target.Name = m.GetName()

	if m.GetRoute() != nil {
		target.Route = make([]*ProgressiveDeliverySpec_HttpRouteDestination, len(m.GetRoute()))
		for idx, v := range m.GetRoute() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Route[idx] = h.Clone().(*ProgressiveDeliverySpec_HttpRouteDestination)
			} else {
				target.Route[idx] = proto.Clone(v).(*ProgressiveDeliverySpec_HttpRouteDestination)
			}

		}
	}

	return target
}

// Clone function
func (m *ProgressiveDeliverySpec_HttpRouteDestination) Clone() proto.Message {
	var target *ProgressiveDeliverySpec_HttpRouteDestination
	if m == nil {
		return target
	}
	target = &ProgressiveDeliverySpec_HttpRouteDestination{}

	if h, ok := interface{}(m.GetDestination()).(clone.Cloner); ok {
		target.Destination = h.Clone().(*Destination)
	} else {
		target.Destination = proto.Clone(m.GetDestination()).(*Destination)
	}

	target.Weight = m.GetWeight()

	return target
}
