// Code generated by skv2. DO NOT EDIT.

// This file contains generated Deepcopy methods for internal.gloo.solo.io/v2alpha1 resources

package v2alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// Generated Deepcopy methods for SpireRegistrationEntry

func (in *SpireRegistrationEntry) DeepCopyInto(out *SpireRegistrationEntry) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)
	// deepcopy status
	in.Status.DeepCopyInto(&out.Status)

	return
}

func (in *SpireRegistrationEntry) DeepCopy() *SpireRegistrationEntry {
	if in == nil {
		return nil
	}
	out := new(SpireRegistrationEntry)
	in.DeepCopyInto(out)
	return out
}

func (in *SpireRegistrationEntry) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *SpireRegistrationEntryList) DeepCopyInto(out *SpireRegistrationEntryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SpireRegistrationEntry, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *SpireRegistrationEntryList) DeepCopy() *SpireRegistrationEntryList {
	if in == nil {
		return nil
	}
	out := new(SpireRegistrationEntryList)
	in.DeepCopyInto(out)
	return out
}

func (in *SpireRegistrationEntryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// Generated Deepcopy methods for VirtualServiceBackup

func (in *VirtualServiceBackup) DeepCopyInto(out *VirtualServiceBackup) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)

	// deepcopy spec
	in.Spec.DeepCopyInto(&out.Spec)

	return
}

func (in *VirtualServiceBackup) DeepCopy() *VirtualServiceBackup {
	if in == nil {
		return nil
	}
	out := new(VirtualServiceBackup)
	in.DeepCopyInto(out)
	return out
}

func (in *VirtualServiceBackup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *VirtualServiceBackupList) DeepCopyInto(out *VirtualServiceBackupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VirtualServiceBackup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

func (in *VirtualServiceBackupList) DeepCopy() *VirtualServiceBackupList {
	if in == nil {
		return nil
	}
	out := new(VirtualServiceBackupList)
	in.DeepCopyInto(out)
	return out
}

func (in *VirtualServiceBackupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
