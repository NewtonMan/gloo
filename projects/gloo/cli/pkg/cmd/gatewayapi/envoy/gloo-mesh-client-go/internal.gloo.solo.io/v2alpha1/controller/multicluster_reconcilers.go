// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	internal_gloo_solo_io_v2alpha1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/internal.gloo.solo.io/v2alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the SpireRegistrationEntry Resource across clusters.
// implemented by the user
type MulticlusterSpireRegistrationEntryReconciler interface {
	ReconcileSpireRegistrationEntry(clusterName string, obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) (reconcile.Result, error)
}

// Reconcile deletion events for the SpireRegistrationEntry Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterSpireRegistrationEntryDeletionReconciler interface {
	ReconcileSpireRegistrationEntryDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterSpireRegistrationEntryReconcilerFuncs struct {
	OnReconcileSpireRegistrationEntry         func(clusterName string, obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) (reconcile.Result, error)
	OnReconcileSpireRegistrationEntryDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterSpireRegistrationEntryReconcilerFuncs) ReconcileSpireRegistrationEntry(clusterName string, obj *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) (reconcile.Result, error) {
	if f.OnReconcileSpireRegistrationEntry == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileSpireRegistrationEntry(clusterName, obj)
}

func (f *MulticlusterSpireRegistrationEntryReconcilerFuncs) ReconcileSpireRegistrationEntryDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileSpireRegistrationEntryDeletion == nil {
		return nil
	}
	return f.OnReconcileSpireRegistrationEntryDeletion(clusterName, req)
}

type MulticlusterSpireRegistrationEntryReconcileLoop interface {
	// AddMulticlusterSpireRegistrationEntryReconciler adds a MulticlusterSpireRegistrationEntryReconciler to the MulticlusterSpireRegistrationEntryReconcileLoop.
	AddMulticlusterSpireRegistrationEntryReconciler(ctx context.Context, rec MulticlusterSpireRegistrationEntryReconciler, predicates ...predicate.Predicate)
}

type multiclusterSpireRegistrationEntryReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterSpireRegistrationEntryReconcileLoop) AddMulticlusterSpireRegistrationEntryReconciler(ctx context.Context, rec MulticlusterSpireRegistrationEntryReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericSpireRegistrationEntryMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterSpireRegistrationEntryReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterSpireRegistrationEntryReconcileLoop {
	return &multiclusterSpireRegistrationEntryReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry{}, options)}
}

type genericSpireRegistrationEntryMulticlusterReconciler struct {
	reconciler MulticlusterSpireRegistrationEntryReconciler
}

func (g genericSpireRegistrationEntryMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterSpireRegistrationEntryDeletionReconciler); ok {
		return deletionReconciler.ReconcileSpireRegistrationEntryDeletion(cluster, req)
	}
	return nil
}

func (g genericSpireRegistrationEntryMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: SpireRegistrationEntry handler received event for %T", object)
	}
	return g.reconciler.ReconcileSpireRegistrationEntry(cluster, obj)
}

// Reconcile Upsert events for the VirtualServiceBackup Resource across clusters.
// implemented by the user
type MulticlusterVirtualServiceBackupReconciler interface {
	ReconcileVirtualServiceBackup(clusterName string, obj *internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) (reconcile.Result, error)
}

// Reconcile deletion events for the VirtualServiceBackup Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterVirtualServiceBackupDeletionReconciler interface {
	ReconcileVirtualServiceBackupDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterVirtualServiceBackupReconcilerFuncs struct {
	OnReconcileVirtualServiceBackup         func(clusterName string, obj *internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) (reconcile.Result, error)
	OnReconcileVirtualServiceBackupDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterVirtualServiceBackupReconcilerFuncs) ReconcileVirtualServiceBackup(clusterName string, obj *internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) (reconcile.Result, error) {
	if f.OnReconcileVirtualServiceBackup == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileVirtualServiceBackup(clusterName, obj)
}

func (f *MulticlusterVirtualServiceBackupReconcilerFuncs) ReconcileVirtualServiceBackupDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileVirtualServiceBackupDeletion == nil {
		return nil
	}
	return f.OnReconcileVirtualServiceBackupDeletion(clusterName, req)
}

type MulticlusterVirtualServiceBackupReconcileLoop interface {
	// AddMulticlusterVirtualServiceBackupReconciler adds a MulticlusterVirtualServiceBackupReconciler to the MulticlusterVirtualServiceBackupReconcileLoop.
	AddMulticlusterVirtualServiceBackupReconciler(ctx context.Context, rec MulticlusterVirtualServiceBackupReconciler, predicates ...predicate.Predicate)
}

type multiclusterVirtualServiceBackupReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterVirtualServiceBackupReconcileLoop) AddMulticlusterVirtualServiceBackupReconciler(ctx context.Context, rec MulticlusterVirtualServiceBackupReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericVirtualServiceBackupMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterVirtualServiceBackupReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterVirtualServiceBackupReconcileLoop {
	return &multiclusterVirtualServiceBackupReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &internal_gloo_solo_io_v2alpha1.VirtualServiceBackup{}, options)}
}

type genericVirtualServiceBackupMulticlusterReconciler struct {
	reconciler MulticlusterVirtualServiceBackupReconciler
}

func (g genericVirtualServiceBackupMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterVirtualServiceBackupDeletionReconciler); ok {
		return deletionReconciler.ReconcileVirtualServiceBackupDeletion(cluster, req)
	}
	return nil
}

func (g genericVirtualServiceBackupMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: VirtualServiceBackup handler received event for %T", object)
	}
	return g.reconciler.ReconcileVirtualServiceBackup(cluster, obj)
}
