// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go
//
// Generated by this command:
//
//	mockgen -source ./reconcilers.go -destination mocks/reconcilers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2alpha1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/internal.gloo.solo.io/v2alpha1"
	controller "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/internal.gloo.solo.io/v2alpha1/controller"
)

// MockSpireRegistrationEntryReconciler is a mock of SpireRegistrationEntryReconciler interface.
type MockSpireRegistrationEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryReconcilerMockRecorder
}

// MockSpireRegistrationEntryReconcilerMockRecorder is the mock recorder for MockSpireRegistrationEntryReconciler.
type MockSpireRegistrationEntryReconcilerMockRecorder struct {
	mock *MockSpireRegistrationEntryReconciler
}

// NewMockSpireRegistrationEntryReconciler creates a new mock instance.
func NewMockSpireRegistrationEntryReconciler(ctrl *gomock.Controller) *MockSpireRegistrationEntryReconciler {
	mock := &MockSpireRegistrationEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryReconciler) EXPECT() *MockSpireRegistrationEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryReconciler) ReconcileSpireRegistrationEntry(obj *v2alpha1.SpireRegistrationEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSpireRegistrationEntry indicates an expected call of ReconcileSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryReconcilerMockRecorder) ReconcileSpireRegistrationEntry(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryReconciler)(nil).ReconcileSpireRegistrationEntry), obj)
}

// MockSpireRegistrationEntryDeletionReconciler is a mock of SpireRegistrationEntryDeletionReconciler interface.
type MockSpireRegistrationEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryDeletionReconcilerMockRecorder
}

// MockSpireRegistrationEntryDeletionReconcilerMockRecorder is the mock recorder for MockSpireRegistrationEntryDeletionReconciler.
type MockSpireRegistrationEntryDeletionReconcilerMockRecorder struct {
	mock *MockSpireRegistrationEntryDeletionReconciler
}

// NewMockSpireRegistrationEntryDeletionReconciler creates a new mock instance.
func NewMockSpireRegistrationEntryDeletionReconciler(ctrl *gomock.Controller) *MockSpireRegistrationEntryDeletionReconciler {
	mock := &MockSpireRegistrationEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryDeletionReconciler) EXPECT() *MockSpireRegistrationEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSpireRegistrationEntryDeletion mocks base method.
func (m *MockSpireRegistrationEntryDeletionReconciler) ReconcileSpireRegistrationEntryDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntryDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileSpireRegistrationEntryDeletion indicates an expected call of ReconcileSpireRegistrationEntryDeletion.
func (mr *MockSpireRegistrationEntryDeletionReconcilerMockRecorder) ReconcileSpireRegistrationEntryDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntryDeletion", reflect.TypeOf((*MockSpireRegistrationEntryDeletionReconciler)(nil).ReconcileSpireRegistrationEntryDeletion), req)
}

// MockSpireRegistrationEntryFinalizer is a mock of SpireRegistrationEntryFinalizer interface.
type MockSpireRegistrationEntryFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryFinalizerMockRecorder
}

// MockSpireRegistrationEntryFinalizerMockRecorder is the mock recorder for MockSpireRegistrationEntryFinalizer.
type MockSpireRegistrationEntryFinalizerMockRecorder struct {
	mock *MockSpireRegistrationEntryFinalizer
}

// NewMockSpireRegistrationEntryFinalizer creates a new mock instance.
func NewMockSpireRegistrationEntryFinalizer(ctrl *gomock.Controller) *MockSpireRegistrationEntryFinalizer {
	mock := &MockSpireRegistrationEntryFinalizer{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryFinalizer) EXPECT() *MockSpireRegistrationEntryFinalizerMockRecorder {
	return m.recorder
}

// FinalizeSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryFinalizer) FinalizeSpireRegistrationEntry(obj *v2alpha1.SpireRegistrationEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeSpireRegistrationEntry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeSpireRegistrationEntry indicates an expected call of FinalizeSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryFinalizerMockRecorder) FinalizeSpireRegistrationEntry(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryFinalizer)(nil).FinalizeSpireRegistrationEntry), obj)
}

// ReconcileSpireRegistrationEntry mocks base method.
func (m *MockSpireRegistrationEntryFinalizer) ReconcileSpireRegistrationEntry(obj *v2alpha1.SpireRegistrationEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSpireRegistrationEntry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSpireRegistrationEntry indicates an expected call of ReconcileSpireRegistrationEntry.
func (mr *MockSpireRegistrationEntryFinalizerMockRecorder) ReconcileSpireRegistrationEntry(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSpireRegistrationEntry", reflect.TypeOf((*MockSpireRegistrationEntryFinalizer)(nil).ReconcileSpireRegistrationEntry), obj)
}

// SpireRegistrationEntryFinalizerName mocks base method.
func (m *MockSpireRegistrationEntryFinalizer) SpireRegistrationEntryFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpireRegistrationEntryFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SpireRegistrationEntryFinalizerName indicates an expected call of SpireRegistrationEntryFinalizerName.
func (mr *MockSpireRegistrationEntryFinalizerMockRecorder) SpireRegistrationEntryFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpireRegistrationEntryFinalizerName", reflect.TypeOf((*MockSpireRegistrationEntryFinalizer)(nil).SpireRegistrationEntryFinalizerName))
}

// MockSpireRegistrationEntryReconcileLoop is a mock of SpireRegistrationEntryReconcileLoop interface.
type MockSpireRegistrationEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockSpireRegistrationEntryReconcileLoopMockRecorder
}

// MockSpireRegistrationEntryReconcileLoopMockRecorder is the mock recorder for MockSpireRegistrationEntryReconcileLoop.
type MockSpireRegistrationEntryReconcileLoopMockRecorder struct {
	mock *MockSpireRegistrationEntryReconcileLoop
}

// NewMockSpireRegistrationEntryReconcileLoop creates a new mock instance.
func NewMockSpireRegistrationEntryReconcileLoop(ctrl *gomock.Controller) *MockSpireRegistrationEntryReconcileLoop {
	mock := &MockSpireRegistrationEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockSpireRegistrationEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpireRegistrationEntryReconcileLoop) EXPECT() *MockSpireRegistrationEntryReconcileLoopMockRecorder {
	return m.recorder
}

// RunSpireRegistrationEntryReconciler mocks base method.
func (m *MockSpireRegistrationEntryReconcileLoop) RunSpireRegistrationEntryReconciler(ctx context.Context, rec controller.SpireRegistrationEntryReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunSpireRegistrationEntryReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSpireRegistrationEntryReconciler indicates an expected call of RunSpireRegistrationEntryReconciler.
func (mr *MockSpireRegistrationEntryReconcileLoopMockRecorder) RunSpireRegistrationEntryReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSpireRegistrationEntryReconciler", reflect.TypeOf((*MockSpireRegistrationEntryReconcileLoop)(nil).RunSpireRegistrationEntryReconciler), varargs...)
}

// MockVirtualServiceBackupReconciler is a mock of VirtualServiceBackupReconciler interface.
type MockVirtualServiceBackupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceBackupReconcilerMockRecorder
}

// MockVirtualServiceBackupReconcilerMockRecorder is the mock recorder for MockVirtualServiceBackupReconciler.
type MockVirtualServiceBackupReconcilerMockRecorder struct {
	mock *MockVirtualServiceBackupReconciler
}

// NewMockVirtualServiceBackupReconciler creates a new mock instance.
func NewMockVirtualServiceBackupReconciler(ctrl *gomock.Controller) *MockVirtualServiceBackupReconciler {
	mock := &MockVirtualServiceBackupReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceBackupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceBackupReconciler) EXPECT() *MockVirtualServiceBackupReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceBackup mocks base method.
func (m *MockVirtualServiceBackupReconciler) ReconcileVirtualServiceBackup(obj *v2alpha1.VirtualServiceBackup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceBackup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualServiceBackup indicates an expected call of ReconcileVirtualServiceBackup.
func (mr *MockVirtualServiceBackupReconcilerMockRecorder) ReconcileVirtualServiceBackup(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceBackup", reflect.TypeOf((*MockVirtualServiceBackupReconciler)(nil).ReconcileVirtualServiceBackup), obj)
}

// MockVirtualServiceBackupDeletionReconciler is a mock of VirtualServiceBackupDeletionReconciler interface.
type MockVirtualServiceBackupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceBackupDeletionReconcilerMockRecorder
}

// MockVirtualServiceBackupDeletionReconcilerMockRecorder is the mock recorder for MockVirtualServiceBackupDeletionReconciler.
type MockVirtualServiceBackupDeletionReconcilerMockRecorder struct {
	mock *MockVirtualServiceBackupDeletionReconciler
}

// NewMockVirtualServiceBackupDeletionReconciler creates a new mock instance.
func NewMockVirtualServiceBackupDeletionReconciler(ctrl *gomock.Controller) *MockVirtualServiceBackupDeletionReconciler {
	mock := &MockVirtualServiceBackupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceBackupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceBackupDeletionReconciler) EXPECT() *MockVirtualServiceBackupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceBackupDeletion mocks base method.
func (m *MockVirtualServiceBackupDeletionReconciler) ReconcileVirtualServiceBackupDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceBackupDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualServiceBackupDeletion indicates an expected call of ReconcileVirtualServiceBackupDeletion.
func (mr *MockVirtualServiceBackupDeletionReconcilerMockRecorder) ReconcileVirtualServiceBackupDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceBackupDeletion", reflect.TypeOf((*MockVirtualServiceBackupDeletionReconciler)(nil).ReconcileVirtualServiceBackupDeletion), req)
}

// MockVirtualServiceBackupFinalizer is a mock of VirtualServiceBackupFinalizer interface.
type MockVirtualServiceBackupFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceBackupFinalizerMockRecorder
}

// MockVirtualServiceBackupFinalizerMockRecorder is the mock recorder for MockVirtualServiceBackupFinalizer.
type MockVirtualServiceBackupFinalizerMockRecorder struct {
	mock *MockVirtualServiceBackupFinalizer
}

// NewMockVirtualServiceBackupFinalizer creates a new mock instance.
func NewMockVirtualServiceBackupFinalizer(ctrl *gomock.Controller) *MockVirtualServiceBackupFinalizer {
	mock := &MockVirtualServiceBackupFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceBackupFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceBackupFinalizer) EXPECT() *MockVirtualServiceBackupFinalizerMockRecorder {
	return m.recorder
}

// FinalizeVirtualServiceBackup mocks base method.
func (m *MockVirtualServiceBackupFinalizer) FinalizeVirtualServiceBackup(obj *v2alpha1.VirtualServiceBackup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualServiceBackup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualServiceBackup indicates an expected call of FinalizeVirtualServiceBackup.
func (mr *MockVirtualServiceBackupFinalizerMockRecorder) FinalizeVirtualServiceBackup(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualServiceBackup", reflect.TypeOf((*MockVirtualServiceBackupFinalizer)(nil).FinalizeVirtualServiceBackup), obj)
}

// ReconcileVirtualServiceBackup mocks base method.
func (m *MockVirtualServiceBackupFinalizer) ReconcileVirtualServiceBackup(obj *v2alpha1.VirtualServiceBackup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceBackup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualServiceBackup indicates an expected call of ReconcileVirtualServiceBackup.
func (mr *MockVirtualServiceBackupFinalizerMockRecorder) ReconcileVirtualServiceBackup(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceBackup", reflect.TypeOf((*MockVirtualServiceBackupFinalizer)(nil).ReconcileVirtualServiceBackup), obj)
}

// VirtualServiceBackupFinalizerName mocks base method.
func (m *MockVirtualServiceBackupFinalizer) VirtualServiceBackupFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServiceBackupFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualServiceBackupFinalizerName indicates an expected call of VirtualServiceBackupFinalizerName.
func (mr *MockVirtualServiceBackupFinalizerMockRecorder) VirtualServiceBackupFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServiceBackupFinalizerName", reflect.TypeOf((*MockVirtualServiceBackupFinalizer)(nil).VirtualServiceBackupFinalizerName))
}

// MockVirtualServiceBackupReconcileLoop is a mock of VirtualServiceBackupReconcileLoop interface.
type MockVirtualServiceBackupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceBackupReconcileLoopMockRecorder
}

// MockVirtualServiceBackupReconcileLoopMockRecorder is the mock recorder for MockVirtualServiceBackupReconcileLoop.
type MockVirtualServiceBackupReconcileLoopMockRecorder struct {
	mock *MockVirtualServiceBackupReconcileLoop
}

// NewMockVirtualServiceBackupReconcileLoop creates a new mock instance.
func NewMockVirtualServiceBackupReconcileLoop(ctrl *gomock.Controller) *MockVirtualServiceBackupReconcileLoop {
	mock := &MockVirtualServiceBackupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceBackupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceBackupReconcileLoop) EXPECT() *MockVirtualServiceBackupReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualServiceBackupReconciler mocks base method.
func (m *MockVirtualServiceBackupReconcileLoop) RunVirtualServiceBackupReconciler(ctx context.Context, rec controller.VirtualServiceBackupReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualServiceBackupReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualServiceBackupReconciler indicates an expected call of RunVirtualServiceBackupReconciler.
func (mr *MockVirtualServiceBackupReconcileLoopMockRecorder) RunVirtualServiceBackupReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualServiceBackupReconciler", reflect.TypeOf((*MockVirtualServiceBackupReconcileLoop)(nil).RunVirtualServiceBackupReconciler), varargs...)
}
