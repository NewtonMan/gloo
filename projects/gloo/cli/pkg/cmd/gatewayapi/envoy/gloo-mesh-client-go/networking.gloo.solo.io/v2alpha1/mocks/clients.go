// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go
//
// Generated by this command:
//
//	mockgen -source ./clients.go -destination mocks/clients.go
//

// Package mock_v2alpha1 is a generated GoMock package.
package mock_v2alpha1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	v2alpha1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/networking.gloo.solo.io/v2alpha1"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v2alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ExternalWorkloads mocks base method.
func (m *MockClientset) ExternalWorkloads() v2alpha1.ExternalWorkloadClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalWorkloads")
	ret0, _ := ret[0].(v2alpha1.ExternalWorkloadClient)
	return ret0
}

// ExternalWorkloads indicates an expected call of ExternalWorkloads.
func (mr *MockClientsetMockRecorder) ExternalWorkloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalWorkloads", reflect.TypeOf((*MockClientset)(nil).ExternalWorkloads))
}

// ProgressiveDeliveries mocks base method.
func (m *MockClientset) ProgressiveDeliveries() v2alpha1.ProgressiveDeliveryClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgressiveDeliveries")
	ret0, _ := ret[0].(v2alpha1.ProgressiveDeliveryClient)
	return ret0
}

// ProgressiveDeliveries indicates an expected call of ProgressiveDeliveries.
func (mr *MockClientsetMockRecorder) ProgressiveDeliveries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgressiveDeliveries", reflect.TypeOf((*MockClientset)(nil).ProgressiveDeliveries))
}

// MockExternalWorkloadReader is a mock of ExternalWorkloadReader interface.
type MockExternalWorkloadReader struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadReaderMockRecorder
}

// MockExternalWorkloadReaderMockRecorder is the mock recorder for MockExternalWorkloadReader.
type MockExternalWorkloadReaderMockRecorder struct {
	mock *MockExternalWorkloadReader
}

// NewMockExternalWorkloadReader creates a new mock instance.
func NewMockExternalWorkloadReader(ctrl *gomock.Controller) *MockExternalWorkloadReader {
	mock := &MockExternalWorkloadReader{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadReader) EXPECT() *MockExternalWorkloadReaderMockRecorder {
	return m.recorder
}

// GetExternalWorkload mocks base method.
func (m *MockExternalWorkloadReader) GetExternalWorkload(ctx context.Context, key client.ObjectKey) (*v2alpha1.ExternalWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalWorkload", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.ExternalWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalWorkload indicates an expected call of GetExternalWorkload.
func (mr *MockExternalWorkloadReaderMockRecorder) GetExternalWorkload(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalWorkload", reflect.TypeOf((*MockExternalWorkloadReader)(nil).GetExternalWorkload), ctx, key)
}

// ListExternalWorkload mocks base method.
func (m *MockExternalWorkloadReader) ListExternalWorkload(ctx context.Context, opts ...client.ListOption) (*v2alpha1.ExternalWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExternalWorkload", varargs...)
	ret0, _ := ret[0].(*v2alpha1.ExternalWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalWorkload indicates an expected call of ListExternalWorkload.
func (mr *MockExternalWorkloadReaderMockRecorder) ListExternalWorkload(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalWorkload", reflect.TypeOf((*MockExternalWorkloadReader)(nil).ListExternalWorkload), varargs...)
}

// MockExternalWorkloadWriter is a mock of ExternalWorkloadWriter interface.
type MockExternalWorkloadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadWriterMockRecorder
}

// MockExternalWorkloadWriterMockRecorder is the mock recorder for MockExternalWorkloadWriter.
type MockExternalWorkloadWriterMockRecorder struct {
	mock *MockExternalWorkloadWriter
}

// NewMockExternalWorkloadWriter creates a new mock instance.
func NewMockExternalWorkloadWriter(ctrl *gomock.Controller) *MockExternalWorkloadWriter {
	mock := &MockExternalWorkloadWriter{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadWriter) EXPECT() *MockExternalWorkloadWriterMockRecorder {
	return m.recorder
}

// CreateExternalWorkload mocks base method.
func (m *MockExternalWorkloadWriter) CreateExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalWorkload indicates an expected call of CreateExternalWorkload.
func (mr *MockExternalWorkloadWriterMockRecorder) CreateExternalWorkload(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalWorkload", reflect.TypeOf((*MockExternalWorkloadWriter)(nil).CreateExternalWorkload), varargs...)
}

// DeleteAllOfExternalWorkload mocks base method.
func (m *MockExternalWorkloadWriter) DeleteAllOfExternalWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExternalWorkload indicates an expected call of DeleteAllOfExternalWorkload.
func (mr *MockExternalWorkloadWriterMockRecorder) DeleteAllOfExternalWorkload(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExternalWorkload", reflect.TypeOf((*MockExternalWorkloadWriter)(nil).DeleteAllOfExternalWorkload), varargs...)
}

// DeleteExternalWorkload mocks base method.
func (m *MockExternalWorkloadWriter) DeleteExternalWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalWorkload indicates an expected call of DeleteExternalWorkload.
func (mr *MockExternalWorkloadWriterMockRecorder) DeleteExternalWorkload(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalWorkload", reflect.TypeOf((*MockExternalWorkloadWriter)(nil).DeleteExternalWorkload), varargs...)
}

// PatchExternalWorkload mocks base method.
func (m *MockExternalWorkloadWriter) PatchExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalWorkload indicates an expected call of PatchExternalWorkload.
func (mr *MockExternalWorkloadWriterMockRecorder) PatchExternalWorkload(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalWorkload", reflect.TypeOf((*MockExternalWorkloadWriter)(nil).PatchExternalWorkload), varargs...)
}

// UpdateExternalWorkload mocks base method.
func (m *MockExternalWorkloadWriter) UpdateExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalWorkload indicates an expected call of UpdateExternalWorkload.
func (mr *MockExternalWorkloadWriterMockRecorder) UpdateExternalWorkload(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalWorkload", reflect.TypeOf((*MockExternalWorkloadWriter)(nil).UpdateExternalWorkload), varargs...)
}

// UpsertExternalWorkload mocks base method.
func (m *MockExternalWorkloadWriter) UpsertExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, transitionFuncs ...v2alpha1.ExternalWorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExternalWorkload indicates an expected call of UpsertExternalWorkload.
func (mr *MockExternalWorkloadWriterMockRecorder) UpsertExternalWorkload(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExternalWorkload", reflect.TypeOf((*MockExternalWorkloadWriter)(nil).UpsertExternalWorkload), varargs...)
}

// MockExternalWorkloadStatusWriter is a mock of ExternalWorkloadStatusWriter interface.
type MockExternalWorkloadStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadStatusWriterMockRecorder
}

// MockExternalWorkloadStatusWriterMockRecorder is the mock recorder for MockExternalWorkloadStatusWriter.
type MockExternalWorkloadStatusWriterMockRecorder struct {
	mock *MockExternalWorkloadStatusWriter
}

// NewMockExternalWorkloadStatusWriter creates a new mock instance.
func NewMockExternalWorkloadStatusWriter(ctrl *gomock.Controller) *MockExternalWorkloadStatusWriter {
	mock := &MockExternalWorkloadStatusWriter{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadStatusWriter) EXPECT() *MockExternalWorkloadStatusWriterMockRecorder {
	return m.recorder
}

// PatchExternalWorkloadStatus mocks base method.
func (m *MockExternalWorkloadStatusWriter) PatchExternalWorkloadStatus(ctx context.Context, obj *v2alpha1.ExternalWorkload, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalWorkloadStatus indicates an expected call of PatchExternalWorkloadStatus.
func (mr *MockExternalWorkloadStatusWriterMockRecorder) PatchExternalWorkloadStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalWorkloadStatus", reflect.TypeOf((*MockExternalWorkloadStatusWriter)(nil).PatchExternalWorkloadStatus), varargs...)
}

// UpdateExternalWorkloadStatus mocks base method.
func (m *MockExternalWorkloadStatusWriter) UpdateExternalWorkloadStatus(ctx context.Context, obj *v2alpha1.ExternalWorkload, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalWorkloadStatus indicates an expected call of UpdateExternalWorkloadStatus.
func (mr *MockExternalWorkloadStatusWriterMockRecorder) UpdateExternalWorkloadStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalWorkloadStatus", reflect.TypeOf((*MockExternalWorkloadStatusWriter)(nil).UpdateExternalWorkloadStatus), varargs...)
}

// MockExternalWorkloadClient is a mock of ExternalWorkloadClient interface.
type MockExternalWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadClientMockRecorder
}

// MockExternalWorkloadClientMockRecorder is the mock recorder for MockExternalWorkloadClient.
type MockExternalWorkloadClientMockRecorder struct {
	mock *MockExternalWorkloadClient
}

// NewMockExternalWorkloadClient creates a new mock instance.
func NewMockExternalWorkloadClient(ctrl *gomock.Controller) *MockExternalWorkloadClient {
	mock := &MockExternalWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadClient) EXPECT() *MockExternalWorkloadClientMockRecorder {
	return m.recorder
}

// CreateExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) CreateExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalWorkload indicates an expected call of CreateExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) CreateExternalWorkload(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).CreateExternalWorkload), varargs...)
}

// DeleteAllOfExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) DeleteAllOfExternalWorkload(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExternalWorkload indicates an expected call of DeleteAllOfExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) DeleteAllOfExternalWorkload(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).DeleteAllOfExternalWorkload), varargs...)
}

// DeleteExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) DeleteExternalWorkload(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalWorkload indicates an expected call of DeleteExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) DeleteExternalWorkload(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).DeleteExternalWorkload), varargs...)
}

// GetExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) GetExternalWorkload(ctx context.Context, key client.ObjectKey) (*v2alpha1.ExternalWorkload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalWorkload", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.ExternalWorkload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalWorkload indicates an expected call of GetExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) GetExternalWorkload(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).GetExternalWorkload), ctx, key)
}

// ListExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) ListExternalWorkload(ctx context.Context, opts ...client.ListOption) (*v2alpha1.ExternalWorkloadList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExternalWorkload", varargs...)
	ret0, _ := ret[0].(*v2alpha1.ExternalWorkloadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExternalWorkload indicates an expected call of ListExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) ListExternalWorkload(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).ListExternalWorkload), varargs...)
}

// PatchExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) PatchExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalWorkload indicates an expected call of PatchExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) PatchExternalWorkload(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).PatchExternalWorkload), varargs...)
}

// PatchExternalWorkloadStatus mocks base method.
func (m *MockExternalWorkloadClient) PatchExternalWorkloadStatus(ctx context.Context, obj *v2alpha1.ExternalWorkload, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExternalWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExternalWorkloadStatus indicates an expected call of PatchExternalWorkloadStatus.
func (mr *MockExternalWorkloadClientMockRecorder) PatchExternalWorkloadStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExternalWorkloadStatus", reflect.TypeOf((*MockExternalWorkloadClient)(nil).PatchExternalWorkloadStatus), varargs...)
}

// UpdateExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) UpdateExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalWorkload indicates an expected call of UpdateExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) UpdateExternalWorkload(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).UpdateExternalWorkload), varargs...)
}

// UpdateExternalWorkloadStatus mocks base method.
func (m *MockExternalWorkloadClient) UpdateExternalWorkloadStatus(ctx context.Context, obj *v2alpha1.ExternalWorkload, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExternalWorkloadStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalWorkloadStatus indicates an expected call of UpdateExternalWorkloadStatus.
func (mr *MockExternalWorkloadClientMockRecorder) UpdateExternalWorkloadStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalWorkloadStatus", reflect.TypeOf((*MockExternalWorkloadClient)(nil).UpdateExternalWorkloadStatus), varargs...)
}

// UpsertExternalWorkload mocks base method.
func (m *MockExternalWorkloadClient) UpsertExternalWorkload(ctx context.Context, obj *v2alpha1.ExternalWorkload, transitionFuncs ...v2alpha1.ExternalWorkloadTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExternalWorkload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExternalWorkload indicates an expected call of UpsertExternalWorkload.
func (mr *MockExternalWorkloadClientMockRecorder) UpsertExternalWorkload(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExternalWorkload", reflect.TypeOf((*MockExternalWorkloadClient)(nil).UpsertExternalWorkload), varargs...)
}

// MockMulticlusterExternalWorkloadClient is a mock of MulticlusterExternalWorkloadClient interface.
type MockMulticlusterExternalWorkloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExternalWorkloadClientMockRecorder
}

// MockMulticlusterExternalWorkloadClientMockRecorder is the mock recorder for MockMulticlusterExternalWorkloadClient.
type MockMulticlusterExternalWorkloadClientMockRecorder struct {
	mock *MockMulticlusterExternalWorkloadClient
}

// NewMockMulticlusterExternalWorkloadClient creates a new mock instance.
func NewMockMulticlusterExternalWorkloadClient(ctrl *gomock.Controller) *MockMulticlusterExternalWorkloadClient {
	mock := &MockMulticlusterExternalWorkloadClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExternalWorkloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExternalWorkloadClient) EXPECT() *MockMulticlusterExternalWorkloadClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterExternalWorkloadClient) Cluster(cluster string) (v2alpha1.ExternalWorkloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.ExternalWorkloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterExternalWorkloadClientMockRecorder) Cluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterExternalWorkloadClient)(nil).Cluster), cluster)
}

// MockProgressiveDeliveryReader is a mock of ProgressiveDeliveryReader interface.
type MockProgressiveDeliveryReader struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryReaderMockRecorder
}

// MockProgressiveDeliveryReaderMockRecorder is the mock recorder for MockProgressiveDeliveryReader.
type MockProgressiveDeliveryReaderMockRecorder struct {
	mock *MockProgressiveDeliveryReader
}

// NewMockProgressiveDeliveryReader creates a new mock instance.
func NewMockProgressiveDeliveryReader(ctrl *gomock.Controller) *MockProgressiveDeliveryReader {
	mock := &MockProgressiveDeliveryReader{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryReader) EXPECT() *MockProgressiveDeliveryReaderMockRecorder {
	return m.recorder
}

// GetProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryReader) GetProgressiveDelivery(ctx context.Context, key client.ObjectKey) (*v2alpha1.ProgressiveDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressiveDelivery", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.ProgressiveDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressiveDelivery indicates an expected call of GetProgressiveDelivery.
func (mr *MockProgressiveDeliveryReaderMockRecorder) GetProgressiveDelivery(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryReader)(nil).GetProgressiveDelivery), ctx, key)
}

// ListProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryReader) ListProgressiveDelivery(ctx context.Context, opts ...client.ListOption) (*v2alpha1.ProgressiveDeliveryList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(*v2alpha1.ProgressiveDeliveryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProgressiveDelivery indicates an expected call of ListProgressiveDelivery.
func (mr *MockProgressiveDeliveryReaderMockRecorder) ListProgressiveDelivery(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryReader)(nil).ListProgressiveDelivery), varargs...)
}

// MockProgressiveDeliveryWriter is a mock of ProgressiveDeliveryWriter interface.
type MockProgressiveDeliveryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryWriterMockRecorder
}

// MockProgressiveDeliveryWriterMockRecorder is the mock recorder for MockProgressiveDeliveryWriter.
type MockProgressiveDeliveryWriterMockRecorder struct {
	mock *MockProgressiveDeliveryWriter
}

// NewMockProgressiveDeliveryWriter creates a new mock instance.
func NewMockProgressiveDeliveryWriter(ctrl *gomock.Controller) *MockProgressiveDeliveryWriter {
	mock := &MockProgressiveDeliveryWriter{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryWriter) EXPECT() *MockProgressiveDeliveryWriterMockRecorder {
	return m.recorder
}

// CreateProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryWriter) CreateProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProgressiveDelivery indicates an expected call of CreateProgressiveDelivery.
func (mr *MockProgressiveDeliveryWriterMockRecorder) CreateProgressiveDelivery(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryWriter)(nil).CreateProgressiveDelivery), varargs...)
}

// DeleteAllOfProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryWriter) DeleteAllOfProgressiveDelivery(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfProgressiveDelivery indicates an expected call of DeleteAllOfProgressiveDelivery.
func (mr *MockProgressiveDeliveryWriterMockRecorder) DeleteAllOfProgressiveDelivery(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryWriter)(nil).DeleteAllOfProgressiveDelivery), varargs...)
}

// DeleteProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryWriter) DeleteProgressiveDelivery(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgressiveDelivery indicates an expected call of DeleteProgressiveDelivery.
func (mr *MockProgressiveDeliveryWriterMockRecorder) DeleteProgressiveDelivery(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryWriter)(nil).DeleteProgressiveDelivery), varargs...)
}

// PatchProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryWriter) PatchProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProgressiveDelivery indicates an expected call of PatchProgressiveDelivery.
func (mr *MockProgressiveDeliveryWriterMockRecorder) PatchProgressiveDelivery(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryWriter)(nil).PatchProgressiveDelivery), varargs...)
}

// UpdateProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryWriter) UpdateProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgressiveDelivery indicates an expected call of UpdateProgressiveDelivery.
func (mr *MockProgressiveDeliveryWriterMockRecorder) UpdateProgressiveDelivery(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryWriter)(nil).UpdateProgressiveDelivery), varargs...)
}

// UpsertProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryWriter) UpsertProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, transitionFuncs ...v2alpha1.ProgressiveDeliveryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertProgressiveDelivery indicates an expected call of UpsertProgressiveDelivery.
func (mr *MockProgressiveDeliveryWriterMockRecorder) UpsertProgressiveDelivery(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryWriter)(nil).UpsertProgressiveDelivery), varargs...)
}

// MockProgressiveDeliveryStatusWriter is a mock of ProgressiveDeliveryStatusWriter interface.
type MockProgressiveDeliveryStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryStatusWriterMockRecorder
}

// MockProgressiveDeliveryStatusWriterMockRecorder is the mock recorder for MockProgressiveDeliveryStatusWriter.
type MockProgressiveDeliveryStatusWriterMockRecorder struct {
	mock *MockProgressiveDeliveryStatusWriter
}

// NewMockProgressiveDeliveryStatusWriter creates a new mock instance.
func NewMockProgressiveDeliveryStatusWriter(ctrl *gomock.Controller) *MockProgressiveDeliveryStatusWriter {
	mock := &MockProgressiveDeliveryStatusWriter{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryStatusWriter) EXPECT() *MockProgressiveDeliveryStatusWriterMockRecorder {
	return m.recorder
}

// PatchProgressiveDeliveryStatus mocks base method.
func (m *MockProgressiveDeliveryStatusWriter) PatchProgressiveDeliveryStatus(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProgressiveDeliveryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProgressiveDeliveryStatus indicates an expected call of PatchProgressiveDeliveryStatus.
func (mr *MockProgressiveDeliveryStatusWriterMockRecorder) PatchProgressiveDeliveryStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProgressiveDeliveryStatus", reflect.TypeOf((*MockProgressiveDeliveryStatusWriter)(nil).PatchProgressiveDeliveryStatus), varargs...)
}

// UpdateProgressiveDeliveryStatus mocks base method.
func (m *MockProgressiveDeliveryStatusWriter) UpdateProgressiveDeliveryStatus(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProgressiveDeliveryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgressiveDeliveryStatus indicates an expected call of UpdateProgressiveDeliveryStatus.
func (mr *MockProgressiveDeliveryStatusWriterMockRecorder) UpdateProgressiveDeliveryStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgressiveDeliveryStatus", reflect.TypeOf((*MockProgressiveDeliveryStatusWriter)(nil).UpdateProgressiveDeliveryStatus), varargs...)
}

// MockProgressiveDeliveryClient is a mock of ProgressiveDeliveryClient interface.
type MockProgressiveDeliveryClient struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryClientMockRecorder
}

// MockProgressiveDeliveryClientMockRecorder is the mock recorder for MockProgressiveDeliveryClient.
type MockProgressiveDeliveryClientMockRecorder struct {
	mock *MockProgressiveDeliveryClient
}

// NewMockProgressiveDeliveryClient creates a new mock instance.
func NewMockProgressiveDeliveryClient(ctrl *gomock.Controller) *MockProgressiveDeliveryClient {
	mock := &MockProgressiveDeliveryClient{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryClient) EXPECT() *MockProgressiveDeliveryClientMockRecorder {
	return m.recorder
}

// CreateProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) CreateProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProgressiveDelivery indicates an expected call of CreateProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) CreateProgressiveDelivery(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).CreateProgressiveDelivery), varargs...)
}

// DeleteAllOfProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) DeleteAllOfProgressiveDelivery(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfProgressiveDelivery indicates an expected call of DeleteAllOfProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) DeleteAllOfProgressiveDelivery(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).DeleteAllOfProgressiveDelivery), varargs...)
}

// DeleteProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) DeleteProgressiveDelivery(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgressiveDelivery indicates an expected call of DeleteProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) DeleteProgressiveDelivery(ctx, key any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).DeleteProgressiveDelivery), varargs...)
}

// GetProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) GetProgressiveDelivery(ctx context.Context, key client.ObjectKey) (*v2alpha1.ProgressiveDelivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressiveDelivery", ctx, key)
	ret0, _ := ret[0].(*v2alpha1.ProgressiveDelivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressiveDelivery indicates an expected call of GetProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) GetProgressiveDelivery(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).GetProgressiveDelivery), ctx, key)
}

// ListProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) ListProgressiveDelivery(ctx context.Context, opts ...client.ListOption) (*v2alpha1.ProgressiveDeliveryList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(*v2alpha1.ProgressiveDeliveryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProgressiveDelivery indicates an expected call of ListProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) ListProgressiveDelivery(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).ListProgressiveDelivery), varargs...)
}

// PatchProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) PatchProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProgressiveDelivery indicates an expected call of PatchProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) PatchProgressiveDelivery(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).PatchProgressiveDelivery), varargs...)
}

// PatchProgressiveDeliveryStatus mocks base method.
func (m *MockProgressiveDeliveryClient) PatchProgressiveDeliveryStatus(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchProgressiveDeliveryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProgressiveDeliveryStatus indicates an expected call of PatchProgressiveDeliveryStatus.
func (mr *MockProgressiveDeliveryClientMockRecorder) PatchProgressiveDeliveryStatus(ctx, obj, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProgressiveDeliveryStatus", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).PatchProgressiveDeliveryStatus), varargs...)
}

// UpdateProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) UpdateProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgressiveDelivery indicates an expected call of UpdateProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) UpdateProgressiveDelivery(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).UpdateProgressiveDelivery), varargs...)
}

// UpdateProgressiveDeliveryStatus mocks base method.
func (m *MockProgressiveDeliveryClient) UpdateProgressiveDeliveryStatus(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProgressiveDeliveryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgressiveDeliveryStatus indicates an expected call of UpdateProgressiveDeliveryStatus.
func (mr *MockProgressiveDeliveryClientMockRecorder) UpdateProgressiveDeliveryStatus(ctx, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgressiveDeliveryStatus", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).UpdateProgressiveDeliveryStatus), varargs...)
}

// UpsertProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryClient) UpsertProgressiveDelivery(ctx context.Context, obj *v2alpha1.ProgressiveDelivery, transitionFuncs ...v2alpha1.ProgressiveDeliveryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertProgressiveDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertProgressiveDelivery indicates an expected call of UpsertProgressiveDelivery.
func (mr *MockProgressiveDeliveryClientMockRecorder) UpsertProgressiveDelivery(ctx, obj any, transitionFuncs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryClient)(nil).UpsertProgressiveDelivery), varargs...)
}

// MockMulticlusterProgressiveDeliveryClient is a mock of MulticlusterProgressiveDeliveryClient interface.
type MockMulticlusterProgressiveDeliveryClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterProgressiveDeliveryClientMockRecorder
}

// MockMulticlusterProgressiveDeliveryClientMockRecorder is the mock recorder for MockMulticlusterProgressiveDeliveryClient.
type MockMulticlusterProgressiveDeliveryClientMockRecorder struct {
	mock *MockMulticlusterProgressiveDeliveryClient
}

// NewMockMulticlusterProgressiveDeliveryClient creates a new mock instance.
func NewMockMulticlusterProgressiveDeliveryClient(ctrl *gomock.Controller) *MockMulticlusterProgressiveDeliveryClient {
	mock := &MockMulticlusterProgressiveDeliveryClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterProgressiveDeliveryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterProgressiveDeliveryClient) EXPECT() *MockMulticlusterProgressiveDeliveryClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterProgressiveDeliveryClient) Cluster(cluster string) (v2alpha1.ProgressiveDeliveryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v2alpha1.ProgressiveDeliveryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterProgressiveDeliveryClientMockRecorder) Cluster(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterProgressiveDeliveryClient)(nil).Cluster), cluster)
}
