// Code generated by skv2. DO NOT EDIT.

package v1sets

import (
	operator_gloo_solo_io_v1 "github.com/solo-io/gloo-operator/api/v1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type ServiceMeshControllerSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*operator_gloo_solo_io_v1.ServiceMeshController) bool) []*operator_gloo_solo_io_v1.ServiceMeshController
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*operator_gloo_solo_io_v1.ServiceMeshController) bool) []*operator_gloo_solo_io_v1.ServiceMeshController
	// Return the Set as a map of key to resource.
	Map() map[string]*operator_gloo_solo_io_v1.ServiceMeshController
	// Insert a resource into the set.
	Insert(serviceMeshController ...*operator_gloo_solo_io_v1.ServiceMeshController)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(serviceMeshControllerSet ServiceMeshControllerSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(serviceMeshController ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(serviceMeshController ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ServiceMeshControllerSet) ServiceMeshControllerSet
	// Return the difference with the provided set
	Difference(set ServiceMeshControllerSet) ServiceMeshControllerSet
	// Return the intersection with the provided set
	Intersection(set ServiceMeshControllerSet) ServiceMeshControllerSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*operator_gloo_solo_io_v1.ServiceMeshController, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ServiceMeshControllerSet
	Delta(newSet ServiceMeshControllerSet) sksets.ResourceDelta
	// Create a deep copy of the current ServiceMeshControllerSet
	Clone() ServiceMeshControllerSet
}

func makeGenericServiceMeshControllerSet(serviceMeshControllerList []*operator_gloo_solo_io_v1.ServiceMeshController) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range serviceMeshControllerList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type serviceMeshControllerSet struct {
	set sksets.ResourceSet
}

func NewServiceMeshControllerSet(serviceMeshControllerList ...*operator_gloo_solo_io_v1.ServiceMeshController) ServiceMeshControllerSet {
	return &serviceMeshControllerSet{set: makeGenericServiceMeshControllerSet(serviceMeshControllerList)}
}

func NewServiceMeshControllerSetFromList(serviceMeshControllerList *operator_gloo_solo_io_v1.ServiceMeshControllerList) ServiceMeshControllerSet {
	list := make([]*operator_gloo_solo_io_v1.ServiceMeshController, 0, len(serviceMeshControllerList.Items))
	for idx := range serviceMeshControllerList.Items {
		list = append(list, &serviceMeshControllerList.Items[idx])
	}
	return &serviceMeshControllerSet{set: makeGenericServiceMeshControllerSet(list)}
}

func (s *serviceMeshControllerSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *serviceMeshControllerSet) List(filterResource ...func(*operator_gloo_solo_io_v1.ServiceMeshController) bool) []*operator_gloo_solo_io_v1.ServiceMeshController {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*operator_gloo_solo_io_v1.ServiceMeshController))
		})
	}

	objs := s.Generic().List(genericFilters...)
	serviceMeshControllerList := make([]*operator_gloo_solo_io_v1.ServiceMeshController, 0, len(objs))
	for _, obj := range objs {
		serviceMeshControllerList = append(serviceMeshControllerList, obj.(*operator_gloo_solo_io_v1.ServiceMeshController))
	}
	return serviceMeshControllerList
}

func (s *serviceMeshControllerSet) UnsortedList(filterResource ...func(*operator_gloo_solo_io_v1.ServiceMeshController) bool) []*operator_gloo_solo_io_v1.ServiceMeshController {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*operator_gloo_solo_io_v1.ServiceMeshController))
		})
	}

	var serviceMeshControllerList []*operator_gloo_solo_io_v1.ServiceMeshController
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		serviceMeshControllerList = append(serviceMeshControllerList, obj.(*operator_gloo_solo_io_v1.ServiceMeshController))
	}
	return serviceMeshControllerList
}

func (s *serviceMeshControllerSet) Map() map[string]*operator_gloo_solo_io_v1.ServiceMeshController {
	if s == nil {
		return nil
	}

	newMap := map[string]*operator_gloo_solo_io_v1.ServiceMeshController{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*operator_gloo_solo_io_v1.ServiceMeshController)
	}
	return newMap
}

func (s *serviceMeshControllerSet) Insert(
	serviceMeshControllerList ...*operator_gloo_solo_io_v1.ServiceMeshController,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range serviceMeshControllerList {
		s.Generic().Insert(obj)
	}
}

func (s *serviceMeshControllerSet) Has(serviceMeshController ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(serviceMeshController)
}

func (s *serviceMeshControllerSet) Equal(
	serviceMeshControllerSet ServiceMeshControllerSet,
) bool {
	if s == nil {
		return serviceMeshControllerSet == nil
	}
	return s.Generic().Equal(serviceMeshControllerSet.Generic())
}

func (s *serviceMeshControllerSet) Delete(ServiceMeshController ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ServiceMeshController)
}

func (s *serviceMeshControllerSet) Union(set ServiceMeshControllerSet) ServiceMeshControllerSet {
	if s == nil {
		return set
	}
	return NewServiceMeshControllerSet(append(s.List(), set.List()...)...)
}

func (s *serviceMeshControllerSet) Difference(set ServiceMeshControllerSet) ServiceMeshControllerSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &serviceMeshControllerSet{set: newSet}
}

func (s *serviceMeshControllerSet) Intersection(set ServiceMeshControllerSet) ServiceMeshControllerSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var serviceMeshControllerList []*operator_gloo_solo_io_v1.ServiceMeshController
	for _, obj := range newSet.List() {
		serviceMeshControllerList = append(serviceMeshControllerList, obj.(*operator_gloo_solo_io_v1.ServiceMeshController))
	}
	return NewServiceMeshControllerSet(serviceMeshControllerList...)
}

func (s *serviceMeshControllerSet) Find(id ezkube.ResourceId) (*operator_gloo_solo_io_v1.ServiceMeshController, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ServiceMeshController %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&operator_gloo_solo_io_v1.ServiceMeshController{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*operator_gloo_solo_io_v1.ServiceMeshController), nil
}

func (s *serviceMeshControllerSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *serviceMeshControllerSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *serviceMeshControllerSet) Delta(newSet ServiceMeshControllerSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *serviceMeshControllerSet) Clone() ServiceMeshControllerSet {
	if s == nil {
		return nil
	}
	return &serviceMeshControllerSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
