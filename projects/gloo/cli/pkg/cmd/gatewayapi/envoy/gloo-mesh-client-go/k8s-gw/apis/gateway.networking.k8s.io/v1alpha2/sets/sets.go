// Code generated by skv2. DO NOT EDIT.

package v1alpha2sets

import (
	gateway_networking_k8s_io_v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type TCPRouteSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1alpha2.TCPRoute
	// Insert a resource into the set.
	Insert(tCPRoute ...*gateway_networking_k8s_io_v1alpha2.TCPRoute)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(tCPRouteSet TCPRouteSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(tCPRoute ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(tCPRoute ezkube.ResourceId)
	// Return the union with the provided set
	Union(set TCPRouteSet) TCPRouteSet
	// Return the difference with the provided set
	Difference(set TCPRouteSet) TCPRouteSet
	// Return the intersection with the provided set
	Intersection(set TCPRouteSet) TCPRouteSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.TCPRoute, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another TCPRouteSet
	Delta(newSet TCPRouteSet) sksets.ResourceDelta
	// Create a deep copy of the current TCPRouteSet
	Clone() TCPRouteSet
}

func makeGenericTCPRouteSet(tCPRouteList []*gateway_networking_k8s_io_v1alpha2.TCPRoute) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range tCPRouteList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type tCPRouteSet struct {
	set sksets.ResourceSet
}

func NewTCPRouteSet(tCPRouteList ...*gateway_networking_k8s_io_v1alpha2.TCPRoute) TCPRouteSet {
	return &tCPRouteSet{set: makeGenericTCPRouteSet(tCPRouteList)}
}

func NewTCPRouteSetFromList(tCPRouteList *gateway_networking_k8s_io_v1alpha2.TCPRouteList) TCPRouteSet {
	list := make([]*gateway_networking_k8s_io_v1alpha2.TCPRoute, 0, len(tCPRouteList.Items))
	for idx := range tCPRouteList.Items {
		list = append(list, &tCPRouteList.Items[idx])
	}
	return &tCPRouteSet{set: makeGenericTCPRouteSet(list)}
}

func (s *tCPRouteSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *tCPRouteSet) List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
		})
	}

	objs := s.Generic().List(genericFilters...)
	tCPRouteList := make([]*gateway_networking_k8s_io_v1alpha2.TCPRoute, 0, len(objs))
	for _, obj := range objs {
		tCPRouteList = append(tCPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
	}
	return tCPRouteList
}

func (s *tCPRouteSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
		})
	}

	var tCPRouteList []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		tCPRouteList = append(tCPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
	}
	return tCPRouteList
}

func (s *tCPRouteSet) Map() map[string]*gateway_networking_k8s_io_v1alpha2.TCPRoute {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1alpha2.TCPRoute{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1alpha2.TCPRoute)
	}
	return newMap
}

func (s *tCPRouteSet) Insert(
	tCPRouteList ...*gateway_networking_k8s_io_v1alpha2.TCPRoute,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range tCPRouteList {
		s.Generic().Insert(obj)
	}
}

func (s *tCPRouteSet) Has(tCPRoute ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(tCPRoute)
}

func (s *tCPRouteSet) Equal(
	tCPRouteSet TCPRouteSet,
) bool {
	if s == nil {
		return tCPRouteSet == nil
	}
	return s.Generic().Equal(tCPRouteSet.Generic())
}

func (s *tCPRouteSet) Delete(TCPRoute ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(TCPRoute)
}

func (s *tCPRouteSet) Union(set TCPRouteSet) TCPRouteSet {
	if s == nil {
		return set
	}
	return NewTCPRouteSet(append(s.List(), set.List()...)...)
}

func (s *tCPRouteSet) Difference(set TCPRouteSet) TCPRouteSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &tCPRouteSet{set: newSet}
}

func (s *tCPRouteSet) Intersection(set TCPRouteSet) TCPRouteSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var tCPRouteList []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	for _, obj := range newSet.List() {
		tCPRouteList = append(tCPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
	}
	return NewTCPRouteSet(tCPRouteList...)
}

func (s *tCPRouteSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.TCPRoute, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find TCPRoute %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1alpha2.TCPRoute{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute), nil
}

func (s *tCPRouteSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *tCPRouteSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *tCPRouteSet) Delta(newSet TCPRouteSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *tCPRouteSet) Clone() TCPRouteSet {
	if s == nil {
		return nil
	}
	return &tCPRouteSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
