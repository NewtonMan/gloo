// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2alpha1sets

import (
	internal_gloo_solo_io_v2alpha1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/internal.gloo.solo.io/v2alpha1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type SpireRegistrationEntrySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) bool) []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) bool) []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry
	// Insert a resource into the set.
	Insert(spireRegistrationEntry ...*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(spireRegistrationEntrySet SpireRegistrationEntrySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(spireRegistrationEntry ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(spireRegistrationEntry ezkube.ResourceId)
	// Return the union with the provided set
	Union(set SpireRegistrationEntrySet) SpireRegistrationEntrySet
	// Return the difference with the provided set
	Difference(set SpireRegistrationEntrySet) SpireRegistrationEntrySet
	// Return the intersection with the provided set
	Intersection(set SpireRegistrationEntrySet) SpireRegistrationEntrySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another SpireRegistrationEntrySet
	Delta(newSet SpireRegistrationEntrySet) sksets.ResourceDelta
	// Create a deep copy of the current SpireRegistrationEntrySet
	Clone() SpireRegistrationEntrySet
}

func makeGenericSpireRegistrationEntrySet(spireRegistrationEntryList []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range spireRegistrationEntryList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type spireRegistrationEntrySet struct {
	set sksets.ResourceSet
}

func NewSpireRegistrationEntrySet(spireRegistrationEntryList ...*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) SpireRegistrationEntrySet {
	return &spireRegistrationEntrySet{set: makeGenericSpireRegistrationEntrySet(spireRegistrationEntryList)}
}

func NewSpireRegistrationEntrySetFromList(spireRegistrationEntryList *internal_gloo_solo_io_v2alpha1.SpireRegistrationEntryList) SpireRegistrationEntrySet {
	list := make([]*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry, 0, len(spireRegistrationEntryList.Items))
	for idx := range spireRegistrationEntryList.Items {
		list = append(list, &spireRegistrationEntryList.Items[idx])
	}
	return &spireRegistrationEntrySet{set: makeGenericSpireRegistrationEntrySet(list)}
}

func (s *spireRegistrationEntrySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *spireRegistrationEntrySet) List(filterResource ...func(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) bool) []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry))
		})
	}

	objs := s.Generic().List(genericFilters...)
	spireRegistrationEntryList := make([]*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry, 0, len(objs))
	for _, obj := range objs {
		spireRegistrationEntryList = append(spireRegistrationEntryList, obj.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry))
	}
	return spireRegistrationEntryList
}

func (s *spireRegistrationEntrySet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry) bool) []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry))
		})
	}

	var spireRegistrationEntryList []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		spireRegistrationEntryList = append(spireRegistrationEntryList, obj.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry))
	}
	return spireRegistrationEntryList
}

func (s *spireRegistrationEntrySet) Map() map[string]*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry)
	}
	return newMap
}

func (s *spireRegistrationEntrySet) Insert(
	spireRegistrationEntryList ...*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range spireRegistrationEntryList {
		s.Generic().Insert(obj)
	}
}

func (s *spireRegistrationEntrySet) Has(spireRegistrationEntry ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(spireRegistrationEntry)
}

func (s *spireRegistrationEntrySet) Equal(
	spireRegistrationEntrySet SpireRegistrationEntrySet,
) bool {
	if s == nil {
		return spireRegistrationEntrySet == nil
	}
	return s.Generic().Equal(spireRegistrationEntrySet.Generic())
}

func (s *spireRegistrationEntrySet) Delete(SpireRegistrationEntry ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(SpireRegistrationEntry)
}

func (s *spireRegistrationEntrySet) Union(set SpireRegistrationEntrySet) SpireRegistrationEntrySet {
	if s == nil {
		return set
	}
	return NewSpireRegistrationEntrySet(append(s.List(), set.List()...)...)
}

func (s *spireRegistrationEntrySet) Difference(set SpireRegistrationEntrySet) SpireRegistrationEntrySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &spireRegistrationEntrySet{set: newSet}
}

func (s *spireRegistrationEntrySet) Intersection(set SpireRegistrationEntrySet) SpireRegistrationEntrySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var spireRegistrationEntryList []*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry
	for _, obj := range newSet.List() {
		spireRegistrationEntryList = append(spireRegistrationEntryList, obj.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry))
	}
	return NewSpireRegistrationEntrySet(spireRegistrationEntryList...)
}

func (s *spireRegistrationEntrySet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find SpireRegistrationEntry %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2alpha1.SpireRegistrationEntry), nil
}

func (s *spireRegistrationEntrySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *spireRegistrationEntrySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *spireRegistrationEntrySet) Delta(newSet SpireRegistrationEntrySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *spireRegistrationEntrySet) Clone() SpireRegistrationEntrySet {
	if s == nil {
		return nil
	}
	return &spireRegistrationEntrySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type VirtualServiceBackupSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) bool) []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) bool) []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup
	// Return the Set as a map of key to resource.
	Map() map[string]*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup
	// Insert a resource into the set.
	Insert(virtualServiceBackup ...*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(virtualServiceBackupSet VirtualServiceBackupSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(virtualServiceBackup ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(virtualServiceBackup ezkube.ResourceId)
	// Return the union with the provided set
	Union(set VirtualServiceBackupSet) VirtualServiceBackupSet
	// Return the difference with the provided set
	Difference(set VirtualServiceBackupSet) VirtualServiceBackupSet
	// Return the intersection with the provided set
	Intersection(set VirtualServiceBackupSet) VirtualServiceBackupSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another VirtualServiceBackupSet
	Delta(newSet VirtualServiceBackupSet) sksets.ResourceDelta
	// Create a deep copy of the current VirtualServiceBackupSet
	Clone() VirtualServiceBackupSet
}

func makeGenericVirtualServiceBackupSet(virtualServiceBackupList []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range virtualServiceBackupList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type virtualServiceBackupSet struct {
	set sksets.ResourceSet
}

func NewVirtualServiceBackupSet(virtualServiceBackupList ...*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) VirtualServiceBackupSet {
	return &virtualServiceBackupSet{set: makeGenericVirtualServiceBackupSet(virtualServiceBackupList)}
}

func NewVirtualServiceBackupSetFromList(virtualServiceBackupList *internal_gloo_solo_io_v2alpha1.VirtualServiceBackupList) VirtualServiceBackupSet {
	list := make([]*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup, 0, len(virtualServiceBackupList.Items))
	for idx := range virtualServiceBackupList.Items {
		list = append(list, &virtualServiceBackupList.Items[idx])
	}
	return &virtualServiceBackupSet{set: makeGenericVirtualServiceBackupSet(list)}
}

func (s *virtualServiceBackupSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *virtualServiceBackupSet) List(filterResource ...func(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) bool) []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup))
		})
	}

	objs := s.Generic().List(genericFilters...)
	virtualServiceBackupList := make([]*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup, 0, len(objs))
	for _, obj := range objs {
		virtualServiceBackupList = append(virtualServiceBackupList, obj.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup))
	}
	return virtualServiceBackupList
}

func (s *virtualServiceBackupSet) UnsortedList(filterResource ...func(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup) bool) []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup))
		})
	}

	var virtualServiceBackupList []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		virtualServiceBackupList = append(virtualServiceBackupList, obj.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup))
	}
	return virtualServiceBackupList
}

func (s *virtualServiceBackupSet) Map() map[string]*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup {
	if s == nil {
		return nil
	}

	newMap := map[string]*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup)
	}
	return newMap
}

func (s *virtualServiceBackupSet) Insert(
	virtualServiceBackupList ...*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range virtualServiceBackupList {
		s.Generic().Insert(obj)
	}
}

func (s *virtualServiceBackupSet) Has(virtualServiceBackup ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(virtualServiceBackup)
}

func (s *virtualServiceBackupSet) Equal(
	virtualServiceBackupSet VirtualServiceBackupSet,
) bool {
	if s == nil {
		return virtualServiceBackupSet == nil
	}
	return s.Generic().Equal(virtualServiceBackupSet.Generic())
}

func (s *virtualServiceBackupSet) Delete(VirtualServiceBackup ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(VirtualServiceBackup)
}

func (s *virtualServiceBackupSet) Union(set VirtualServiceBackupSet) VirtualServiceBackupSet {
	if s == nil {
		return set
	}
	return NewVirtualServiceBackupSet(append(s.List(), set.List()...)...)
}

func (s *virtualServiceBackupSet) Difference(set VirtualServiceBackupSet) VirtualServiceBackupSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &virtualServiceBackupSet{set: newSet}
}

func (s *virtualServiceBackupSet) Intersection(set VirtualServiceBackupSet) VirtualServiceBackupSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var virtualServiceBackupList []*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup
	for _, obj := range newSet.List() {
		virtualServiceBackupList = append(virtualServiceBackupList, obj.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup))
	}
	return NewVirtualServiceBackupSet(virtualServiceBackupList...)
}

func (s *virtualServiceBackupSet) Find(id ezkube.ResourceId) (*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find VirtualServiceBackup %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&internal_gloo_solo_io_v2alpha1.VirtualServiceBackup{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*internal_gloo_solo_io_v2alpha1.VirtualServiceBackup), nil
}

func (s *virtualServiceBackupSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *virtualServiceBackupSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *virtualServiceBackupSet) Delta(newSet VirtualServiceBackupSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *virtualServiceBackupSet) Clone() VirtualServiceBackupSet {
	if s == nil {
		return nil
	}
	return &virtualServiceBackupSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}
