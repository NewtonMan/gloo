// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go
//
// Generated by this command:
//
//	mockgen -source ./reconcilers.go -destination mocks/reconcilers.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	gomock "go.uber.org/mock/gomock"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"

	v2alpha1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/networking.gloo.solo.io/v2alpha1"
	controller "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/networking.gloo.solo.io/v2alpha1/controller"
)

// MockExternalWorkloadReconciler is a mock of ExternalWorkloadReconciler interface.
type MockExternalWorkloadReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadReconcilerMockRecorder
}

// MockExternalWorkloadReconcilerMockRecorder is the mock recorder for MockExternalWorkloadReconciler.
type MockExternalWorkloadReconcilerMockRecorder struct {
	mock *MockExternalWorkloadReconciler
}

// NewMockExternalWorkloadReconciler creates a new mock instance.
func NewMockExternalWorkloadReconciler(ctrl *gomock.Controller) *MockExternalWorkloadReconciler {
	mock := &MockExternalWorkloadReconciler{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadReconciler) EXPECT() *MockExternalWorkloadReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalWorkload mocks base method.
func (m *MockExternalWorkloadReconciler) ReconcileExternalWorkload(obj *v2alpha1.ExternalWorkload) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalWorkload", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExternalWorkload indicates an expected call of ReconcileExternalWorkload.
func (mr *MockExternalWorkloadReconcilerMockRecorder) ReconcileExternalWorkload(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalWorkload", reflect.TypeOf((*MockExternalWorkloadReconciler)(nil).ReconcileExternalWorkload), obj)
}

// MockExternalWorkloadDeletionReconciler is a mock of ExternalWorkloadDeletionReconciler interface.
type MockExternalWorkloadDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadDeletionReconcilerMockRecorder
}

// MockExternalWorkloadDeletionReconcilerMockRecorder is the mock recorder for MockExternalWorkloadDeletionReconciler.
type MockExternalWorkloadDeletionReconcilerMockRecorder struct {
	mock *MockExternalWorkloadDeletionReconciler
}

// NewMockExternalWorkloadDeletionReconciler creates a new mock instance.
func NewMockExternalWorkloadDeletionReconciler(ctrl *gomock.Controller) *MockExternalWorkloadDeletionReconciler {
	mock := &MockExternalWorkloadDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadDeletionReconciler) EXPECT() *MockExternalWorkloadDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExternalWorkloadDeletion mocks base method.
func (m *MockExternalWorkloadDeletionReconciler) ReconcileExternalWorkloadDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalWorkloadDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExternalWorkloadDeletion indicates an expected call of ReconcileExternalWorkloadDeletion.
func (mr *MockExternalWorkloadDeletionReconcilerMockRecorder) ReconcileExternalWorkloadDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalWorkloadDeletion", reflect.TypeOf((*MockExternalWorkloadDeletionReconciler)(nil).ReconcileExternalWorkloadDeletion), req)
}

// MockExternalWorkloadFinalizer is a mock of ExternalWorkloadFinalizer interface.
type MockExternalWorkloadFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadFinalizerMockRecorder
}

// MockExternalWorkloadFinalizerMockRecorder is the mock recorder for MockExternalWorkloadFinalizer.
type MockExternalWorkloadFinalizerMockRecorder struct {
	mock *MockExternalWorkloadFinalizer
}

// NewMockExternalWorkloadFinalizer creates a new mock instance.
func NewMockExternalWorkloadFinalizer(ctrl *gomock.Controller) *MockExternalWorkloadFinalizer {
	mock := &MockExternalWorkloadFinalizer{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadFinalizer) EXPECT() *MockExternalWorkloadFinalizerMockRecorder {
	return m.recorder
}

// ExternalWorkloadFinalizerName mocks base method.
func (m *MockExternalWorkloadFinalizer) ExternalWorkloadFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalWorkloadFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExternalWorkloadFinalizerName indicates an expected call of ExternalWorkloadFinalizerName.
func (mr *MockExternalWorkloadFinalizerMockRecorder) ExternalWorkloadFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalWorkloadFinalizerName", reflect.TypeOf((*MockExternalWorkloadFinalizer)(nil).ExternalWorkloadFinalizerName))
}

// FinalizeExternalWorkload mocks base method.
func (m *MockExternalWorkloadFinalizer) FinalizeExternalWorkload(obj *v2alpha1.ExternalWorkload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeExternalWorkload", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeExternalWorkload indicates an expected call of FinalizeExternalWorkload.
func (mr *MockExternalWorkloadFinalizerMockRecorder) FinalizeExternalWorkload(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeExternalWorkload", reflect.TypeOf((*MockExternalWorkloadFinalizer)(nil).FinalizeExternalWorkload), obj)
}

// ReconcileExternalWorkload mocks base method.
func (m *MockExternalWorkloadFinalizer) ReconcileExternalWorkload(obj *v2alpha1.ExternalWorkload) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExternalWorkload", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExternalWorkload indicates an expected call of ReconcileExternalWorkload.
func (mr *MockExternalWorkloadFinalizerMockRecorder) ReconcileExternalWorkload(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExternalWorkload", reflect.TypeOf((*MockExternalWorkloadFinalizer)(nil).ReconcileExternalWorkload), obj)
}

// MockExternalWorkloadReconcileLoop is a mock of ExternalWorkloadReconcileLoop interface.
type MockExternalWorkloadReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockExternalWorkloadReconcileLoopMockRecorder
}

// MockExternalWorkloadReconcileLoopMockRecorder is the mock recorder for MockExternalWorkloadReconcileLoop.
type MockExternalWorkloadReconcileLoopMockRecorder struct {
	mock *MockExternalWorkloadReconcileLoop
}

// NewMockExternalWorkloadReconcileLoop creates a new mock instance.
func NewMockExternalWorkloadReconcileLoop(ctrl *gomock.Controller) *MockExternalWorkloadReconcileLoop {
	mock := &MockExternalWorkloadReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockExternalWorkloadReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalWorkloadReconcileLoop) EXPECT() *MockExternalWorkloadReconcileLoopMockRecorder {
	return m.recorder
}

// RunExternalWorkloadReconciler mocks base method.
func (m *MockExternalWorkloadReconcileLoop) RunExternalWorkloadReconciler(ctx context.Context, rec controller.ExternalWorkloadReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunExternalWorkloadReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunExternalWorkloadReconciler indicates an expected call of RunExternalWorkloadReconciler.
func (mr *MockExternalWorkloadReconcileLoopMockRecorder) RunExternalWorkloadReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunExternalWorkloadReconciler", reflect.TypeOf((*MockExternalWorkloadReconcileLoop)(nil).RunExternalWorkloadReconciler), varargs...)
}

// MockProgressiveDeliveryReconciler is a mock of ProgressiveDeliveryReconciler interface.
type MockProgressiveDeliveryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryReconcilerMockRecorder
}

// MockProgressiveDeliveryReconcilerMockRecorder is the mock recorder for MockProgressiveDeliveryReconciler.
type MockProgressiveDeliveryReconcilerMockRecorder struct {
	mock *MockProgressiveDeliveryReconciler
}

// NewMockProgressiveDeliveryReconciler creates a new mock instance.
func NewMockProgressiveDeliveryReconciler(ctrl *gomock.Controller) *MockProgressiveDeliveryReconciler {
	mock := &MockProgressiveDeliveryReconciler{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryReconciler) EXPECT() *MockProgressiveDeliveryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryReconciler) ReconcileProgressiveDelivery(obj *v2alpha1.ProgressiveDelivery) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProgressiveDelivery", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileProgressiveDelivery indicates an expected call of ReconcileProgressiveDelivery.
func (mr *MockProgressiveDeliveryReconcilerMockRecorder) ReconcileProgressiveDelivery(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryReconciler)(nil).ReconcileProgressiveDelivery), obj)
}

// MockProgressiveDeliveryDeletionReconciler is a mock of ProgressiveDeliveryDeletionReconciler interface.
type MockProgressiveDeliveryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryDeletionReconcilerMockRecorder
}

// MockProgressiveDeliveryDeletionReconcilerMockRecorder is the mock recorder for MockProgressiveDeliveryDeletionReconciler.
type MockProgressiveDeliveryDeletionReconcilerMockRecorder struct {
	mock *MockProgressiveDeliveryDeletionReconciler
}

// NewMockProgressiveDeliveryDeletionReconciler creates a new mock instance.
func NewMockProgressiveDeliveryDeletionReconciler(ctrl *gomock.Controller) *MockProgressiveDeliveryDeletionReconciler {
	mock := &MockProgressiveDeliveryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryDeletionReconciler) EXPECT() *MockProgressiveDeliveryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileProgressiveDeliveryDeletion mocks base method.
func (m *MockProgressiveDeliveryDeletionReconciler) ReconcileProgressiveDeliveryDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProgressiveDeliveryDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileProgressiveDeliveryDeletion indicates an expected call of ReconcileProgressiveDeliveryDeletion.
func (mr *MockProgressiveDeliveryDeletionReconcilerMockRecorder) ReconcileProgressiveDeliveryDeletion(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProgressiveDeliveryDeletion", reflect.TypeOf((*MockProgressiveDeliveryDeletionReconciler)(nil).ReconcileProgressiveDeliveryDeletion), req)
}

// MockProgressiveDeliveryFinalizer is a mock of ProgressiveDeliveryFinalizer interface.
type MockProgressiveDeliveryFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryFinalizerMockRecorder
}

// MockProgressiveDeliveryFinalizerMockRecorder is the mock recorder for MockProgressiveDeliveryFinalizer.
type MockProgressiveDeliveryFinalizerMockRecorder struct {
	mock *MockProgressiveDeliveryFinalizer
}

// NewMockProgressiveDeliveryFinalizer creates a new mock instance.
func NewMockProgressiveDeliveryFinalizer(ctrl *gomock.Controller) *MockProgressiveDeliveryFinalizer {
	mock := &MockProgressiveDeliveryFinalizer{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryFinalizer) EXPECT() *MockProgressiveDeliveryFinalizerMockRecorder {
	return m.recorder
}

// FinalizeProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryFinalizer) FinalizeProgressiveDelivery(obj *v2alpha1.ProgressiveDelivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeProgressiveDelivery", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeProgressiveDelivery indicates an expected call of FinalizeProgressiveDelivery.
func (mr *MockProgressiveDeliveryFinalizerMockRecorder) FinalizeProgressiveDelivery(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryFinalizer)(nil).FinalizeProgressiveDelivery), obj)
}

// ProgressiveDeliveryFinalizerName mocks base method.
func (m *MockProgressiveDeliveryFinalizer) ProgressiveDeliveryFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgressiveDeliveryFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProgressiveDeliveryFinalizerName indicates an expected call of ProgressiveDeliveryFinalizerName.
func (mr *MockProgressiveDeliveryFinalizerMockRecorder) ProgressiveDeliveryFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgressiveDeliveryFinalizerName", reflect.TypeOf((*MockProgressiveDeliveryFinalizer)(nil).ProgressiveDeliveryFinalizerName))
}

// ReconcileProgressiveDelivery mocks base method.
func (m *MockProgressiveDeliveryFinalizer) ReconcileProgressiveDelivery(obj *v2alpha1.ProgressiveDelivery) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileProgressiveDelivery", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileProgressiveDelivery indicates an expected call of ReconcileProgressiveDelivery.
func (mr *MockProgressiveDeliveryFinalizerMockRecorder) ReconcileProgressiveDelivery(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProgressiveDelivery", reflect.TypeOf((*MockProgressiveDeliveryFinalizer)(nil).ReconcileProgressiveDelivery), obj)
}

// MockProgressiveDeliveryReconcileLoop is a mock of ProgressiveDeliveryReconcileLoop interface.
type MockProgressiveDeliveryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockProgressiveDeliveryReconcileLoopMockRecorder
}

// MockProgressiveDeliveryReconcileLoopMockRecorder is the mock recorder for MockProgressiveDeliveryReconcileLoop.
type MockProgressiveDeliveryReconcileLoopMockRecorder struct {
	mock *MockProgressiveDeliveryReconcileLoop
}

// NewMockProgressiveDeliveryReconcileLoop creates a new mock instance.
func NewMockProgressiveDeliveryReconcileLoop(ctrl *gomock.Controller) *MockProgressiveDeliveryReconcileLoop {
	mock := &MockProgressiveDeliveryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockProgressiveDeliveryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressiveDeliveryReconcileLoop) EXPECT() *MockProgressiveDeliveryReconcileLoopMockRecorder {
	return m.recorder
}

// RunProgressiveDeliveryReconciler mocks base method.
func (m *MockProgressiveDeliveryReconcileLoop) RunProgressiveDeliveryReconciler(ctx context.Context, rec controller.ProgressiveDeliveryReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunProgressiveDeliveryReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunProgressiveDeliveryReconciler indicates an expected call of RunProgressiveDeliveryReconciler.
func (mr *MockProgressiveDeliveryReconcileLoopMockRecorder) RunProgressiveDeliveryReconciler(ctx, rec any, predicates ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunProgressiveDeliveryReconciler", reflect.TypeOf((*MockProgressiveDeliveryReconcileLoop)(nil).RunProgressiveDeliveryReconciler), varargs...)
}
