// Code generated by skv2. DO NOT EDIT.

package v1alpha2

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
	gateway_networking_k8s_io_v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MulticlusterClientset for the gateway.networking.k8s.io/v1alpha2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the gateway.networking.k8s.io/v1alpha2 APIs
type Clientset interface {
	// clienset for the gateway.networking.k8s.io/v1alpha2/v1alpha2 APIs
	TCPRoutes() TCPRouteClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := gateway_networking_k8s_io_v1alpha2.SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the gateway.networking.k8s.io/v1alpha2/v1alpha2 APIs
func (c *clientSet) TCPRoutes() TCPRouteClient {
	return NewTCPRouteClient(c.client)
}

// Reader knows how to read and list TCPRoutes.
type TCPRouteReader interface {
	// Get retrieves a TCPRoute for the given object key
	GetTCPRoute(ctx context.Context, key client.ObjectKey) (*gateway_networking_k8s_io_v1alpha2.TCPRoute, error)

	// List retrieves list of TCPRoutes for a given namespace and list options.
	ListTCPRoute(ctx context.Context, opts ...client.ListOption) (*gateway_networking_k8s_io_v1alpha2.TCPRouteList, error)
}

// TCPRouteTransitionFunction instructs the TCPRouteWriter how to transition between an existing
// TCPRoute object and a desired on an Upsert
type TCPRouteTransitionFunction func(existing, desired *gateway_networking_k8s_io_v1alpha2.TCPRoute) error

// Writer knows how to create, delete, and update TCPRoutes.
type TCPRouteWriter interface {
	// Create saves the TCPRoute object.
	CreateTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, opts ...client.CreateOption) error

	// Delete deletes the TCPRoute object.
	DeleteTCPRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given TCPRoute object.
	UpdateTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, opts ...client.UpdateOption) error

	// Patch patches the given TCPRoute object.
	PatchTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all TCPRoute objects matching the given options.
	DeleteAllOfTCPRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the TCPRoute object.
	UpsertTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, transitionFuncs ...TCPRouteTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a TCPRoute object.
type TCPRouteStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given TCPRoute object.
	UpdateTCPRouteStatus(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given TCPRoute object's subresource.
	PatchTCPRouteStatus(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on TCPRoutes.
type TCPRouteClient interface {
	TCPRouteReader
	TCPRouteWriter
	TCPRouteStatusWriter
}

type tCPRouteClient struct {
	client client.Client
}

func NewTCPRouteClient(client client.Client) *tCPRouteClient {
	return &tCPRouteClient{client: client}
}

func (c *tCPRouteClient) GetTCPRoute(ctx context.Context, key client.ObjectKey) (*gateway_networking_k8s_io_v1alpha2.TCPRoute, error) {
	obj := &gateway_networking_k8s_io_v1alpha2.TCPRoute{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *tCPRouteClient) ListTCPRoute(ctx context.Context, opts ...client.ListOption) (*gateway_networking_k8s_io_v1alpha2.TCPRouteList, error) {
	list := &gateway_networking_k8s_io_v1alpha2.TCPRouteList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *tCPRouteClient) CreateTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *tCPRouteClient) DeleteTCPRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &gateway_networking_k8s_io_v1alpha2.TCPRoute{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *tCPRouteClient) UpdateTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *tCPRouteClient) PatchTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *tCPRouteClient) DeleteAllOfTCPRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &gateway_networking_k8s_io_v1alpha2.TCPRoute{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *tCPRouteClient) UpsertTCPRoute(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, transitionFuncs ...TCPRouteTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*gateway_networking_k8s_io_v1alpha2.TCPRoute), desired.(*gateway_networking_k8s_io_v1alpha2.TCPRoute)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *tCPRouteClient) UpdateTCPRouteStatus(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *tCPRouteClient) PatchTCPRouteStatus(ctx context.Context, obj *gateway_networking_k8s_io_v1alpha2.TCPRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides TCPRouteClients for multiple clusters.
type MulticlusterTCPRouteClient interface {
	// Cluster returns a TCPRouteClient for the given cluster
	Cluster(cluster string) (TCPRouteClient, error)
}

type multiclusterTCPRouteClient struct {
	client multicluster.Client
}

func NewMulticlusterTCPRouteClient(client multicluster.Client) MulticlusterTCPRouteClient {
	return &multiclusterTCPRouteClient{client: client}
}

func (m *multiclusterTCPRouteClient) Cluster(cluster string) (TCPRouteClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewTCPRouteClient(client), nil
}
