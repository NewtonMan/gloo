// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	networking_gloo_solo_io_v2alpha1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/networking.gloo.solo.io/v2alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the ExternalWorkload Resource.
// implemented by the user
type ExternalWorkloadReconciler interface {
	ReconcileExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) (reconcile.Result, error)
}

// Reconcile deletion events for the ExternalWorkload Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ExternalWorkloadDeletionReconciler interface {
	ReconcileExternalWorkloadDeletion(req reconcile.Request) error
}

type ExternalWorkloadReconcilerFuncs struct {
	OnReconcileExternalWorkload         func(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) (reconcile.Result, error)
	OnReconcileExternalWorkloadDeletion func(req reconcile.Request) error
}

func (f *ExternalWorkloadReconcilerFuncs) ReconcileExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) (reconcile.Result, error) {
	if f.OnReconcileExternalWorkload == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileExternalWorkload(obj)
}

func (f *ExternalWorkloadReconcilerFuncs) ReconcileExternalWorkloadDeletion(req reconcile.Request) error {
	if f.OnReconcileExternalWorkloadDeletion == nil {
		return nil
	}
	return f.OnReconcileExternalWorkloadDeletion(req)
}

// Reconcile and finalize the ExternalWorkload Resource
// implemented by the user
type ExternalWorkloadFinalizer interface {
	ExternalWorkloadReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ExternalWorkloadFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeExternalWorkload(obj *networking_gloo_solo_io_v2alpha1.ExternalWorkload) error
}

type ExternalWorkloadReconcileLoop interface {
	RunExternalWorkloadReconciler(ctx context.Context, rec ExternalWorkloadReconciler, predicates ...predicate.Predicate) error
}

type externalWorkloadReconcileLoop struct {
	loop reconcile.Loop
}

func NewExternalWorkloadReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ExternalWorkloadReconcileLoop {
	return &externalWorkloadReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &networking_gloo_solo_io_v2alpha1.ExternalWorkload{}, options),
	}
}

func (c *externalWorkloadReconcileLoop) RunExternalWorkloadReconciler(ctx context.Context, reconciler ExternalWorkloadReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericExternalWorkloadReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ExternalWorkloadFinalizer); ok {
		reconcilerWrapper = genericExternalWorkloadFinalizer{
			genericExternalWorkloadReconciler: genericReconciler,
			finalizingReconciler:              finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericExternalWorkloadHandler implements a generic reconcile.Reconciler
type genericExternalWorkloadReconciler struct {
	reconciler ExternalWorkloadReconciler
}

func (r genericExternalWorkloadReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ExternalWorkload handler received event for %T", object)
	}
	return r.reconciler.ReconcileExternalWorkload(obj)
}

func (r genericExternalWorkloadReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(ExternalWorkloadDeletionReconciler); ok {
		return deletionReconciler.ReconcileExternalWorkloadDeletion(request)
	}
	return nil
}

// genericExternalWorkloadFinalizer implements a generic reconcile.FinalizingReconciler
type genericExternalWorkloadFinalizer struct {
	genericExternalWorkloadReconciler
	finalizingReconciler ExternalWorkloadFinalizer
}

func (r genericExternalWorkloadFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ExternalWorkloadFinalizerName()
}

func (r genericExternalWorkloadFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ExternalWorkload)
	if !ok {
		return errors.Errorf("internal error: ExternalWorkload handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeExternalWorkload(obj)
}

// Reconcile Upsert events for the ProgressiveDelivery Resource.
// implemented by the user
type ProgressiveDeliveryReconciler interface {
	ReconcileProgressiveDelivery(obj *networking_gloo_solo_io_v2alpha1.ProgressiveDelivery) (reconcile.Result, error)
}

// Reconcile deletion events for the ProgressiveDelivery Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ProgressiveDeliveryDeletionReconciler interface {
	ReconcileProgressiveDeliveryDeletion(req reconcile.Request) error
}

type ProgressiveDeliveryReconcilerFuncs struct {
	OnReconcileProgressiveDelivery         func(obj *networking_gloo_solo_io_v2alpha1.ProgressiveDelivery) (reconcile.Result, error)
	OnReconcileProgressiveDeliveryDeletion func(req reconcile.Request) error
}

func (f *ProgressiveDeliveryReconcilerFuncs) ReconcileProgressiveDelivery(obj *networking_gloo_solo_io_v2alpha1.ProgressiveDelivery) (reconcile.Result, error) {
	if f.OnReconcileProgressiveDelivery == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileProgressiveDelivery(obj)
}

func (f *ProgressiveDeliveryReconcilerFuncs) ReconcileProgressiveDeliveryDeletion(req reconcile.Request) error {
	if f.OnReconcileProgressiveDeliveryDeletion == nil {
		return nil
	}
	return f.OnReconcileProgressiveDeliveryDeletion(req)
}

// Reconcile and finalize the ProgressiveDelivery Resource
// implemented by the user
type ProgressiveDeliveryFinalizer interface {
	ProgressiveDeliveryReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ProgressiveDeliveryFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeProgressiveDelivery(obj *networking_gloo_solo_io_v2alpha1.ProgressiveDelivery) error
}

type ProgressiveDeliveryReconcileLoop interface {
	RunProgressiveDeliveryReconciler(ctx context.Context, rec ProgressiveDeliveryReconciler, predicates ...predicate.Predicate) error
}

type progressiveDeliveryReconcileLoop struct {
	loop reconcile.Loop
}

func NewProgressiveDeliveryReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ProgressiveDeliveryReconcileLoop {
	return &progressiveDeliveryReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &networking_gloo_solo_io_v2alpha1.ProgressiveDelivery{}, options),
	}
}

func (c *progressiveDeliveryReconcileLoop) RunProgressiveDeliveryReconciler(ctx context.Context, reconciler ProgressiveDeliveryReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericProgressiveDeliveryReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ProgressiveDeliveryFinalizer); ok {
		reconcilerWrapper = genericProgressiveDeliveryFinalizer{
			genericProgressiveDeliveryReconciler: genericReconciler,
			finalizingReconciler:                 finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericProgressiveDeliveryHandler implements a generic reconcile.Reconciler
type genericProgressiveDeliveryReconciler struct {
	reconciler ProgressiveDeliveryReconciler
}

func (r genericProgressiveDeliveryReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ProgressiveDelivery)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ProgressiveDelivery handler received event for %T", object)
	}
	return r.reconciler.ReconcileProgressiveDelivery(obj)
}

func (r genericProgressiveDeliveryReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(ProgressiveDeliveryDeletionReconciler); ok {
		return deletionReconciler.ReconcileProgressiveDeliveryDeletion(request)
	}
	return nil
}

// genericProgressiveDeliveryFinalizer implements a generic reconcile.FinalizingReconciler
type genericProgressiveDeliveryFinalizer struct {
	genericProgressiveDeliveryReconciler
	finalizingReconciler ProgressiveDeliveryFinalizer
}

func (r genericProgressiveDeliveryFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ProgressiveDeliveryFinalizerName()
}

func (r genericProgressiveDeliveryFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*networking_gloo_solo_io_v2alpha1.ProgressiveDelivery)
	if !ok {
		return errors.Errorf("internal error: ProgressiveDelivery handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeProgressiveDelivery(obj)
}
