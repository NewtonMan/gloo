// Code generated by skv2. DO NOT EDIT.

package v1

import (
	operator_gloo_solo_io_v1 "github.com/solo-io/gloo/projects/gloo/cli/pkg/cmd/gatewayapi/envoy/gloo-mesh-client-go/operator.gloo.solo.io/v1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for ServiceMeshControllerClient from Clientset
func ServiceMeshControllerClientFromClientsetProvider(clients operator_gloo_solo_io_v1.Clientset) operator_gloo_solo_io_v1.ServiceMeshControllerClient {
	return clients.ServiceMeshControllers()
}

// Provider for ServiceMeshController Client from Client
func ServiceMeshControllerClientProvider(client client.Client) operator_gloo_solo_io_v1.ServiceMeshControllerClient {
	return operator_gloo_solo_io_v1.NewServiceMeshControllerClient(client)
}

type ServiceMeshControllerClientFactory func(client client.Client) operator_gloo_solo_io_v1.ServiceMeshControllerClient

func ServiceMeshControllerClientFactoryProvider() ServiceMeshControllerClientFactory {
	return ServiceMeshControllerClientProvider
}

type ServiceMeshControllerClientFromConfigFactory func(cfg *rest.Config) (operator_gloo_solo_io_v1.ServiceMeshControllerClient, error)

func ServiceMeshControllerClientFromConfigFactoryProvider() ServiceMeshControllerClientFromConfigFactory {
	return func(cfg *rest.Config) (operator_gloo_solo_io_v1.ServiceMeshControllerClient, error) {
		clients, err := operator_gloo_solo_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ServiceMeshControllers(), nil
	}
}
