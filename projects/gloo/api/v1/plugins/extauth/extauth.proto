syntax = "proto3";
package extauth.plugins.gloo.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/gloo/pkg/api/v1/plugins/extauth";

import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "envoy/api/v2/discovery.proto";
import "google/api/annotations.proto";


message Settings { 
    core.solo.io.ResourceRef extauthz_server_ref = 1; 
  string user_id_header = 3;
}

message BasicAuth {
    string realm = 1;

  message Apr {
    message SaltedHashedPassword {
      string salt = 1;
      string hashed_password = 2;
    }
    map<string, SaltedHashedPassword> users = 2;
    }
  Apr apr = 2;
}

message OAuth {
  // your client id as registered with the issuer
  string client_id = 1;

  // your client secret as registered with the issuer
  core.solo.io.ResourceRef client_secret_ref = 2;

  // The url of the issuer. We will look for OIDC information in issuerUrl+
  // ".well-known/openid-configuration"
  string issuer_url = 3;

  // we to redirect after successful auth, if we can't determine the original
  // url this should be your publicly available app url.
  string app_url = 4;

  // a callback path relative to app url that will be used for OIDC callbacks.
  // needs to not be used by the application
  string callback_path = 5;
}

message OauthSecret { string client_secret = 1; }

message VhostExtension {
  oneof auth_config {
    BasicAuth basic_auth = 1;
    OAuth oauth = 2;
  }
}

message RouteExtension { bool disable = 1; }


/*
@solo-kit:xds-service=ExtAuthDiscoveryService
@solo-kit:resource.no_references
 */
message ExtAuthConfig {

  // @solo-kit:resource.name
  string vhost = 1;

  message OAuthConfig {
    // your client id as registered with the issuer
    string client_id = 1;

    // your client secret as registered with the issuer
    string client_secret = 2;

    // The url of the issuer. We will look for OIDC information in issuerUrl+
    // ".well-known/openid-configuration"
    string issuer_url = 3;

    // we to redirect after successful auth, if we can't determine the original
    // url this should be your publicly available app url.
    string app_url = 4;

    // a callback path relative to app url that will be used for OIDC callbacks.
    // needs to not be used by the application
    string callback_path = 5;
  }

  oneof auth_config {
    OAuthConfig oauth = 3;
    BasicAuth basic_auth = 4;
  }
}

/*
@solo-kit:resource.xds-enabled
*/
service ExtAuthDiscoveryService {
  rpc StreamExtAuthConfig(stream envoy.api.v2.DiscoveryRequest)
      returns (stream envoy.api.v2.DiscoveryResponse) {}

  rpc DeltaExtAuthConfig(stream envoy.api.v2.DeltaDiscoveryRequest)
      returns (stream envoy.api.v2.DeltaDiscoveryResponse) {}

  rpc FetchExtAuthConfig(envoy.api.v2.DiscoveryRequest)
      returns (envoy.api.v2.DiscoveryResponse) {
    option (google.api.http) = {
      post : "/v2/discovery:extauthconfig"
      body : "*"
    };
  }
}
