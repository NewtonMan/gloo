/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../extproto/ext_pb.js');
var github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/gloo-fed/api/fed.gloo/v1/upstream_pb.js');
var github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/gloo-fed/api/fed.gloo/v1/upstream_group_pb.js');
var github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/gloo-fed/api/fed.gloo/v1/settings_pb.js');
var github_com_solo$io_skv2_api_core_v1_core_pb = require('../../../../../../../../github.com/solo-io/skv2/api/core/v1/core_pb.js');
var github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/apiserver/api/fed.rpc/v1/common_pb.js');
goog.exportSymbol('proto.fed.rpc.solo.io.FederatedSettings', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.FederatedUpstream', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.FederatedUpstreamGroup', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListFederatedSettingsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListFederatedSettingsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.FederatedUpstream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.FederatedUpstream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.FederatedUpstream.displayName = 'proto.fed.rpc.solo.io.FederatedUpstream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.FederatedUpstream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.FederatedUpstream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.FederatedUpstream.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.FederatedUpstream}
 */
proto.fed.rpc.solo.io.FederatedUpstream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.FederatedUpstream;
  return proto.fed.rpc.solo.io.FederatedUpstream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.FederatedUpstream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.FederatedUpstream}
 */
proto.fed.rpc.solo.io.FederatedUpstream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamSpec;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamStatus;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.FederatedUpstream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.FederatedUpstream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.FederatedUpstream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.FederatedUpstream.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fed.gloo.solo.io.FederatedUpstreamSpec spec = 2;
 * @return {?proto.fed.gloo.solo.io.FederatedUpstreamSpec}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.getSpec = function() {
  return /** @type{?proto.fed.gloo.solo.io.FederatedUpstreamSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamSpec, 2));
};


/** @param {?proto.fed.gloo.solo.io.FederatedUpstreamSpec|undefined} value */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.FederatedUpstream.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fed.gloo.solo.io.FederatedUpstreamStatus status = 3;
 * @return {?proto.fed.gloo.solo.io.FederatedUpstreamStatus}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.getStatus = function() {
  return /** @type{?proto.fed.gloo.solo.io.FederatedUpstreamStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_pb.FederatedUpstreamStatus, 3));
};


/** @param {?proto.fed.gloo.solo.io.FederatedUpstreamStatus|undefined} value */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.FederatedUpstream.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedUpstream.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.FederatedUpstreamGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.FederatedUpstreamGroup.displayName = 'proto.fed.rpc.solo.io.FederatedUpstreamGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.FederatedUpstreamGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.FederatedUpstreamGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.FederatedUpstreamGroup}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.FederatedUpstreamGroup;
  return proto.fed.rpc.solo.io.FederatedUpstreamGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.FederatedUpstreamGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.FederatedUpstreamGroup}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupSpec;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupStatus;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.FederatedUpstreamGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.FederatedUpstreamGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fed.gloo.solo.io.FederatedUpstreamGroupSpec spec = 2;
 * @return {?proto.fed.gloo.solo.io.FederatedUpstreamGroupSpec}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.getSpec = function() {
  return /** @type{?proto.fed.gloo.solo.io.FederatedUpstreamGroupSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupSpec, 2));
};


/** @param {?proto.fed.gloo.solo.io.FederatedUpstreamGroupSpec|undefined} value */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fed.gloo.solo.io.FederatedUpstreamGroupStatus status = 3;
 * @return {?proto.fed.gloo.solo.io.FederatedUpstreamGroupStatus}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.getStatus = function() {
  return /** @type{?proto.fed.gloo.solo.io.FederatedUpstreamGroupStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_upstream_group_pb.FederatedUpstreamGroupStatus, 3));
};


/** @param {?proto.fed.gloo.solo.io.FederatedUpstreamGroupStatus|undefined} value */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedUpstreamGroup.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.FederatedSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.FederatedSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.FederatedSettings.displayName = 'proto.fed.rpc.solo.io.FederatedSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.FederatedSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.FederatedSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.FederatedSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.FederatedSettings}
 */
proto.fed.rpc.solo.io.FederatedSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.FederatedSettings;
  return proto.fed.rpc.solo.io.FederatedSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.FederatedSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.FederatedSettings}
 */
proto.fed.rpc.solo.io.FederatedSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsSpec;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsStatus;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.FederatedSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.FederatedSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.FederatedSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.FederatedSettings.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.FederatedSettings.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fed.gloo.solo.io.FederatedSettingsSpec spec = 2;
 * @return {?proto.fed.gloo.solo.io.FederatedSettingsSpec}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.getSpec = function() {
  return /** @type{?proto.fed.gloo.solo.io.FederatedSettingsSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsSpec, 2));
};


/** @param {?proto.fed.gloo.solo.io.FederatedSettingsSpec|undefined} value */
proto.fed.rpc.solo.io.FederatedSettings.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.FederatedSettings.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fed.gloo.solo.io.FederatedSettingsStatus status = 3;
 * @return {?proto.fed.gloo.solo.io.FederatedSettingsStatus}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.getStatus = function() {
  return /** @type{?proto.fed.gloo.solo.io.FederatedSettingsStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_gloo_v1_settings_pb.FederatedSettingsStatus, 3));
};


/** @param {?proto.fed.gloo.solo.io.FederatedSettingsStatus|undefined} value */
proto.fed.rpc.solo.io.FederatedSettings.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.FederatedSettings.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.FederatedSettings.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.displayName = 'proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest;
  return proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.displayName = 'proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    federatedUpstreamsList: jspb.Message.toObjectList(msg.getFederatedUpstreamsList(),
    proto.fed.rpc.solo.io.FederatedUpstream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse;
  return proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.FederatedUpstream;
      reader.readMessage(value,proto.fed.rpc.solo.io.FederatedUpstream.deserializeBinaryFromReader);
      msg.addFederatedUpstreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFederatedUpstreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.FederatedUpstream.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FederatedUpstream federated_upstreams = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.FederatedUpstream>}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.prototype.getFederatedUpstreamsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.FederatedUpstream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.FederatedUpstream, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.FederatedUpstream>} value */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.prototype.setFederatedUpstreamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.FederatedUpstream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.FederatedUpstream}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.prototype.addFederatedUpstreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.FederatedUpstream, opt_index);
};


proto.fed.rpc.solo.io.ListFederatedUpstreamsResponse.prototype.clearFederatedUpstreamsList = function() {
  this.setFederatedUpstreamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    federatedUpstreamRef: (f = msg.getFederatedUpstreamRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest;
  return proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setFederatedUpstreamRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFederatedUpstreamRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef federated_upstream_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.prototype.getFederatedUpstreamRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.prototype.setFederatedUpstreamRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.prototype.clearFederatedUpstreamRef = function() {
  this.setFederatedUpstreamRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlRequest.prototype.hasFederatedUpstreamRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse;
  return proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.displayName = 'proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest;
  return proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.displayName = 'proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    federatedUpstreamGroupsList: jspb.Message.toObjectList(msg.getFederatedUpstreamGroupsList(),
    proto.fed.rpc.solo.io.FederatedUpstreamGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse;
  return proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.FederatedUpstreamGroup;
      reader.readMessage(value,proto.fed.rpc.solo.io.FederatedUpstreamGroup.deserializeBinaryFromReader);
      msg.addFederatedUpstreamGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFederatedUpstreamGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.FederatedUpstreamGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FederatedUpstreamGroup federated_upstream_groups = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.FederatedUpstreamGroup>}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.prototype.getFederatedUpstreamGroupsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.FederatedUpstreamGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.FederatedUpstreamGroup, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.FederatedUpstreamGroup>} value */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.prototype.setFederatedUpstreamGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.FederatedUpstreamGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.FederatedUpstreamGroup}
 */
proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.prototype.addFederatedUpstreamGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.FederatedUpstreamGroup, opt_index);
};


proto.fed.rpc.solo.io.ListFederatedUpstreamGroupsResponse.prototype.clearFederatedUpstreamGroupsList = function() {
  this.setFederatedUpstreamGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    federatedUpstreamGroupRef: (f = msg.getFederatedUpstreamGroupRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest;
  return proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setFederatedUpstreamGroupRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFederatedUpstreamGroupRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef federated_upstream_group_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.prototype.getFederatedUpstreamGroupRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.prototype.setFederatedUpstreamGroupRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.prototype.clearFederatedUpstreamGroupRef = function() {
  this.setFederatedUpstreamGroupRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlRequest.prototype.hasFederatedUpstreamGroupRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse;
  return proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetFederatedUpstreamGroupYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListFederatedSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListFederatedSettingsRequest.displayName = 'proto.fed.rpc.solo.io.ListFederatedSettingsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListFederatedSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListFederatedSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListFederatedSettingsRequest}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListFederatedSettingsRequest;
  return proto.fed.rpc.solo.io.ListFederatedSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListFederatedSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListFederatedSettingsRequest}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListFederatedSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListFederatedSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListFederatedSettingsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListFederatedSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListFederatedSettingsResponse.displayName = 'proto.fed.rpc.solo.io.ListFederatedSettingsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListFederatedSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListFederatedSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    federatedSettingsList: jspb.Message.toObjectList(msg.getFederatedSettingsList(),
    proto.fed.rpc.solo.io.FederatedSettings.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListFederatedSettingsResponse}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListFederatedSettingsResponse;
  return proto.fed.rpc.solo.io.ListFederatedSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListFederatedSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListFederatedSettingsResponse}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.FederatedSettings;
      reader.readMessage(value,proto.fed.rpc.solo.io.FederatedSettings.deserializeBinaryFromReader);
      msg.addFederatedSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListFederatedSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListFederatedSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFederatedSettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.FederatedSettings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FederatedSettings federated_settings = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.FederatedSettings>}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.prototype.getFederatedSettingsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.FederatedSettings>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.FederatedSettings, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.FederatedSettings>} value */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.prototype.setFederatedSettingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.FederatedSettings=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.FederatedSettings}
 */
proto.fed.rpc.solo.io.ListFederatedSettingsResponse.prototype.addFederatedSettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.FederatedSettings, opt_index);
};


proto.fed.rpc.solo.io.ListFederatedSettingsResponse.prototype.clearFederatedSettingsList = function() {
  this.setFederatedSettingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    federatedSettingsRef: (f = msg.getFederatedSettingsRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest;
  return proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setFederatedSettingsRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFederatedSettingsRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef federated_settings_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.prototype.getFederatedSettingsRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.prototype.setFederatedSettingsRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.prototype.clearFederatedSettingsRef = function() {
  this.setFederatedSettingsRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlRequest.prototype.hasFederatedSettingsRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse;
  return proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetFederatedSettingsYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.fed.rpc.solo.io);
