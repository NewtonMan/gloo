/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../extproto/ext_pb.js');
var github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/gloo-fed/api/fed/v1/instance_pb.js');
var github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/apiserver/api/fed.rpc/v1/common_pb.js');
var github_com_solo$io_skv2_api_core_v1_core_pb = require('../../../../../../../../github.com/solo-io/skv2/api/core/v1/core_pb.js');
goog.exportSymbol('proto.fed.rpc.solo.io.ClusterDetails', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ConfigDump', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetConfigDumpsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetConfigDumpsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GlooInstance', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListClusterDetailsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListClusterDetailsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListGlooInstancesRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListGlooInstancesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GlooInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GlooInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GlooInstance.displayName = 'proto.fed.rpc.solo.io.GlooInstance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GlooInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GlooInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GlooInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GlooInstance}
 */
proto.fed.rpc.solo.io.GlooInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GlooInstance;
  return proto.fed.rpc.solo.io.GlooInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GlooInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GlooInstance}
 */
proto.fed.rpc.solo.io.GlooInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceSpec;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceStatus;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GlooInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GlooInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GlooInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.GlooInstance.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GlooInstance.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fed.solo.io.GlooInstanceSpec spec = 2;
 * @return {?proto.fed.solo.io.GlooInstanceSpec}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.getSpec = function() {
  return /** @type{?proto.fed.solo.io.GlooInstanceSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceSpec, 2));
};


/** @param {?proto.fed.solo.io.GlooInstanceSpec|undefined} value */
proto.fed.rpc.solo.io.GlooInstance.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.GlooInstance.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fed.solo.io.GlooInstanceStatus status = 3;
 * @return {?proto.fed.solo.io.GlooInstanceStatus}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.getStatus = function() {
  return /** @type{?proto.fed.solo.io.GlooInstanceStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_gloo$fed_api_fed_v1_instance_pb.GlooInstanceStatus, 3));
};


/** @param {?proto.fed.solo.io.GlooInstanceStatus|undefined} value */
proto.fed.rpc.solo.io.GlooInstance.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.GlooInstance.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GlooInstance.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListGlooInstancesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListGlooInstancesRequest.displayName = 'proto.fed.rpc.solo.io.ListGlooInstancesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListGlooInstancesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListGlooInstancesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListGlooInstancesRequest}
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListGlooInstancesRequest;
  return proto.fed.rpc.solo.io.ListGlooInstancesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListGlooInstancesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListGlooInstancesRequest}
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListGlooInstancesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListGlooInstancesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListGlooInstancesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListGlooInstancesResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListGlooInstancesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListGlooInstancesResponse.displayName = 'proto.fed.rpc.solo.io.ListGlooInstancesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListGlooInstancesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListGlooInstancesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    glooInstancesList: jspb.Message.toObjectList(msg.getGlooInstancesList(),
    proto.fed.rpc.solo.io.GlooInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListGlooInstancesResponse}
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListGlooInstancesResponse;
  return proto.fed.rpc.solo.io.ListGlooInstancesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListGlooInstancesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListGlooInstancesResponse}
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.GlooInstance;
      reader.readMessage(value,proto.fed.rpc.solo.io.GlooInstance.deserializeBinaryFromReader);
      msg.addGlooInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListGlooInstancesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListGlooInstancesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlooInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.GlooInstance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GlooInstance gloo_instances = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.GlooInstance>}
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.prototype.getGlooInstancesList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.GlooInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.GlooInstance, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.GlooInstance>} value */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.prototype.setGlooInstancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.GlooInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.GlooInstance}
 */
proto.fed.rpc.solo.io.ListGlooInstancesResponse.prototype.addGlooInstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.GlooInstance, opt_index);
};


proto.fed.rpc.solo.io.ListGlooInstancesResponse.prototype.clearGlooInstancesList = function() {
  this.setGlooInstancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ClusterDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ClusterDetails.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ClusterDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ClusterDetails.displayName = 'proto.fed.rpc.solo.io.ClusterDetails';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ClusterDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ClusterDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ClusterDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ClusterDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ClusterDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    cluster: jspb.Message.getFieldWithDefault(msg, 1, ""),
    glooInstancesList: jspb.Message.toObjectList(msg.getGlooInstancesList(),
    proto.fed.rpc.solo.io.GlooInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ClusterDetails}
 */
proto.fed.rpc.solo.io.ClusterDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ClusterDetails;
  return proto.fed.rpc.solo.io.ClusterDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ClusterDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ClusterDetails}
 */
proto.fed.rpc.solo.io.ClusterDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCluster(value);
      break;
    case 2:
      var value = new proto.fed.rpc.solo.io.GlooInstance;
      reader.readMessage(value,proto.fed.rpc.solo.io.GlooInstance.deserializeBinaryFromReader);
      msg.addGlooInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ClusterDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ClusterDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ClusterDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ClusterDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCluster();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGlooInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.fed.rpc.solo.io.GlooInstance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cluster = 1;
 * @return {string}
 */
proto.fed.rpc.solo.io.ClusterDetails.prototype.getCluster = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fed.rpc.solo.io.ClusterDetails.prototype.setCluster = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated GlooInstance gloo_instances = 2;
 * @return {!Array<!proto.fed.rpc.solo.io.GlooInstance>}
 */
proto.fed.rpc.solo.io.ClusterDetails.prototype.getGlooInstancesList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.GlooInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.GlooInstance, 2));
};


/** @param {!Array<!proto.fed.rpc.solo.io.GlooInstance>} value */
proto.fed.rpc.solo.io.ClusterDetails.prototype.setGlooInstancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.GlooInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.GlooInstance}
 */
proto.fed.rpc.solo.io.ClusterDetails.prototype.addGlooInstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.fed.rpc.solo.io.GlooInstance, opt_index);
};


proto.fed.rpc.solo.io.ClusterDetails.prototype.clearGlooInstancesList = function() {
  this.setGlooInstancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListClusterDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListClusterDetailsRequest.displayName = 'proto.fed.rpc.solo.io.ListClusterDetailsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListClusterDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListClusterDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListClusterDetailsRequest}
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListClusterDetailsRequest;
  return proto.fed.rpc.solo.io.ListClusterDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListClusterDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListClusterDetailsRequest}
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListClusterDetailsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListClusterDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListClusterDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListClusterDetailsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListClusterDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListClusterDetailsResponse.displayName = 'proto.fed.rpc.solo.io.ListClusterDetailsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListClusterDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListClusterDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterDetailsList: jspb.Message.toObjectList(msg.getClusterDetailsList(),
    proto.fed.rpc.solo.io.ClusterDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListClusterDetailsResponse}
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListClusterDetailsResponse;
  return proto.fed.rpc.solo.io.ListClusterDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListClusterDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListClusterDetailsResponse}
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.ClusterDetails;
      reader.readMessage(value,proto.fed.rpc.solo.io.ClusterDetails.deserializeBinaryFromReader);
      msg.addClusterDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListClusterDetailsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListClusterDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.ClusterDetails.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClusterDetails cluster_details = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.ClusterDetails>}
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.prototype.getClusterDetailsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.ClusterDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.ClusterDetails, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.ClusterDetails>} value */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.prototype.setClusterDetailsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.ClusterDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.ClusterDetails}
 */
proto.fed.rpc.solo.io.ListClusterDetailsResponse.prototype.addClusterDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.ClusterDetails, opt_index);
};


proto.fed.rpc.solo.io.ListClusterDetailsResponse.prototype.clearClusterDetailsList = function() {
  this.setClusterDetailsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ConfigDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ConfigDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ConfigDump.displayName = 'proto.fed.rpc.solo.io.ConfigDump';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ConfigDump.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ConfigDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ConfigDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ConfigDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    raw: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ConfigDump}
 */
proto.fed.rpc.solo.io.ConfigDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ConfigDump;
  return proto.fed.rpc.solo.io.ConfigDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ConfigDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ConfigDump}
 */
proto.fed.rpc.solo.io.ConfigDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRaw(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ConfigDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ConfigDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ConfigDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ConfigDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRaw();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fed.rpc.solo.io.ConfigDump.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fed.rpc.solo.io.ConfigDump.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string raw = 2;
 * @return {string}
 */
proto.fed.rpc.solo.io.ConfigDump.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fed.rpc.solo.io.ConfigDump.prototype.setRaw = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.fed.rpc.solo.io.ConfigDump.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fed.rpc.solo.io.ConfigDump.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetConfigDumpsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetConfigDumpsRequest.displayName = 'proto.fed.rpc.solo.io.GetConfigDumpsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetConfigDumpsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetConfigDumpsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    glooInstanceRef: (f = msg.getGlooInstanceRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetConfigDumpsRequest}
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetConfigDumpsRequest;
  return proto.fed.rpc.solo.io.GetConfigDumpsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetConfigDumpsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetConfigDumpsRequest}
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstanceRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetConfigDumpsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetConfigDumpsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlooInstanceRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.prototype.getGlooInstanceRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.prototype.setGlooInstanceRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetConfigDumpsRequest.prototype.clearGlooInstanceRef = function() {
  this.setGlooInstanceRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetConfigDumpsRequest.prototype.hasGlooInstanceRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.GetConfigDumpsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetConfigDumpsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetConfigDumpsResponse.displayName = 'proto.fed.rpc.solo.io.GetConfigDumpsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetConfigDumpsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetConfigDumpsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    configDumpsList: jspb.Message.toObjectList(msg.getConfigDumpsList(),
    proto.fed.rpc.solo.io.ConfigDump.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetConfigDumpsResponse}
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetConfigDumpsResponse;
  return proto.fed.rpc.solo.io.GetConfigDumpsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetConfigDumpsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetConfigDumpsResponse}
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.ConfigDump;
      reader.readMessage(value,proto.fed.rpc.solo.io.ConfigDump.deserializeBinaryFromReader);
      msg.addConfigDumps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetConfigDumpsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetConfigDumpsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigDumpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.ConfigDump.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfigDump config_dumps = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.ConfigDump>}
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.prototype.getConfigDumpsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.ConfigDump>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.ConfigDump, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.ConfigDump>} value */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.prototype.setConfigDumpsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.ConfigDump=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.ConfigDump}
 */
proto.fed.rpc.solo.io.GetConfigDumpsResponse.prototype.addConfigDumps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.ConfigDump, opt_index);
};


proto.fed.rpc.solo.io.GetConfigDumpsResponse.prototype.clearConfigDumpsList = function() {
  this.setConfigDumpsList([]);
};


goog.object.extend(exports, proto.fed.rpc.solo.io);
