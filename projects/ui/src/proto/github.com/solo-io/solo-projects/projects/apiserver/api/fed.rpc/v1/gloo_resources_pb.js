/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../extproto/ext_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb = require('../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/v1/upstream_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb = require('../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/v1/settings_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb = require('../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/v1/proxy_pb.js');
var github_com_solo$io_skv2_api_core_v1_core_pb = require('../../../../../../../../github.com/solo-io/skv2/api/core/v1/core_pb.js');
var github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb = require('../../../../../../../../github.com/solo-io/solo-projects/projects/apiserver/api/fed.rpc/v1/common_pb.js');
goog.exportSymbol('proto.fed.rpc.solo.io.GetProxyYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetProxyYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetSettingsYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetSettingsYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetUpstreamYamlRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.GetUpstreamYamlResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListProxiesRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListProxiesResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListSettingsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListSettingsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListUpstreamGroupsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListUpstreamGroupsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListUpstreamsRequest', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.ListUpstreamsResponse', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.Proxy', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.Settings', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.Upstream', null, global);
goog.exportSymbol('proto.fed.rpc.solo.io.UpstreamGroup', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.Upstream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.Upstream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.Upstream.displayName = 'proto.fed.rpc.solo.io.Upstream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.Upstream.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.Upstream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.Upstream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.Upstream.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamStatus.toObject(includeInstance, f),
    glooInstance: (f = msg.getGlooInstance()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.Upstream}
 */
proto.fed.rpc.solo.io.Upstream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.Upstream;
  return proto.fed.rpc.solo.io.Upstream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.Upstream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.Upstream}
 */
proto.fed.rpc.solo.io.Upstream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamSpec;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamStatus;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 4:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.Upstream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.Upstream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.Upstream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.Upstream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamStatus.serializeBinaryToWriter
    );
  }
  f = message.getGlooInstance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.Upstream.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.Upstream.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.Upstream.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Upstream.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional gloo.solo.io.UpstreamSpec spec = 2;
 * @return {?proto.gloo.solo.io.UpstreamSpec}
 */
proto.fed.rpc.solo.io.Upstream.prototype.getSpec = function() {
  return /** @type{?proto.gloo.solo.io.UpstreamSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamSpec, 2));
};


/** @param {?proto.gloo.solo.io.UpstreamSpec|undefined} value */
proto.fed.rpc.solo.io.Upstream.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.Upstream.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Upstream.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional gloo.solo.io.UpstreamStatus status = 3;
 * @return {?proto.gloo.solo.io.UpstreamStatus}
 */
proto.fed.rpc.solo.io.Upstream.prototype.getStatus = function() {
  return /** @type{?proto.gloo.solo.io.UpstreamStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_upstream_pb.UpstreamStatus, 3));
};


/** @param {?proto.gloo.solo.io.UpstreamStatus|undefined} value */
proto.fed.rpc.solo.io.Upstream.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.Upstream.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Upstream.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance = 4;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.Upstream.prototype.getGlooInstance = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 4));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.Upstream.prototype.setGlooInstance = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fed.rpc.solo.io.Upstream.prototype.clearGlooInstance = function() {
  this.setGlooInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Upstream.prototype.hasGlooInstance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.UpstreamGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.UpstreamGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.UpstreamGroup.displayName = 'proto.fed.rpc.solo.io.UpstreamGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.UpstreamGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.UpstreamGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.UpstreamGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupStatus.toObject(includeInstance, f),
    glooInstance: (f = msg.getGlooInstance()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.UpstreamGroup}
 */
proto.fed.rpc.solo.io.UpstreamGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.UpstreamGroup;
  return proto.fed.rpc.solo.io.UpstreamGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.UpstreamGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.UpstreamGroup}
 */
proto.fed.rpc.solo.io.UpstreamGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupSpec;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupStatus;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 4:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.UpstreamGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.UpstreamGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.UpstreamGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupStatus.serializeBinaryToWriter
    );
  }
  f = message.getGlooInstance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.UpstreamGroup.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional gloo.solo.io.UpstreamGroupSpec spec = 2;
 * @return {?proto.gloo.solo.io.UpstreamGroupSpec}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.getSpec = function() {
  return /** @type{?proto.gloo.solo.io.UpstreamGroupSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupSpec, 2));
};


/** @param {?proto.gloo.solo.io.UpstreamGroupSpec|undefined} value */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.UpstreamGroup.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional gloo.solo.io.UpstreamGroupStatus status = 3;
 * @return {?proto.gloo.solo.io.UpstreamGroupStatus}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.getStatus = function() {
  return /** @type{?proto.gloo.solo.io.UpstreamGroupStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.UpstreamGroupStatus, 3));
};


/** @param {?proto.gloo.solo.io.UpstreamGroupStatus|undefined} value */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.UpstreamGroup.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance = 4;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.getGlooInstance = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 4));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.setGlooInstance = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fed.rpc.solo.io.UpstreamGroup.prototype.clearGlooInstance = function() {
  this.setGlooInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.UpstreamGroup.prototype.hasGlooInstance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.Settings.displayName = 'proto.fed.rpc.solo.io.Settings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsStatus.toObject(includeInstance, f),
    glooInstance: (f = msg.getGlooInstance()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.Settings}
 */
proto.fed.rpc.solo.io.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.Settings;
  return proto.fed.rpc.solo.io.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.Settings}
 */
proto.fed.rpc.solo.io.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsSpec;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsStatus;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 4:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsStatus.serializeBinaryToWriter
    );
  }
  f = message.getGlooInstance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.Settings.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.Settings.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.Settings.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Settings.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional gloo.solo.io.SettingsSpec spec = 2;
 * @return {?proto.gloo.solo.io.SettingsSpec}
 */
proto.fed.rpc.solo.io.Settings.prototype.getSpec = function() {
  return /** @type{?proto.gloo.solo.io.SettingsSpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsSpec, 2));
};


/** @param {?proto.gloo.solo.io.SettingsSpec|undefined} value */
proto.fed.rpc.solo.io.Settings.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.Settings.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Settings.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional gloo.solo.io.SettingsStatus status = 3;
 * @return {?proto.gloo.solo.io.SettingsStatus}
 */
proto.fed.rpc.solo.io.Settings.prototype.getStatus = function() {
  return /** @type{?proto.gloo.solo.io.SettingsStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_settings_pb.SettingsStatus, 3));
};


/** @param {?proto.gloo.solo.io.SettingsStatus|undefined} value */
proto.fed.rpc.solo.io.Settings.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.Settings.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Settings.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance = 4;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.Settings.prototype.getGlooInstance = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 4));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.Settings.prototype.setGlooInstance = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fed.rpc.solo.io.Settings.prototype.clearGlooInstance = function() {
  this.setGlooInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Settings.prototype.hasGlooInstance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.Proxy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.Proxy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.Proxy.displayName = 'proto.fed.rpc.solo.io.Proxy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.Proxy.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.Proxy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.Proxy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.Proxy.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxySpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxyStatus.toObject(includeInstance, f),
    glooInstance: (f = msg.getGlooInstance()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.Proxy}
 */
proto.fed.rpc.solo.io.Proxy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.Proxy;
  return proto.fed.rpc.solo.io.Proxy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.Proxy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.Proxy}
 */
proto.fed.rpc.solo.io.Proxy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxySpec;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxySpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxyStatus;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxyStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 4:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.Proxy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.Proxy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.Proxy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.Proxy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxySpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxyStatus.serializeBinaryToWriter
    );
  }
  f = message.getGlooInstance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMeta metadata = 1;
 * @return {?proto.fed.rpc.solo.io.ObjectMeta}
 */
proto.fed.rpc.solo.io.Proxy.prototype.getMetadata = function() {
  return /** @type{?proto.fed.rpc.solo.io.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ObjectMeta, 1));
};


/** @param {?proto.fed.rpc.solo.io.ObjectMeta|undefined} value */
proto.fed.rpc.solo.io.Proxy.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.Proxy.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Proxy.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional gloo.solo.io.ProxySpec spec = 2;
 * @return {?proto.gloo.solo.io.ProxySpec}
 */
proto.fed.rpc.solo.io.Proxy.prototype.getSpec = function() {
  return /** @type{?proto.gloo.solo.io.ProxySpec} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxySpec, 2));
};


/** @param {?proto.gloo.solo.io.ProxySpec|undefined} value */
proto.fed.rpc.solo.io.Proxy.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fed.rpc.solo.io.Proxy.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Proxy.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional gloo.solo.io.ProxyStatus status = 3;
 * @return {?proto.gloo.solo.io.ProxyStatus}
 */
proto.fed.rpc.solo.io.Proxy.prototype.getStatus = function() {
  return /** @type{?proto.gloo.solo.io.ProxyStatus} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_proxy_pb.ProxyStatus, 3));
};


/** @param {?proto.gloo.solo.io.ProxyStatus|undefined} value */
proto.fed.rpc.solo.io.Proxy.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fed.rpc.solo.io.Proxy.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Proxy.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance = 4;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.Proxy.prototype.getGlooInstance = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 4));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.Proxy.prototype.setGlooInstance = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fed.rpc.solo.io.Proxy.prototype.clearGlooInstance = function() {
  this.setGlooInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.Proxy.prototype.hasGlooInstance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListUpstreamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListUpstreamsRequest.displayName = 'proto.fed.rpc.solo.io.ListUpstreamsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListUpstreamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListUpstreamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    glooInstanceRef: (f = msg.getGlooInstanceRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamsRequest}
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListUpstreamsRequest;
  return proto.fed.rpc.solo.io.ListUpstreamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamsRequest}
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstanceRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListUpstreamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlooInstanceRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.prototype.getGlooInstanceRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.ListUpstreamsRequest.prototype.setGlooInstanceRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.ListUpstreamsRequest.prototype.clearGlooInstanceRef = function() {
  this.setGlooInstanceRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.ListUpstreamsRequest.prototype.hasGlooInstanceRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListUpstreamsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListUpstreamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListUpstreamsResponse.displayName = 'proto.fed.rpc.solo.io.ListUpstreamsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListUpstreamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListUpstreamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    upstreamsList: jspb.Message.toObjectList(msg.getUpstreamsList(),
    proto.fed.rpc.solo.io.Upstream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamsResponse}
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListUpstreamsResponse;
  return proto.fed.rpc.solo.io.ListUpstreamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamsResponse}
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.Upstream;
      reader.readMessage(value,proto.fed.rpc.solo.io.Upstream.deserializeBinaryFromReader);
      msg.addUpstreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListUpstreamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpstreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.Upstream.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Upstream upstreams = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.Upstream>}
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.prototype.getUpstreamsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.Upstream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.Upstream, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.Upstream>} value */
proto.fed.rpc.solo.io.ListUpstreamsResponse.prototype.setUpstreamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.Upstream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.Upstream}
 */
proto.fed.rpc.solo.io.ListUpstreamsResponse.prototype.addUpstreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.Upstream, opt_index);
};


proto.fed.rpc.solo.io.ListUpstreamsResponse.prototype.clearUpstreamsList = function() {
  this.setUpstreamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetUpstreamYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetUpstreamYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetUpstreamYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetUpstreamYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetUpstreamYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    upstreamRef: (f = msg.getUpstreamRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamYamlRequest}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetUpstreamYamlRequest;
  return proto.fed.rpc.solo.io.GetUpstreamYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamYamlRequest}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.deserializeBinaryFromReader);
      msg.setUpstreamRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetUpstreamYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpstreamRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ClusterObjectRef upstream_ref = 1;
 * @return {?proto.core.skv2.solo.io.ClusterObjectRef}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.prototype.getUpstreamRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ClusterObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ClusterObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.prototype.setUpstreamRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetUpstreamYamlRequest.prototype.clearUpstreamRef = function() {
  this.setUpstreamRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlRequest.prototype.hasUpstreamRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetUpstreamYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetUpstreamYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetUpstreamYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetUpstreamYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetUpstreamYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamYamlResponse}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetUpstreamYamlResponse;
  return proto.fed.rpc.solo.io.GetUpstreamYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamYamlResponse}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetUpstreamYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetUpstreamYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetUpstreamYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListUpstreamGroupsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.displayName = 'proto.fed.rpc.solo.io.ListUpstreamGroupsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListUpstreamGroupsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    glooInstanceRef: (f = msg.getGlooInstanceRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamGroupsRequest}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListUpstreamGroupsRequest;
  return proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamGroupsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamGroupsRequest}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstanceRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamGroupsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlooInstanceRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.prototype.getGlooInstanceRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.prototype.setGlooInstanceRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.prototype.clearGlooInstanceRef = function() {
  this.setGlooInstanceRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsRequest.prototype.hasGlooInstanceRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListUpstreamGroupsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.displayName = 'proto.fed.rpc.solo.io.ListUpstreamGroupsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListUpstreamGroupsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    upstreamGroupsList: jspb.Message.toObjectList(msg.getUpstreamGroupsList(),
    proto.fed.rpc.solo.io.UpstreamGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamGroupsResponse}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListUpstreamGroupsResponse;
  return proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamGroupsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListUpstreamGroupsResponse}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.UpstreamGroup;
      reader.readMessage(value,proto.fed.rpc.solo.io.UpstreamGroup.deserializeBinaryFromReader);
      msg.addUpstreamGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListUpstreamGroupsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpstreamGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.UpstreamGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UpstreamGroup upstream_groups = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.UpstreamGroup>}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.prototype.getUpstreamGroupsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.UpstreamGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.UpstreamGroup, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.UpstreamGroup>} value */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.prototype.setUpstreamGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.UpstreamGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.UpstreamGroup}
 */
proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.prototype.addUpstreamGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.UpstreamGroup, opt_index);
};


proto.fed.rpc.solo.io.ListUpstreamGroupsResponse.prototype.clearUpstreamGroupsList = function() {
  this.setUpstreamGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    upstreamGroupRef: (f = msg.getUpstreamGroupRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest;
  return proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.deserializeBinaryFromReader);
      msg.setUpstreamGroupRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpstreamGroupRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ClusterObjectRef upstream_group_ref = 1;
 * @return {?proto.core.skv2.solo.io.ClusterObjectRef}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.prototype.getUpstreamGroupRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ClusterObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ClusterObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.prototype.setUpstreamGroupRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.prototype.clearUpstreamGroupRef = function() {
  this.setUpstreamGroupRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlRequest.prototype.hasUpstreamGroupRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse;
  return proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetUpstreamGroupYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListSettingsRequest.displayName = 'proto.fed.rpc.solo.io.ListSettingsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    glooInstanceRef: (f = msg.getGlooInstanceRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListSettingsRequest}
 */
proto.fed.rpc.solo.io.ListSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListSettingsRequest;
  return proto.fed.rpc.solo.io.ListSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListSettingsRequest}
 */
proto.fed.rpc.solo.io.ListSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstanceRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlooInstanceRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.ListSettingsRequest.prototype.getGlooInstanceRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.ListSettingsRequest.prototype.setGlooInstanceRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.ListSettingsRequest.prototype.clearGlooInstanceRef = function() {
  this.setGlooInstanceRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.ListSettingsRequest.prototype.hasGlooInstanceRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListSettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListSettingsResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListSettingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListSettingsResponse.displayName = 'proto.fed.rpc.solo.io.ListSettingsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListSettingsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListSettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListSettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListSettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListSettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    settingsList: jspb.Message.toObjectList(msg.getSettingsList(),
    proto.fed.rpc.solo.io.Settings.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListSettingsResponse}
 */
proto.fed.rpc.solo.io.ListSettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListSettingsResponse;
  return proto.fed.rpc.solo.io.ListSettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListSettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListSettingsResponse}
 */
proto.fed.rpc.solo.io.ListSettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.Settings;
      reader.readMessage(value,proto.fed.rpc.solo.io.Settings.deserializeBinaryFromReader);
      msg.addSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListSettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListSettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListSettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListSettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.Settings.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Settings settings = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.Settings>}
 */
proto.fed.rpc.solo.io.ListSettingsResponse.prototype.getSettingsList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.Settings>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.Settings, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.Settings>} value */
proto.fed.rpc.solo.io.ListSettingsResponse.prototype.setSettingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.Settings=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.Settings}
 */
proto.fed.rpc.solo.io.ListSettingsResponse.prototype.addSettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.Settings, opt_index);
};


proto.fed.rpc.solo.io.ListSettingsResponse.prototype.clearSettingsList = function() {
  this.setSettingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetSettingsYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetSettingsYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetSettingsYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetSettingsYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetSettingsYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    settingsRef: (f = msg.getSettingsRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetSettingsYamlRequest}
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetSettingsYamlRequest;
  return proto.fed.rpc.solo.io.GetSettingsYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetSettingsYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetSettingsYamlRequest}
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.deserializeBinaryFromReader);
      msg.setSettingsRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetSettingsYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetSettingsYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettingsRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ClusterObjectRef settings_ref = 1;
 * @return {?proto.core.skv2.solo.io.ClusterObjectRef}
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.prototype.getSettingsRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ClusterObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ClusterObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.prototype.setSettingsRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetSettingsYamlRequest.prototype.clearSettingsRef = function() {
  this.setSettingsRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetSettingsYamlRequest.prototype.hasSettingsRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetSettingsYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetSettingsYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetSettingsYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetSettingsYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetSettingsYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetSettingsYamlResponse}
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetSettingsYamlResponse;
  return proto.fed.rpc.solo.io.GetSettingsYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetSettingsYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetSettingsYamlResponse}
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetSettingsYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetSettingsYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetSettingsYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetSettingsYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListProxiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListProxiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListProxiesRequest.displayName = 'proto.fed.rpc.solo.io.ListProxiesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListProxiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListProxiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListProxiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListProxiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    glooInstanceRef: (f = msg.getGlooInstanceRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListProxiesRequest}
 */
proto.fed.rpc.solo.io.ListProxiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListProxiesRequest;
  return proto.fed.rpc.solo.io.ListProxiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListProxiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListProxiesRequest}
 */
proto.fed.rpc.solo.io.ListProxiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setGlooInstanceRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListProxiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListProxiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListProxiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListProxiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlooInstanceRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ObjectRef gloo_instance_ref = 1;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.fed.rpc.solo.io.ListProxiesRequest.prototype.getGlooInstanceRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.fed.rpc.solo.io.ListProxiesRequest.prototype.setGlooInstanceRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.ListProxiesRequest.prototype.clearGlooInstanceRef = function() {
  this.setGlooInstanceRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.ListProxiesRequest.prototype.hasGlooInstanceRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.ListProxiesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fed.rpc.solo.io.ListProxiesResponse.repeatedFields_, null);
};
goog.inherits(proto.fed.rpc.solo.io.ListProxiesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.ListProxiesResponse.displayName = 'proto.fed.rpc.solo.io.ListProxiesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fed.rpc.solo.io.ListProxiesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.ListProxiesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.ListProxiesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.ListProxiesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListProxiesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proxiesList: jspb.Message.toObjectList(msg.getProxiesList(),
    proto.fed.rpc.solo.io.Proxy.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.ListProxiesResponse}
 */
proto.fed.rpc.solo.io.ListProxiesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.ListProxiesResponse;
  return proto.fed.rpc.solo.io.ListProxiesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.ListProxiesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.ListProxiesResponse}
 */
proto.fed.rpc.solo.io.ListProxiesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fed.rpc.solo.io.Proxy;
      reader.readMessage(value,proto.fed.rpc.solo.io.Proxy.deserializeBinaryFromReader);
      msg.addProxies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.ListProxiesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.ListProxiesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.ListProxiesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.ListProxiesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProxiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fed.rpc.solo.io.Proxy.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Proxy proxies = 1;
 * @return {!Array<!proto.fed.rpc.solo.io.Proxy>}
 */
proto.fed.rpc.solo.io.ListProxiesResponse.prototype.getProxiesList = function() {
  return /** @type{!Array<!proto.fed.rpc.solo.io.Proxy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fed.rpc.solo.io.Proxy, 1));
};


/** @param {!Array<!proto.fed.rpc.solo.io.Proxy>} value */
proto.fed.rpc.solo.io.ListProxiesResponse.prototype.setProxiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fed.rpc.solo.io.Proxy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fed.rpc.solo.io.Proxy}
 */
proto.fed.rpc.solo.io.ListProxiesResponse.prototype.addProxies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fed.rpc.solo.io.Proxy, opt_index);
};


proto.fed.rpc.solo.io.ListProxiesResponse.prototype.clearProxiesList = function() {
  this.setProxiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetProxyYamlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetProxyYamlRequest.displayName = 'proto.fed.rpc.solo.io.GetProxyYamlRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetProxyYamlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetProxyYamlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proxyRef: (f = msg.getProxyRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetProxyYamlRequest}
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetProxyYamlRequest;
  return proto.fed.rpc.solo.io.GetProxyYamlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetProxyYamlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetProxyYamlRequest}
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.deserializeBinaryFromReader);
      msg.setProxyRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetProxyYamlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetProxyYamlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProxyRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional core.skv2.solo.io.ClusterObjectRef proxy_ref = 1;
 * @return {?proto.core.skv2.solo.io.ClusterObjectRef}
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.prototype.getProxyRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ClusterObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ClusterObjectRef, 1));
};


/** @param {?proto.core.skv2.solo.io.ClusterObjectRef|undefined} value */
proto.fed.rpc.solo.io.GetProxyYamlRequest.prototype.setProxyRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetProxyYamlRequest.prototype.clearProxyRef = function() {
  this.setProxyRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetProxyYamlRequest.prototype.hasProxyRef = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fed.rpc.solo.io.GetProxyYamlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fed.rpc.solo.io.GetProxyYamlResponse.displayName = 'proto.fed.rpc.solo.io.GetProxyYamlResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fed.rpc.solo.io.GetProxyYamlResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fed.rpc.solo.io.GetProxyYamlResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    yamlData: (f = msg.getYamlData()) && github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fed.rpc.solo.io.GetProxyYamlResponse}
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fed.rpc.solo.io.GetProxyYamlResponse;
  return proto.fed.rpc.solo.io.GetProxyYamlResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fed.rpc.solo.io.GetProxyYamlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fed.rpc.solo.io.GetProxyYamlResponse}
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml;
      reader.readMessage(value,github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.deserializeBinaryFromReader);
      msg.setYamlData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fed.rpc.solo.io.GetProxyYamlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fed.rpc.solo.io.GetProxyYamlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYamlData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceYaml yaml_data = 1;
 * @return {?proto.fed.rpc.solo.io.ResourceYaml}
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.prototype.getYamlData = function() {
  return /** @type{?proto.fed.rpc.solo.io.ResourceYaml} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$projects_projects_apiserver_api_fed_rpc_v1_common_pb.ResourceYaml, 1));
};


/** @param {?proto.fed.rpc.solo.io.ResourceYaml|undefined} value */
proto.fed.rpc.solo.io.GetProxyYamlResponse.prototype.setYamlData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fed.rpc.solo.io.GetProxyYamlResponse.prototype.clearYamlData = function() {
  this.setYamlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.fed.rpc.solo.io.GetProxyYamlResponse.prototype.hasYamlData = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.fed.rpc.solo.io);
