/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../extproto/ext_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var github_com_solo$io_skv2_api_core_v1_core_pb = require('../../../../../../../../github.com/solo-io/skv2/api/core/v1/core_pb.js');
goog.exportSymbol('proto.multicluster.solo.io.MultiClusterRoleBindingSpec', null, global);
goog.exportSymbol('proto.multicluster.solo.io.MultiClusterRoleBindingStatus', null, global);
goog.exportSymbol('proto.multicluster.solo.io.MultiClusterRoleSpec', null, global);
goog.exportSymbol('proto.multicluster.solo.io.MultiClusterRoleSpec.Rule', null, global);
goog.exportSymbol('proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.Action', null, global);
goog.exportSymbol('proto.multicluster.solo.io.MultiClusterRoleStatus', null, global);
goog.exportSymbol('proto.multicluster.solo.io.Placement', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.Placement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.multicluster.solo.io.Placement.repeatedFields_, null);
};
goog.inherits(proto.multicluster.solo.io.Placement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.Placement.displayName = 'proto.multicluster.solo.io.Placement';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.multicluster.solo.io.Placement.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.Placement.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.Placement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.Placement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.Placement.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespacesList: jspb.Message.getRepeatedField(msg, 1),
    clustersList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.Placement}
 */
proto.multicluster.solo.io.Placement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.Placement;
  return proto.multicluster.solo.io.Placement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.Placement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.Placement}
 */
proto.multicluster.solo.io.Placement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNamespaces(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addClusters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.Placement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.Placement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.Placement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.Placement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespacesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getClustersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string namespaces = 1;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.Placement.prototype.getNamespacesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.Placement.prototype.setNamespacesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.Placement.prototype.addNamespaces = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.multicluster.solo.io.Placement.prototype.clearNamespacesList = function() {
  this.setNamespacesList([]);
};


/**
 * repeated string clusters = 2;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.Placement.prototype.getClustersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.Placement.prototype.setClustersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.Placement.prototype.addClusters = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.multicluster.solo.io.Placement.prototype.clearClustersList = function() {
  this.setClustersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.MultiClusterRoleSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.multicluster.solo.io.MultiClusterRoleSpec.repeatedFields_, null);
};
goog.inherits(proto.multicluster.solo.io.MultiClusterRoleSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.MultiClusterRoleSpec.displayName = 'proto.multicluster.solo.io.MultiClusterRoleSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.MultiClusterRoleSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleSpec}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.MultiClusterRoleSpec;
  return proto.multicluster.solo.io.MultiClusterRoleSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleSpec}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.multicluster.solo.io.MultiClusterRoleSpec.Rule;
      reader.readMessage(value,proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.MultiClusterRoleSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.repeatedFields_, null);
};
goog.inherits(proto.multicluster.solo.io.MultiClusterRoleSpec.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.displayName = 'proto.multicluster.solo.io.MultiClusterRoleSpec.Rule';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiGroup: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: (f = msg.getKind()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    placementsList: jspb.Message.toObjectList(msg.getPlacementsList(),
    proto.multicluster.solo.io.Placement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.MultiClusterRoleSpec.Rule;
  return proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiGroup(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 4:
      var value = new proto.multicluster.solo.io.Placement;
      reader.readMessage(value,proto.multicluster.solo.io.Placement.deserializeBinaryFromReader);
      msg.addPlacements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiGroup();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPlacementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.multicluster.solo.io.Placement.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.Action = {
  ANY: 0,
  CREATE: 1,
  UPDATE: 2,
  DELETE: 3
};

/**
 * optional string api_group = 1;
 * @return {string}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.getApiGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.setApiGroup = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue kind = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.getKind = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/** @param {?proto.google.protobuf.StringValue|undefined} value */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.setKind = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.clearKind = function() {
  this.setKind(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.hasKind = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Action action = 3;
 * @return {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.Action}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.getAction = function() {
  return /** @type {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.Action} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.Action} value */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.setAction = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Placement placements = 4;
 * @return {!Array<!proto.multicluster.solo.io.Placement>}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.getPlacementsList = function() {
  return /** @type{!Array<!proto.multicluster.solo.io.Placement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.multicluster.solo.io.Placement, 4));
};


/** @param {!Array<!proto.multicluster.solo.io.Placement>} value */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.setPlacementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.multicluster.solo.io.Placement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.multicluster.solo.io.Placement}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.addPlacements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.multicluster.solo.io.Placement, opt_index);
};


proto.multicluster.solo.io.MultiClusterRoleSpec.Rule.prototype.clearPlacementsList = function() {
  this.setPlacementsList([]);
};


/**
 * repeated Rule rules = 1;
 * @return {!Array<!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule>}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.multicluster.solo.io.MultiClusterRoleSpec.Rule, 1));
};


/** @param {!Array<!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule>} value */
proto.multicluster.solo.io.MultiClusterRoleSpec.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.multicluster.solo.io.MultiClusterRoleSpec.Rule}
 */
proto.multicluster.solo.io.MultiClusterRoleSpec.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.multicluster.solo.io.MultiClusterRoleSpec.Rule, opt_index);
};


proto.multicluster.solo.io.MultiClusterRoleSpec.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.MultiClusterRoleStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.multicluster.solo.io.MultiClusterRoleStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.MultiClusterRoleStatus.displayName = 'proto.multicluster.solo.io.MultiClusterRoleStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.MultiClusterRoleStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.MultiClusterRoleStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.MultiClusterRoleStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleStatus}
 */
proto.multicluster.solo.io.MultiClusterRoleStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.MultiClusterRoleStatus;
  return proto.multicluster.solo.io.MultiClusterRoleStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleStatus}
 */
proto.multicluster.solo.io.MultiClusterRoleStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.MultiClusterRoleStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.MultiClusterRoleStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.multicluster.solo.io.MultiClusterRoleBindingSpec.repeatedFields_, null);
};
goog.inherits(proto.multicluster.solo.io.MultiClusterRoleBindingSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.MultiClusterRoleBindingSpec.displayName = 'proto.multicluster.solo.io.MultiClusterRoleBindingSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.MultiClusterRoleBindingSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.MultiClusterRoleBindingSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    subjectsList: jspb.Message.toObjectList(msg.getSubjectsList(),
    github_com_solo$io_skv2_api_core_v1_core_pb.TypedObjectRef.toObject, includeInstance),
    roleRef: (f = msg.getRoleRef()) && github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleBindingSpec}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.MultiClusterRoleBindingSpec;
  return proto.multicluster.solo.io.MultiClusterRoleBindingSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleBindingSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleBindingSpec}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.TypedObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.TypedObjectRef.deserializeBinaryFromReader);
      msg.addSubjects(value);
      break;
    case 2:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.deserializeBinaryFromReader);
      msg.setRoleRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.MultiClusterRoleBindingSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleBindingSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.TypedObjectRef.serializeBinaryToWriter
    );
  }
  f = message.getRoleRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef.serializeBinaryToWriter
    );
  }
};


/**
 * repeated core.skv2.solo.io.TypedObjectRef subjects = 1;
 * @return {!Array<!proto.core.skv2.solo.io.TypedObjectRef>}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.getSubjectsList = function() {
  return /** @type{!Array<!proto.core.skv2.solo.io.TypedObjectRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.TypedObjectRef, 1));
};


/** @param {!Array<!proto.core.skv2.solo.io.TypedObjectRef>} value */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.setSubjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core.skv2.solo.io.TypedObjectRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.skv2.solo.io.TypedObjectRef}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.addSubjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core.skv2.solo.io.TypedObjectRef, opt_index);
};


proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.clearSubjectsList = function() {
  this.setSubjectsList([]);
};


/**
 * optional core.skv2.solo.io.ObjectRef role_ref = 2;
 * @return {?proto.core.skv2.solo.io.ObjectRef}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.getRoleRef = function() {
  return /** @type{?proto.core.skv2.solo.io.ObjectRef} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.ObjectRef, 2));
};


/** @param {?proto.core.skv2.solo.io.ObjectRef|undefined} value */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.setRoleRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.clearRoleRef = function() {
  this.setRoleRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingSpec.prototype.hasRoleRef = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.multicluster.solo.io.MultiClusterRoleBindingStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.MultiClusterRoleBindingStatus.displayName = 'proto.multicluster.solo.io.MultiClusterRoleBindingStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.MultiClusterRoleBindingStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.MultiClusterRoleBindingStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleBindingStatus}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.MultiClusterRoleBindingStatus;
  return proto.multicluster.solo.io.MultiClusterRoleBindingStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleBindingStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.MultiClusterRoleBindingStatus}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.MultiClusterRoleBindingStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.MultiClusterRoleBindingStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.MultiClusterRoleBindingStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.multicluster.solo.io);
