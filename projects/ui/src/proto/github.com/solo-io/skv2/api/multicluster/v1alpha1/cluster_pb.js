/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../extproto/ext_pb.js');
var github_com_solo$io_skv2_api_core_v1_core_pb = require('../../../../../../github.com/solo-io/skv2/api/core/v1/core_pb.js');
goog.exportSymbol('proto.multicluster.solo.io.KubernetesClusterSpec', null, global);
goog.exportSymbol('proto.multicluster.solo.io.KubernetesClusterSpec.Eks', null, global);
goog.exportSymbol('proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo', null, global);
goog.exportSymbol('proto.multicluster.solo.io.KubernetesClusterStatus', null, global);
goog.exportSymbol('proto.multicluster.solo.io.PolicyRule', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.KubernetesClusterSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.multicluster.solo.io.KubernetesClusterSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.KubernetesClusterSpec.displayName = 'proto.multicluster.solo.io.KubernetesClusterSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.KubernetesClusterSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clusterDomain: jspb.Message.getFieldWithDefault(msg, 2, ""),
    providerInfo: (f = msg.getProviderInfo()) && proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.KubernetesClusterSpec}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.KubernetesClusterSpec;
  return proto.multicluster.solo.io.KubernetesClusterSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.KubernetesClusterSpec}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterDomain(value);
      break;
    case 3:
      var value = new proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo;
      reader.readMessage(value,proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.deserializeBinaryFromReader);
      msg.setProviderInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.KubernetesClusterSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClusterDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProviderInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.oneofGroups_);
};
goog.inherits(proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.displayName = 'proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.ProviderInfoTypeCase = {
  PROVIDER_INFO_TYPE_NOT_SET: 0,
  EKS: 1
};

/**
 * @return {proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.ProviderInfoTypeCase}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.getProviderInfoTypeCase = function() {
  return /** @type {proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.ProviderInfoTypeCase} */(jspb.Message.computeOneofCase(this, proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    eks: (f = msg.getEks()) && proto.multicluster.solo.io.KubernetesClusterSpec.Eks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo;
  return proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.multicluster.solo.io.KubernetesClusterSpec.Eks;
      reader.readMessage(value,proto.multicluster.solo.io.KubernetesClusterSpec.Eks.deserializeBinaryFromReader);
      msg.setEks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEks();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.multicluster.solo.io.KubernetesClusterSpec.Eks.serializeBinaryToWriter
    );
  }
};


/**
 * optional Eks eks = 1;
 * @return {?proto.multicluster.solo.io.KubernetesClusterSpec.Eks}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.getEks = function() {
  return /** @type{?proto.multicluster.solo.io.KubernetesClusterSpec.Eks} */ (
    jspb.Message.getWrapperField(this, proto.multicluster.solo.io.KubernetesClusterSpec.Eks, 1));
};


/** @param {?proto.multicluster.solo.io.KubernetesClusterSpec.Eks|undefined} value */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.setEks = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.oneofGroups_[0], value);
};


proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.clearEks = function() {
  this.setEks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo.prototype.hasEks = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.multicluster.solo.io.KubernetesClusterSpec.Eks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.KubernetesClusterSpec.Eks.displayName = 'proto.multicluster.solo.io.KubernetesClusterSpec.Eks';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.KubernetesClusterSpec.Eks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec.Eks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.toObject = function(includeInstance, msg) {
  var f, obj = {
    arn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.KubernetesClusterSpec.Eks}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.KubernetesClusterSpec.Eks;
  return proto.multicluster.solo.io.KubernetesClusterSpec.Eks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec.Eks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.KubernetesClusterSpec.Eks}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setArn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.KubernetesClusterSpec.Eks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.KubernetesClusterSpec.Eks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string arn = 1;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.getArn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.setArn = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.setRegion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterSpec.Eks.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string secret_name = 1;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.getSecretName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.setSecretName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cluster_domain = 2;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.getClusterDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.setClusterDomain = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ProviderInfo provider_info = 3;
 * @return {?proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.getProviderInfo = function() {
  return /** @type{?proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo} */ (
    jspb.Message.getWrapperField(this, proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo, 3));
};


/** @param {?proto.multicluster.solo.io.KubernetesClusterSpec.ProviderInfo|undefined} value */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.setProviderInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.multicluster.solo.io.KubernetesClusterSpec.prototype.clearProviderInfo = function() {
  this.setProviderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.multicluster.solo.io.KubernetesClusterSpec.prototype.hasProviderInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.KubernetesClusterStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.multicluster.solo.io.KubernetesClusterStatus.repeatedFields_, null);
};
goog.inherits(proto.multicluster.solo.io.KubernetesClusterStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.KubernetesClusterStatus.displayName = 'proto.multicluster.solo.io.KubernetesClusterStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.multicluster.solo.io.KubernetesClusterStatus.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.KubernetesClusterStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.KubernetesClusterStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusList: jspb.Message.toObjectList(msg.getStatusList(),
    github_com_solo$io_skv2_api_core_v1_core_pb.Status.toObject, includeInstance),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    policyRulesList: jspb.Message.toObjectList(msg.getPolicyRulesList(),
    proto.multicluster.solo.io.PolicyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.KubernetesClusterStatus}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.KubernetesClusterStatus;
  return proto.multicluster.solo.io.KubernetesClusterStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.KubernetesClusterStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.KubernetesClusterStatus}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_skv2_api_core_v1_core_pb.Status;
      reader.readMessage(value,github_com_solo$io_skv2_api_core_v1_core_pb.Status.deserializeBinaryFromReader);
      msg.addStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = new proto.multicluster.solo.io.PolicyRule;
      reader.readMessage(value,proto.multicluster.solo.io.PolicyRule.deserializeBinaryFromReader);
      msg.addPolicyRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.KubernetesClusterStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.KubernetesClusterStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.KubernetesClusterStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github_com_solo$io_skv2_api_core_v1_core_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPolicyRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.multicluster.solo.io.PolicyRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated core.skv2.solo.io.Status status = 1;
 * @return {!Array<!proto.core.skv2.solo.io.Status>}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.getStatusList = function() {
  return /** @type{!Array<!proto.core.skv2.solo.io.Status>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_skv2_api_core_v1_core_pb.Status, 1));
};


/** @param {!Array<!proto.core.skv2.solo.io.Status>} value */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.setStatusList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.core.skv2.solo.io.Status=} opt_value
 * @param {number=} opt_index
 * @return {!proto.core.skv2.solo.io.Status}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.addStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.core.skv2.solo.io.Status, opt_index);
};


proto.multicluster.solo.io.KubernetesClusterStatus.prototype.clearStatusList = function() {
  this.setStatusList([]);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.setNamespace = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PolicyRule policy_rules = 3;
 * @return {!Array<!proto.multicluster.solo.io.PolicyRule>}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.getPolicyRulesList = function() {
  return /** @type{!Array<!proto.multicluster.solo.io.PolicyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.multicluster.solo.io.PolicyRule, 3));
};


/** @param {!Array<!proto.multicluster.solo.io.PolicyRule>} value */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.setPolicyRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.multicluster.solo.io.PolicyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.multicluster.solo.io.PolicyRule}
 */
proto.multicluster.solo.io.KubernetesClusterStatus.prototype.addPolicyRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.multicluster.solo.io.PolicyRule, opt_index);
};


proto.multicluster.solo.io.KubernetesClusterStatus.prototype.clearPolicyRulesList = function() {
  this.setPolicyRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.multicluster.solo.io.PolicyRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.multicluster.solo.io.PolicyRule.repeatedFields_, null);
};
goog.inherits(proto.multicluster.solo.io.PolicyRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.multicluster.solo.io.PolicyRule.displayName = 'proto.multicluster.solo.io.PolicyRule';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.multicluster.solo.io.PolicyRule.repeatedFields_ = [1,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.multicluster.solo.io.PolicyRule.prototype.toObject = function(opt_includeInstance) {
  return proto.multicluster.solo.io.PolicyRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.multicluster.solo.io.PolicyRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.PolicyRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    verbsList: jspb.Message.getRepeatedField(msg, 1),
    apiGroupsList: jspb.Message.getRepeatedField(msg, 2),
    resourcesList: jspb.Message.getRepeatedField(msg, 3),
    resourceNamesList: jspb.Message.getRepeatedField(msg, 4),
    nonResourceUrlsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.multicluster.solo.io.PolicyRule}
 */
proto.multicluster.solo.io.PolicyRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.multicluster.solo.io.PolicyRule;
  return proto.multicluster.solo.io.PolicyRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.multicluster.solo.io.PolicyRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.multicluster.solo.io.PolicyRule}
 */
proto.multicluster.solo.io.PolicyRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVerbs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addApiGroups(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addResources(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addResourceNames(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addNonResourceUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.multicluster.solo.io.PolicyRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.multicluster.solo.io.PolicyRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.multicluster.solo.io.PolicyRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.multicluster.solo.io.PolicyRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerbsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getApiGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getResourceNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getNonResourceUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * repeated string verbs = 1;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.PolicyRule.prototype.getVerbsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.PolicyRule.prototype.setVerbsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.PolicyRule.prototype.addVerbs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.multicluster.solo.io.PolicyRule.prototype.clearVerbsList = function() {
  this.setVerbsList([]);
};


/**
 * repeated string api_groups = 2;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.PolicyRule.prototype.getApiGroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.PolicyRule.prototype.setApiGroupsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.PolicyRule.prototype.addApiGroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.multicluster.solo.io.PolicyRule.prototype.clearApiGroupsList = function() {
  this.setApiGroupsList([]);
};


/**
 * repeated string resources = 3;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.PolicyRule.prototype.getResourcesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.PolicyRule.prototype.setResourcesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.PolicyRule.prototype.addResources = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.multicluster.solo.io.PolicyRule.prototype.clearResourcesList = function() {
  this.setResourcesList([]);
};


/**
 * repeated string resource_names = 4;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.PolicyRule.prototype.getResourceNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.PolicyRule.prototype.setResourceNamesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.PolicyRule.prototype.addResourceNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.multicluster.solo.io.PolicyRule.prototype.clearResourceNamesList = function() {
  this.setResourceNamesList([]);
};


/**
 * repeated string non_resource_urls = 5;
 * @return {!Array<string>}
 */
proto.multicluster.solo.io.PolicyRule.prototype.getNonResourceUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.multicluster.solo.io.PolicyRule.prototype.setNonResourceUrlsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.multicluster.solo.io.PolicyRule.prototype.addNonResourceUrls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.multicluster.solo.io.PolicyRule.prototype.clearNonResourceUrlsList = function() {
  this.setNonResourceUrlsList([]);
};


goog.object.extend(exports, proto.multicluster.solo.io);
