/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var github_com_solo$io_solo$kit_api_external_envoy_api_v2_core_base_pb = require('../../../../../../../../../github.com/solo-io/solo-kit/api/external/envoy/api/v2/core/base_pb.js');
var extproto_ext_pb = require('../../../../../../../../../extproto/ext_pb.js');
goog.exportSymbol('proto.tcp.options.gloo.solo.io.TcpProxySettings', null, global);
goog.exportSymbol('proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tcp.options.gloo.solo.io.TcpProxySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tcp.options.gloo.solo.io.TcpProxySettings.displayName = 'proto.tcp.options.gloo.solo.io.TcpProxySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.tcp.options.gloo.solo.io.TcpProxySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tcp.options.gloo.solo.io.TcpProxySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxConnectAttempts: (f = msg.getMaxConnectAttempts()) && google_protobuf_wrappers_pb.UInt32Value.toObject(includeInstance, f),
    idleTimeout: (f = msg.getIdleTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    tunnelingConfig: (f = msg.getTunnelingConfig()) && proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tcp.options.gloo.solo.io.TcpProxySettings}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tcp.options.gloo.solo.io.TcpProxySettings;
  return proto.tcp.options.gloo.solo.io.TcpProxySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tcp.options.gloo.solo.io.TcpProxySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tcp.options.gloo.solo.io.TcpProxySettings}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.UInt32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt32Value.deserializeBinaryFromReader);
      msg.setMaxConnectAttempts(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setIdleTimeout(value);
      break;
    case 12:
      var value = new proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig;
      reader.readMessage(value,proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.deserializeBinaryFromReader);
      msg.setTunnelingConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tcp.options.gloo.solo.io.TcpProxySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tcp.options.gloo.solo.io.TcpProxySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxConnectAttempts();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getIdleTimeout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getTunnelingConfig();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.displayName = 'proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig;
  return proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hostname = 1;
 * @return {string}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.UInt32Value max_connect_attempts = 1;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.getMaxConnectAttempts = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt32Value, 1));
};


/** @param {?proto.google.protobuf.UInt32Value|undefined} value */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.setMaxConnectAttempts = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.clearMaxConnectAttempts = function() {
  this.setMaxConnectAttempts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.hasMaxConnectAttempts = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Duration idle_timeout = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.getIdleTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.setIdleTimeout = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.clearIdleTimeout = function() {
  this.setIdleTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.hasIdleTimeout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TunnelingConfig tunneling_config = 12;
 * @return {?proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.getTunnelingConfig = function() {
  return /** @type{?proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig} */ (
    jspb.Message.getWrapperField(this, proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig, 12));
};


/** @param {?proto.tcp.options.gloo.solo.io.TcpProxySettings.TunnelingConfig|undefined} value */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.setTunnelingConfig = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.clearTunnelingConfig = function() {
  this.setTunnelingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tcp.options.gloo.solo.io.TcpProxySettings.prototype.hasTunnelingConfig = function() {
  return jspb.Message.getField(this, 12) != null;
};


goog.object.extend(exports, proto.tcp.options.gloo.solo.io);
