/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var udpa_annotations_status_pb = require('../../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/udpa/annotations/status_pb.js');
var validate_validate_pb = require('../../../../../../../../../../../validate/validate_pb.js');
var extproto_ext_pb = require('../../../../../../../../../../../extproto/ext_pb.js');
goog.exportSymbol('proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.Version', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.PassTLVsMatchType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.repeatedFields_, null);
};
goog.inherits(proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.displayName = 'proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tlvTypeList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs;
  return proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.PassTLVsMatchType} */ (reader.readEnum());
      msg.setMatchType(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setTlvTypeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTlvTypeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.PassTLVsMatchType = {
  INCLUDE_ALL: 0,
  INCLUDE: 1
};

/**
 * optional PassTLVsMatchType match_type = 1;
 * @return {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.PassTLVsMatchType}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.getMatchType = function() {
  return /** @type {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.PassTLVsMatchType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.PassTLVsMatchType} value */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.setMatchType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated uint32 tlv_type = 2;
 * @return {!Array<number>}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.getTlvTypeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.setTlvTypeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.addTlvType = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.prototype.clearTlvTypeList = function() {
  this.setTlvTypeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.displayName = 'proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    passThroughTlvs: (f = msg.getPassThroughTlvs()) && proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig;
  return proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.Version} */ (reader.readEnum());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs;
      reader.readMessage(value,proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.deserializeBinaryFromReader);
      msg.setPassThroughTlvs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPassThroughTlvs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.Version = {
  V1: 0,
  V2: 1
};

/**
 * optional Version version = 1;
 * @return {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.Version}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.getVersion = function() {
  return /** @type {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.Version} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.Version} value */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.setVersion = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ProxyProtocolPassThroughTLVs pass_through_tlvs = 2;
 * @return {?proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.getPassThroughTlvs = function() {
  return /** @type{?proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs} */ (
    jspb.Message.getWrapperField(this, proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs, 2));
};


/** @param {?proto.solo.io.envoy.config.core.v3.ProxyProtocolPassThroughTLVs|undefined} value */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.setPassThroughTlvs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.clearPassThroughTlvs = function() {
  this.setPassThroughTlvs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.core.v3.ProxyProtocolConfig.prototype.hasPassThroughTlvs = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.solo.io.envoy.config.core.v3);
