/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_stitching_pb = require('../../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/extensions/graphql/stitching_pb.js');
goog.exportSymbol('proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput', null, global);
goog.exportSymbol('proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema', null, global);
goog.exportSymbol('proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig', null, global);
goog.exportSymbol('proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.repeatedFields_, null);
};
goog.inherits(proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.displayName = 'proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.prototype.toObject = function(opt_includeInstance) {
  return proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    subschemasList: jspb.Message.toObjectList(msg.getSubschemasList(),
    proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput;
  return proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema;
      reader.readMessage(value,proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.deserializeBinaryFromReader);
      msg.addSubschemas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubschemasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.displayName = 'proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 2, ""),
    typeMergeConfigMap: (f = msg.getTypeMergeConfigMap()) ? f.toObject(includeInstance, proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema;
  return proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 3:
      var value = msg.getTypeMergeConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTypeMergeConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.serializeBinaryToWriter);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.displayName = 'proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionSet: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    argsMap: (f = msg.getArgsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig;
  return proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectionSet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 3:
      var value = msg.getArgsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionSet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArgsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string selection_set = 1;
 * @return {string}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.getSelectionSet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.setSelectionSet = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field_name = 2;
 * @return {string}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.setFieldName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> args = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.getArgsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig.prototype.clearArgsMap = function() {
  this.getArgsMap().clear();
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string schema = 2;
 * @return {string}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.setSchema = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, TypeMergeConfig> type_merge_config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig>}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.getTypeMergeConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.TypeMergeConfig));
};


proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema.prototype.clearTypeMergeConfigMap = function() {
  this.getTypeMergeConfigMap().clear();
};


/**
 * repeated Schema subschemas = 1;
 * @return {!Array<!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema>}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.prototype.getSubschemasList = function() {
  return /** @type{!Array<!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema, 1));
};


/** @param {!Array<!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema>} value */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.prototype.setSubschemasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema=} opt_value
 * @param {number=} opt_index
 * @return {!proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema}
 */
proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.prototype.addSubschemas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.Schema, opt_index);
};


proto.graphql.gloo.solo.io.GraphQLToolsStitchingInput.prototype.clearSubschemasList = function() {
  this.setSubschemasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.displayName = 'proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNodesByTypeMap: (f = msg.getFieldNodesByTypeMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.FieldNodes.toObject) : [],
    fieldNodesByFieldMap: (f = msg.getFieldNodesByFieldMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.FieldNodeMap.toObject) : [],
    mergedTypesMap: (f = msg.getMergedTypesMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.toObject) : [],
    stitchedSchema: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput;
  return proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFieldNodesByTypeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.FieldNodes.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = msg.getFieldNodesByFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.FieldNodeMap.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = msg.getMergedTypesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStitchedSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNodesByTypeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.FieldNodes.serializeBinaryToWriter);
  }
  f = message.getFieldNodesByFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.FieldNodeMap.serializeBinaryToWriter);
  }
  f = message.getMergedTypesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.serializeBinaryToWriter);
  }
  f = message.getStitchedSchema();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * map<string, envoy.config.resolver.stitching.v2.FieldNodes> field_nodes_by_type = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodes>}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.getFieldNodesByTypeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodes>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.FieldNodes));
};


proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.clearFieldNodesByTypeMap = function() {
  this.getFieldNodesByTypeMap().clear();
};


/**
 * map<string, envoy.config.resolver.stitching.v2.FieldNodeMap> field_nodes_by_field = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodeMap>}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.getFieldNodesByFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodeMap>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.FieldNodeMap));
};


proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.clearFieldNodesByFieldMap = function() {
  this.getFieldNodesByFieldMap().clear();
};


/**
 * map<string, envoy.config.resolver.stitching.v2.MergedTypeConfig> merged_types = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig>}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.getMergedTypesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.MergedTypeConfig));
};


proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.clearMergedTypesMap = function() {
  this.getMergedTypesMap().clear();
};


/**
 * optional string stitched_schema = 4;
 * @return {string}
 */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.getStitchedSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.graphql.gloo.solo.io.GraphQlToolsStitchingOutput.prototype.setStitchedSchema = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.graphql.gloo.solo.io);
