/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var validate_validate_pb = require('../../../../../../../../../../validate/validate_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_graphql_pb = require('../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/extensions/graphql/graphql_pb.js');
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.ArgPath', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.FieldNode', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.FieldNodeMap', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.FieldNodes', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.MergedTypeConfig', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.ResolverConfig', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.ResolverInfo', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.Schemas', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.StitchingInfo', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig', null, global);
goog.exportSymbol('proto.envoy.config.resolver.stitching.v2.StitchingResolver', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.FieldNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.FieldNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.FieldNode.displayName = 'proto.envoy.config.resolver.stitching.v2.FieldNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.FieldNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNode}
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.FieldNode;
  return proto.envoy.config.resolver.stitching.v2.FieldNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNode}
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.FieldNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.config.resolver.stitching.v2.FieldNode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.resolver.stitching.v2.FieldNode.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.FieldNodeMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.FieldNodeMap.displayName = 'proto.envoy.config.resolver.stitching.v2.FieldNodeMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.FieldNodeMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNodeMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesMap: (f = msg.getNodesMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.FieldNodes.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNodeMap}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.FieldNodeMap;
  return proto.envoy.config.resolver.stitching.v2.FieldNodeMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNodeMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNodeMap}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getNodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.FieldNodes.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.FieldNodeMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNodeMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.FieldNodes.serializeBinaryToWriter);
  }
};


/**
 * map<string, FieldNodes> nodes = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodes>}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodeMap.prototype.getNodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodes>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.FieldNodes));
};


proto.envoy.config.resolver.stitching.v2.FieldNodeMap.prototype.clearNodesMap = function() {
  this.getNodesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.resolver.stitching.v2.FieldNodes.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.FieldNodes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.FieldNodes.displayName = 'proto.envoy.config.resolver.stitching.v2.FieldNodes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.FieldNodes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNodes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNodesList: jspb.Message.toObjectList(msg.getFieldNodesList(),
    proto.envoy.config.resolver.stitching.v2.FieldNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNodes}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.FieldNodes;
  return proto.envoy.config.resolver.stitching.v2.FieldNodes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNodes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNodes}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.resolver.stitching.v2.FieldNode;
      reader.readMessage(value,proto.envoy.config.resolver.stitching.v2.FieldNode.deserializeBinaryFromReader);
      msg.addFieldNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.FieldNodes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNodes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.resolver.stitching.v2.FieldNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FieldNode field_nodes = 1;
 * @return {!Array<!proto.envoy.config.resolver.stitching.v2.FieldNode>}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.prototype.getFieldNodesList = function() {
  return /** @type{!Array<!proto.envoy.config.resolver.stitching.v2.FieldNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.resolver.stitching.v2.FieldNode, 1));
};


/** @param {!Array<!proto.envoy.config.resolver.stitching.v2.FieldNode>} value */
proto.envoy.config.resolver.stitching.v2.FieldNodes.prototype.setFieldNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.resolver.stitching.v2.FieldNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.resolver.stitching.v2.FieldNode}
 */
proto.envoy.config.resolver.stitching.v2.FieldNodes.prototype.addFieldNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.resolver.stitching.v2.FieldNode, opt_index);
};


proto.envoy.config.resolver.stitching.v2.FieldNodes.prototype.clearFieldNodesList = function() {
  this.setFieldNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.ResolverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.ResolverConfig.displayName = 'proto.envoy.config.resolver.stitching.v2.ResolverConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.ResolverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.ResolverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionSet: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.ResolverConfig}
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.ResolverConfig;
  return proto.envoy.config.resolver.stitching.v2.ResolverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.ResolverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.ResolverConfig}
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectionSet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.ResolverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.ResolverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionSet();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string selection_set = 1;
 * @return {string}
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.prototype.getSelectionSet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.prototype.setSelectionSet = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field_name = 2;
 * @return {string}
 */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.envoy.config.resolver.stitching.v2.ResolverConfig.prototype.setFieldName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.Schemas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.resolver.stitching.v2.Schemas.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.Schemas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.Schemas.displayName = 'proto.envoy.config.resolver.stitching.v2.Schemas';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.resolver.stitching.v2.Schemas.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.Schemas.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.Schemas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.Schemas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.Schemas.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemasList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.Schemas}
 */
proto.envoy.config.resolver.stitching.v2.Schemas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.Schemas;
  return proto.envoy.config.resolver.stitching.v2.Schemas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.Schemas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.Schemas}
 */
proto.envoy.config.resolver.stitching.v2.Schemas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSchemas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.Schemas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.Schemas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.Schemas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.Schemas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemasList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string schemas = 1;
 * @return {!Array<string>}
 */
proto.envoy.config.resolver.stitching.v2.Schemas.prototype.getSchemasList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.envoy.config.resolver.stitching.v2.Schemas.prototype.setSchemasList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.envoy.config.resolver.stitching.v2.Schemas.prototype.addSchemas = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.envoy.config.resolver.stitching.v2.Schemas.prototype.clearSchemasList = function() {
  this.setSchemasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.ArgPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.resolver.stitching.v2.ArgPath.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.ArgPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.ArgPath.displayName = 'proto.envoy.config.resolver.stitching.v2.ArgPath';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.ArgPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.ArgPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    setterPathList: jspb.Message.getRepeatedField(msg, 1),
    extractionPathList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.ArgPath}
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.ArgPath;
  return proto.envoy.config.resolver.stitching.v2.ArgPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.ArgPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.ArgPath}
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSetterPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addExtractionPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.ArgPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.ArgPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetterPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getExtractionPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string setter_path = 1;
 * @return {!Array<string>}
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.getSetterPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.setSetterPathList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.addSetterPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.clearSetterPathList = function() {
  this.setSetterPathList([]);
};


/**
 * repeated string extraction_path = 2;
 * @return {!Array<string>}
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.getExtractionPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.setExtractionPathList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.addExtractionPath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.envoy.config.resolver.stitching.v2.ArgPath.prototype.clearExtractionPathList = function() {
  this.setExtractionPathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.resolver.stitching.v2.ResolverInfo.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.ResolverInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.ResolverInfo.displayName = 'proto.envoy.config.resolver.stitching.v2.ResolverInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.ResolverInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.ResolverInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.envoy.config.resolver.stitching.v2.ArgPath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.ResolverInfo}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.ResolverInfo;
  return proto.envoy.config.resolver.stitching.v2.ResolverInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.ResolverInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.ResolverInfo}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldName(value);
      break;
    case 2:
      var value = new proto.envoy.config.resolver.stitching.v2.ArgPath;
      reader.readMessage(value,proto.envoy.config.resolver.stitching.v2.ArgPath.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.ResolverInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.ResolverInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.resolver.stitching.v2.ArgPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional string field_name = 1;
 * @return {string}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.getFieldName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.setFieldName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ArgPath args = 2;
 * @return {!Array<!proto.envoy.config.resolver.stitching.v2.ArgPath>}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.envoy.config.resolver.stitching.v2.ArgPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.resolver.stitching.v2.ArgPath, 2));
};


/** @param {!Array<!proto.envoy.config.resolver.stitching.v2.ArgPath>} value */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.setArgsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.resolver.stitching.v2.ArgPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.resolver.stitching.v2.ArgPath}
 */
proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.resolver.stitching.v2.ArgPath, opt_index);
};


proto.envoy.config.resolver.stitching.v2.ResolverInfo.prototype.clearArgsList = function() {
  this.setArgsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.MergedTypeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.displayName = 'proto.envoy.config.resolver.stitching.v2.MergedTypeConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selectionSetsMap: (f = msg.getSelectionSetsMap()) ? f.toObject(includeInstance, undefined) : [],
    uniqueFieldsToSubschemaNameMap: (f = msg.getUniqueFieldsToSubschemaNameMap()) ? f.toObject(includeInstance, undefined) : [],
    nonUniqueFieldsToSubschemaNamesMap: (f = msg.getNonUniqueFieldsToSubschemaNamesMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.Schemas.toObject) : [],
    declarativeTargetSubschemasMap: (f = msg.getDeclarativeTargetSubschemasMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.Schemas.toObject) : [],
    subschemaNameToResolverInfoMap: (f = msg.getSubschemaNameToResolverInfoMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.ResolverInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.MergedTypeConfig;
  return proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 2:
      var value = msg.getSelectionSetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 3:
      var value = msg.getUniqueFieldsToSubschemaNameMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = msg.getNonUniqueFieldsToSubschemaNamesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.Schemas.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = msg.getDeclarativeTargetSubschemasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.Schemas.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = msg.getSubschemaNameToResolverInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.ResolverInfo.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelectionSetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getUniqueFieldsToSubschemaNameMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getNonUniqueFieldsToSubschemaNamesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.Schemas.serializeBinaryToWriter);
  }
  f = message.getDeclarativeTargetSubschemasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.Schemas.serializeBinaryToWriter);
  }
  f = message.getSubschemaNameToResolverInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.ResolverInfo.serializeBinaryToWriter);
  }
};


/**
 * optional string type_name = 1;
 * @return {string}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.setTypeName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> selection_sets = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.getSelectionSetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.clearSelectionSetsMap = function() {
  this.getSelectionSetsMap().clear();
};


/**
 * map<string, string> unique_fields_to_subschema_name = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.getUniqueFieldsToSubschemaNameMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.clearUniqueFieldsToSubschemaNameMap = function() {
  this.getUniqueFieldsToSubschemaNameMap().clear();
};


/**
 * map<string, Schemas> non_unique_fields_to_subschema_names = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.Schemas>}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.getNonUniqueFieldsToSubschemaNamesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.Schemas>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.Schemas));
};


proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.clearNonUniqueFieldsToSubschemaNamesMap = function() {
  this.getNonUniqueFieldsToSubschemaNamesMap().clear();
};


/**
 * map<string, Schemas> declarative_target_subschemas = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.Schemas>}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.getDeclarativeTargetSubschemasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.Schemas>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.Schemas));
};


proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.clearDeclarativeTargetSubschemasMap = function() {
  this.getDeclarativeTargetSubschemasMap().clear();
};


/**
 * map<string, ResolverInfo> subschema_name_to_resolver_info = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.ResolverInfo>}
 */
proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.getSubschemaNameToResolverInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.ResolverInfo>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.ResolverInfo));
};


proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.prototype.clearSubschemaNameToResolverInfoMap = function() {
  this.getSubschemaNameToResolverInfoMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.StitchingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.StitchingInfo.displayName = 'proto.envoy.config.resolver.stitching.v2.StitchingInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.StitchingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldNodesByTypeMap: (f = msg.getFieldNodesByTypeMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.FieldNodes.toObject) : [],
    fieldNodesByFieldMap: (f = msg.getFieldNodesByFieldMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.FieldNodeMap.toObject) : [],
    mergedTypesMap: (f = msg.getMergedTypesMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.toObject) : [],
    subschemaNameToSubschemaConfigMap: (f = msg.getSubschemaNameToSubschemaConfigMap()) ? f.toObject(includeInstance, proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.StitchingInfo}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.StitchingInfo;
  return proto.envoy.config.resolver.stitching.v2.StitchingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.StitchingInfo}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFieldNodesByTypeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.FieldNodes.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = msg.getFieldNodesByFieldMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.FieldNodeMap.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = msg.getMergedTypesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = msg.getSubschemaNameToSubschemaConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.StitchingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldNodesByTypeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.FieldNodes.serializeBinaryToWriter);
  }
  f = message.getFieldNodesByFieldMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.FieldNodeMap.serializeBinaryToWriter);
  }
  f = message.getMergedTypesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.MergedTypeConfig.serializeBinaryToWriter);
  }
  f = message.getSubschemaNameToSubschemaConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.serializeBinaryToWriter);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.displayName = 'proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    executableSchema: (f = msg.getExecutableSchema()) && github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_graphql_pb.ExecutableSchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig;
  return proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_graphql_pb.ExecutableSchema;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_graphql_pb.ExecutableSchema.deserializeBinaryFromReader);
      msg.setExecutableSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutableSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_graphql_pb.ExecutableSchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional envoy.config.filter.http.graphql.v2.ExecutableSchema executable_schema = 1;
 * @return {?proto.envoy.config.filter.http.graphql.v2.ExecutableSchema}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.prototype.getExecutableSchema = function() {
  return /** @type{?proto.envoy.config.filter.http.graphql.v2.ExecutableSchema} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_extensions_graphql_graphql_pb.ExecutableSchema, 1));
};


/** @param {?proto.envoy.config.filter.http.graphql.v2.ExecutableSchema|undefined} value */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.prototype.setExecutableSchema = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.prototype.clearExecutableSchema = function() {
  this.setExecutableSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig.prototype.hasExecutableSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, FieldNodes> field_nodes_by_type = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodes>}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.getFieldNodesByTypeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodes>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.FieldNodes));
};


proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.clearFieldNodesByTypeMap = function() {
  this.getFieldNodesByTypeMap().clear();
};


/**
 * map<string, FieldNodeMap> field_nodes_by_field = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodeMap>}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.getFieldNodesByFieldMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.FieldNodeMap>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.FieldNodeMap));
};


proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.clearFieldNodesByFieldMap = function() {
  this.getFieldNodesByFieldMap().clear();
};


/**
 * map<string, MergedTypeConfig> merged_types = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig>}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.getMergedTypesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.MergedTypeConfig>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.MergedTypeConfig));
};


proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.clearMergedTypesMap = function() {
  this.getMergedTypesMap().clear();
};


/**
 * map<string, SubschemaConfig> subschema_name_to_subschema_config = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig>}
 */
proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.getSubschemaNameToSubschemaConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.envoy.config.resolver.stitching.v2.StitchingInfo.SubschemaConfig));
};


proto.envoy.config.resolver.stitching.v2.StitchingInfo.prototype.clearSubschemaNameToSubschemaConfigMap = function() {
  this.getSubschemaNameToSubschemaConfigMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.resolver.stitching.v2.StitchingResolver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.resolver.stitching.v2.StitchingResolver.displayName = 'proto.envoy.config.resolver.stitching.v2.StitchingResolver';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.resolver.stitching.v2.StitchingResolver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingResolver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.toObject = function(includeInstance, msg) {
  var f, obj = {
    subschemaName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.resolver.stitching.v2.StitchingResolver}
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.resolver.stitching.v2.StitchingResolver;
  return proto.envoy.config.resolver.stitching.v2.StitchingResolver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingResolver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.resolver.stitching.v2.StitchingResolver}
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubschemaName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.resolver.stitching.v2.StitchingResolver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.resolver.stitching.v2.StitchingResolver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubschemaName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string subschema_name = 1;
 * @return {string}
 */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.prototype.getSubschemaName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.resolver.stitching.v2.StitchingResolver.prototype.setSubschemaName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.envoy.config.resolver.stitching.v2);
