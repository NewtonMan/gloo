/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var extproto_ext_pb = require('../../../../../../../extproto/ext_pb.js');
var github_com_solo$io_solo$kit_api_v1_ref_pb = require('../../../../../../../github.com/solo-io/solo-kit/api/v1/ref_pb.js');
var github_com_solo$io_solo$kit_api_v1_solo$kit_pb = require('../../../../../../../github.com/solo-io/solo-kit/api/v1/solo-kit_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gateway_v1_gateway_pb = require('../../../../../../../github.com/solo-io/solo-apis/api/gloo/gateway/v1/gateway_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb = require('../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/v1/ssl/ssl_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb = require('../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/address_pb.js');
goog.exportSymbol('proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses', null, global);
goog.exportSymbol('proto.gateway.solo.io.MatchableTcpGatewaySpec', null, global);
goog.exportSymbol('proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher', null, global);
goog.exportSymbol('proto.gateway.solo.io.MatchableTcpGatewayStatus', null, global);
goog.exportSymbol('proto.gateway.solo.io.MatchableTcpGatewayStatus.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.solo.io.MatchableTcpGatewaySpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.solo.io.MatchableTcpGatewaySpec.displayName = 'proto.gateway.solo.io.MatchableTcpGatewaySpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.solo.io.MatchableTcpGatewaySpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.solo.io.MatchableTcpGatewaySpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    matcher: (f = msg.getMatcher()) && proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.toObject(includeInstance, f),
    tcpGateway: (f = msg.getTcpGateway()) && github_com_solo$io_solo$apis_api_gloo_gateway_v1_gateway_pb.TcpGateway.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewaySpec}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.solo.io.MatchableTcpGatewaySpec;
  return proto.gateway.solo.io.MatchableTcpGatewaySpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewaySpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewaySpec}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher;
      reader.readMessage(value,proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.deserializeBinaryFromReader);
      msg.setMatcher(value);
      break;
    case 4:
      var value = new github_com_solo$io_solo$apis_api_gloo_gateway_v1_gateway_pb.TcpGateway;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gateway_v1_gateway_pb.TcpGateway.deserializeBinaryFromReader);
      msg.setTcpGateway(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.solo.io.MatchableTcpGatewaySpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewaySpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatcher();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.serializeBinaryToWriter
    );
  }
  f = message.getTcpGateway();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_solo$io_solo$apis_api_gloo_gateway_v1_gateway_pb.TcpGateway.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.repeatedFields_, null);
};
goog.inherits(proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.displayName = 'proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePrefixRangesList: jspb.Message.toObjectList(msg.getSourcePrefixRangesList(),
    github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.CidrRange.toObject, includeInstance),
    sslConfig: (f = msg.getSslConfig()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.SslConfig.toObject(includeInstance, f),
    passthroughCipherSuitesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher;
  return proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.CidrRange;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.CidrRange.deserializeBinaryFromReader);
      msg.addSourcePrefixRanges(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.SslConfig;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.SslConfig.deserializeBinaryFromReader);
      msg.setSslConfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPassthroughCipherSuites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePrefixRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.CidrRange.serializeBinaryToWriter
    );
  }
  f = message.getSslConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.SslConfig.serializeBinaryToWriter
    );
  }
  f = message.getPassthroughCipherSuitesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated solo.io.envoy.config.core.v3.CidrRange source_prefix_ranges = 1;
 * @return {!Array<!proto.solo.io.envoy.config.core.v3.CidrRange>}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.getSourcePrefixRangesList = function() {
  return /** @type{!Array<!proto.solo.io.envoy.config.core.v3.CidrRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.CidrRange, 1));
};


/** @param {!Array<!proto.solo.io.envoy.config.core.v3.CidrRange>} value */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.setSourcePrefixRangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.solo.io.envoy.config.core.v3.CidrRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.solo.io.envoy.config.core.v3.CidrRange}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.addSourcePrefixRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.solo.io.envoy.config.core.v3.CidrRange, opt_index);
};


proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.clearSourcePrefixRangesList = function() {
  this.setSourcePrefixRangesList([]);
};


/**
 * optional gloo.solo.io.SslConfig ssl_config = 2;
 * @return {?proto.gloo.solo.io.SslConfig}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.getSslConfig = function() {
  return /** @type{?proto.gloo.solo.io.SslConfig} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.SslConfig, 2));
};


/** @param {?proto.gloo.solo.io.SslConfig|undefined} value */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.setSslConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.clearSslConfig = function() {
  this.setSslConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.hasSslConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string passthrough_cipher_suites = 3;
 * @return {!Array<string>}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.getPassthroughCipherSuitesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.setPassthroughCipherSuitesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.addPassthroughCipherSuites = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher.prototype.clearPassthroughCipherSuitesList = function() {
  this.setPassthroughCipherSuitesList([]);
};


/**
 * optional Matcher matcher = 3;
 * @return {?proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.getMatcher = function() {
  return /** @type{?proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher} */ (
    jspb.Message.getWrapperField(this, proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher, 3));
};


/** @param {?proto.gateway.solo.io.MatchableTcpGatewaySpec.Matcher|undefined} value */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.setMatcher = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.clearMatcher = function() {
  this.setMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.hasMatcher = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TcpGateway tcp_gateway = 4;
 * @return {?proto.gateway.solo.io.TcpGateway}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.getTcpGateway = function() {
  return /** @type{?proto.gateway.solo.io.TcpGateway} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gateway_v1_gateway_pb.TcpGateway, 4));
};


/** @param {?proto.gateway.solo.io.TcpGateway|undefined} value */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.setTcpGateway = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.clearTcpGateway = function() {
  this.setTcpGateway(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.solo.io.MatchableTcpGatewaySpec.prototype.hasTcpGateway = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.solo.io.MatchableTcpGatewayStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.solo.io.MatchableTcpGatewayStatus.displayName = 'proto.gateway.solo.io.MatchableTcpGatewayStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.solo.io.MatchableTcpGatewayStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.solo.io.MatchableTcpGatewayStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reportedBy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subresourceStatusesMap: (f = msg.getSubresourceStatusesMap()) ? f.toObject(includeInstance, proto.gateway.solo.io.MatchableTcpGatewayStatus.toObject) : [],
    details: (f = msg.getDetails()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewayStatus}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.solo.io.MatchableTcpGatewayStatus;
  return proto.gateway.solo.io.MatchableTcpGatewayStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewayStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewayStatus}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gateway.solo.io.MatchableTcpGatewayStatus.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportedBy(value);
      break;
    case 4:
      var value = msg.getSubresourceStatusesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.gateway.solo.io.MatchableTcpGatewayStatus.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.solo.io.MatchableTcpGatewayStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewayStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReportedBy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubresourceStatusesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.gateway.solo.io.MatchableTcpGatewayStatus.serializeBinaryToWriter);
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.State = {
  PENDING: 0,
  ACCEPTED: 1,
  REJECTED: 2,
  WARNING: 3
};

/**
 * optional State state = 1;
 * @return {!proto.gateway.solo.io.MatchableTcpGatewayStatus.State}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.getState = function() {
  return /** @type {!proto.gateway.solo.io.MatchableTcpGatewayStatus.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.gateway.solo.io.MatchableTcpGatewayStatus.State} value */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reported_by = 3;
 * @return {string}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.getReportedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.setReportedBy = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, MatchableTcpGatewayStatus> subresource_statuses = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.gateway.solo.io.MatchableTcpGatewayStatus>}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.getSubresourceStatusesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.gateway.solo.io.MatchableTcpGatewayStatus>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.gateway.solo.io.MatchableTcpGatewayStatus));
};


proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.clearSubresourceStatusesMap = function() {
  this.getSubresourceStatusesMap().clear();
};


/**
 * optional google.protobuf.Struct details = 5;
 * @return {?proto.google.protobuf.Struct}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.getDetails = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 5));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.setDetails = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.clearDetails = function() {
  this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.solo.io.MatchableTcpGatewayStatus.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.displayName = 'proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesMap: (f = msg.getStatusesMap()) ? f.toObject(includeInstance, proto.gateway.solo.io.MatchableTcpGatewayStatus.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses}
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses;
  return proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses}
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getStatusesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.gateway.solo.io.MatchableTcpGatewayStatus.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.gateway.solo.io.MatchableTcpGatewayStatus.serializeBinaryToWriter);
  }
};


/**
 * map<string, MatchableTcpGatewayStatus> statuses = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.gateway.solo.io.MatchableTcpGatewayStatus>}
 */
proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.prototype.getStatusesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.gateway.solo.io.MatchableTcpGatewayStatus>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.gateway.solo.io.MatchableTcpGatewayStatus));
};


proto.gateway.solo.io.MatchableTcpGatewayNamespacedStatuses.prototype.clearStatusesMap = function() {
  this.getStatusesMap().clear();
};


goog.object.extend(exports, proto.gateway.solo.io);
