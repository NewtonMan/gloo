/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../../extproto/ext_pb.js');
var validate_validate_pb = require('../../../../../../../../../validate/validate_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb = require('../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/address_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb = require('../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/v1/ssl/ssl_pb.js');
goog.exportSymbol('proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.DnsCacheConfig', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.DnsLookupFamily', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.DnsResolverOptions', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.FilterConfig', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.PerRouteConfig', null, global);
goog.exportSymbol('proto.dfp.options.gloo.solo.io.RefreshRate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.FilterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfp.options.gloo.solo.io.FilterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.FilterConfig.displayName = 'proto.dfp.options.gloo.solo.io.FilterConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.FilterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.FilterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.FilterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    dnsCacheConfig: (f = msg.getDnsCacheConfig()) && proto.dfp.options.gloo.solo.io.DnsCacheConfig.toObject(includeInstance, f),
    saveUpstreamAddress: jspb.Message.getFieldWithDefault(msg, 2, false),
    sslConfig: (f = msg.getSslConfig()) && github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.UpstreamSslConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.FilterConfig}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.FilterConfig;
  return proto.dfp.options.gloo.solo.io.FilterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.FilterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.FilterConfig}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dfp.options.gloo.solo.io.DnsCacheConfig;
      reader.readMessage(value,proto.dfp.options.gloo.solo.io.DnsCacheConfig.deserializeBinaryFromReader);
      msg.setDnsCacheConfig(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaveUpstreamAddress(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.UpstreamSslConfig;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.UpstreamSslConfig.deserializeBinaryFromReader);
      msg.setSslConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.FilterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.FilterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.FilterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDnsCacheConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dfp.options.gloo.solo.io.DnsCacheConfig.serializeBinaryToWriter
    );
  }
  f = message.getSaveUpstreamAddress();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSslConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.UpstreamSslConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional DnsCacheConfig dns_cache_config = 1;
 * @return {?proto.dfp.options.gloo.solo.io.DnsCacheConfig}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.getDnsCacheConfig = function() {
  return /** @type{?proto.dfp.options.gloo.solo.io.DnsCacheConfig} */ (
    jspb.Message.getWrapperField(this, proto.dfp.options.gloo.solo.io.DnsCacheConfig, 1));
};


/** @param {?proto.dfp.options.gloo.solo.io.DnsCacheConfig|undefined} value */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.setDnsCacheConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dfp.options.gloo.solo.io.FilterConfig.prototype.clearDnsCacheConfig = function() {
  this.setDnsCacheConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.hasDnsCacheConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool save_upstream_address = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.getSaveUpstreamAddress = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.setSaveUpstreamAddress = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional gloo.solo.io.UpstreamSslConfig ssl_config = 3;
 * @return {?proto.gloo.solo.io.UpstreamSslConfig}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.getSslConfig = function() {
  return /** @type{?proto.gloo.solo.io.UpstreamSslConfig} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_v1_ssl_ssl_pb.UpstreamSslConfig, 3));
};


/** @param {?proto.gloo.solo.io.UpstreamSslConfig|undefined} value */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.setSslConfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dfp.options.gloo.solo.io.FilterConfig.prototype.clearSslConfig = function() {
  this.setSslConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.FilterConfig.prototype.hasSslConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.displayName = 'proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxPendingRequests: (f = msg.getMaxPendingRequests()) && google_protobuf_wrappers_pb.UInt32Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers}
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers;
  return proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers}
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.UInt32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt32Value.deserializeBinaryFromReader);
      msg.setMaxPendingRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxPendingRequests();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.UInt32Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.UInt32Value max_pending_requests = 1;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.prototype.getMaxPendingRequests = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt32Value, 1));
};


/** @param {?proto.google.protobuf.UInt32Value|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.prototype.setMaxPendingRequests = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.prototype.clearMaxPendingRequests = function() {
  this.setMaxPendingRequests(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.prototype.hasMaxPendingRequests = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dfp.options.gloo.solo.io.DnsCacheConfig.repeatedFields_, proto.dfp.options.gloo.solo.io.DnsCacheConfig.oneofGroups_);
};
goog.inherits(proto.dfp.options.gloo.solo.io.DnsCacheConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.DnsCacheConfig.displayName = 'proto.dfp.options.gloo.solo.io.DnsCacheConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.repeatedFields_ = [10];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.oneofGroups_ = [[8,9]];

/**
 * @enum {number}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.DnscachetypeCase = {
  DNSCACHETYPE_NOT_SET: 0,
  CARES_DNS: 8,
  APPLE_DNS: 9
};

/**
 * @return {proto.dfp.options.gloo.solo.io.DnsCacheConfig.DnscachetypeCase}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getDnscachetypeCase = function() {
  return /** @type {proto.dfp.options.gloo.solo.io.DnsCacheConfig.DnscachetypeCase} */(jspb.Message.computeOneofCase(this, proto.dfp.options.gloo.solo.io.DnsCacheConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.DnsCacheConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.DnsCacheConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    dnsLookupFamily: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dnsRefreshRate: (f = msg.getDnsRefreshRate()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    hostTtl: (f = msg.getHostTtl()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    maxHosts: (f = msg.getMaxHosts()) && google_protobuf_wrappers_pb.UInt32Value.toObject(includeInstance, f),
    dnsFailureRefreshRate: (f = msg.getDnsFailureRefreshRate()) && proto.dfp.options.gloo.solo.io.RefreshRate.toObject(includeInstance, f),
    dnsCacheCircuitBreaker: (f = msg.getDnsCacheCircuitBreaker()) && proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.toObject(includeInstance, f),
    caresDns: (f = msg.getCaresDns()) && proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.toObject(includeInstance, f),
    appleDns: (f = msg.getAppleDns()) && proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.toObject(includeInstance, f),
    preresolveHostnamesList: jspb.Message.toObjectList(msg.getPreresolveHostnamesList(),
    github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.SocketAddress.toObject, includeInstance),
    dnsQueryTimeout: (f = msg.getDnsQueryTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.DnsCacheConfig}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.DnsCacheConfig;
  return proto.dfp.options.gloo.solo.io.DnsCacheConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.DnsCacheConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.DnsCacheConfig}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.dfp.options.gloo.solo.io.DnsLookupFamily} */ (reader.readEnum());
      msg.setDnsLookupFamily(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDnsRefreshRate(value);
      break;
    case 4:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setHostTtl(value);
      break;
    case 5:
      var value = new google_protobuf_wrappers_pb.UInt32Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.UInt32Value.deserializeBinaryFromReader);
      msg.setMaxHosts(value);
      break;
    case 6:
      var value = new proto.dfp.options.gloo.solo.io.RefreshRate;
      reader.readMessage(value,proto.dfp.options.gloo.solo.io.RefreshRate.deserializeBinaryFromReader);
      msg.setDnsFailureRefreshRate(value);
      break;
    case 7:
      var value = new proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers;
      reader.readMessage(value,proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.deserializeBinaryFromReader);
      msg.setDnsCacheCircuitBreaker(value);
      break;
    case 8:
      var value = new proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig;
      reader.readMessage(value,proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.deserializeBinaryFromReader);
      msg.setCaresDns(value);
      break;
    case 9:
      var value = new proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig;
      reader.readMessage(value,proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.deserializeBinaryFromReader);
      msg.setAppleDns(value);
      break;
    case 10:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.SocketAddress;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.SocketAddress.deserializeBinaryFromReader);
      msg.addPreresolveHostnames(value);
      break;
    case 11:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDnsQueryTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.DnsCacheConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.DnsCacheConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDnsLookupFamily();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDnsRefreshRate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getHostTtl();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getMaxHosts();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_wrappers_pb.UInt32Value.serializeBinaryToWriter
    );
  }
  f = message.getDnsFailureRefreshRate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.dfp.options.gloo.solo.io.RefreshRate.serializeBinaryToWriter
    );
  }
  f = message.getDnsCacheCircuitBreaker();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers.serializeBinaryToWriter
    );
  }
  f = message.getCaresDns();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.serializeBinaryToWriter
    );
  }
  f = message.getAppleDns();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.serializeBinaryToWriter
    );
  }
  f = message.getPreresolveHostnamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.SocketAddress.serializeBinaryToWriter
    );
  }
  f = message.getDnsQueryTimeout();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional DnsLookupFamily dns_lookup_family = 2;
 * @return {!proto.dfp.options.gloo.solo.io.DnsLookupFamily}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getDnsLookupFamily = function() {
  return /** @type {!proto.dfp.options.gloo.solo.io.DnsLookupFamily} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.dfp.options.gloo.solo.io.DnsLookupFamily} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setDnsLookupFamily = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Duration dns_refresh_rate = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getDnsRefreshRate = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setDnsRefreshRate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearDnsRefreshRate = function() {
  this.setDnsRefreshRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasDnsRefreshRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Duration host_ttl = 4;
 * @return {?proto.google.protobuf.Duration}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getHostTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 4));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setHostTtl = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearHostTtl = function() {
  this.setHostTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasHostTtl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.UInt32Value max_hosts = 5;
 * @return {?proto.google.protobuf.UInt32Value}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getMaxHosts = function() {
  return /** @type{?proto.google.protobuf.UInt32Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.UInt32Value, 5));
};


/** @param {?proto.google.protobuf.UInt32Value|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setMaxHosts = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearMaxHosts = function() {
  this.setMaxHosts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasMaxHosts = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RefreshRate dns_failure_refresh_rate = 6;
 * @return {?proto.dfp.options.gloo.solo.io.RefreshRate}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getDnsFailureRefreshRate = function() {
  return /** @type{?proto.dfp.options.gloo.solo.io.RefreshRate} */ (
    jspb.Message.getWrapperField(this, proto.dfp.options.gloo.solo.io.RefreshRate, 6));
};


/** @param {?proto.dfp.options.gloo.solo.io.RefreshRate|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setDnsFailureRefreshRate = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearDnsFailureRefreshRate = function() {
  this.setDnsFailureRefreshRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasDnsFailureRefreshRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;
 * @return {?proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getDnsCacheCircuitBreaker = function() {
  return /** @type{?proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers} */ (
    jspb.Message.getWrapperField(this, proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers, 7));
};


/** @param {?proto.dfp.options.gloo.solo.io.DnsCacheCircuitBreakers|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setDnsCacheCircuitBreaker = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearDnsCacheCircuitBreaker = function() {
  this.setDnsCacheCircuitBreaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasDnsCacheCircuitBreaker = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CaresDnsResolverConfig cares_dns = 8;
 * @return {?proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getCaresDns = function() {
  return /** @type{?proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig} */ (
    jspb.Message.getWrapperField(this, proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig, 8));
};


/** @param {?proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setCaresDns = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.dfp.options.gloo.solo.io.DnsCacheConfig.oneofGroups_[0], value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearCaresDns = function() {
  this.setCaresDns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasCaresDns = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AppleDnsResolverConfig apple_dns = 9;
 * @return {?proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getAppleDns = function() {
  return /** @type{?proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig} */ (
    jspb.Message.getWrapperField(this, proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig, 9));
};


/** @param {?proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setAppleDns = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.dfp.options.gloo.solo.io.DnsCacheConfig.oneofGroups_[0], value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearAppleDns = function() {
  this.setAppleDns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasAppleDns = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated solo.io.envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;
 * @return {!Array<!proto.solo.io.envoy.config.core.v3.SocketAddress>}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getPreresolveHostnamesList = function() {
  return /** @type{!Array<!proto.solo.io.envoy.config.core.v3.SocketAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.SocketAddress, 10));
};


/** @param {!Array<!proto.solo.io.envoy.config.core.v3.SocketAddress>} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setPreresolveHostnamesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.solo.io.envoy.config.core.v3.SocketAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.solo.io.envoy.config.core.v3.SocketAddress}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.addPreresolveHostnames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.solo.io.envoy.config.core.v3.SocketAddress, opt_index);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearPreresolveHostnamesList = function() {
  this.setPreresolveHostnamesList([]);
};


/**
 * optional google.protobuf.Duration dns_query_timeout = 11;
 * @return {?proto.google.protobuf.Duration}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.getDnsQueryTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 11));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.setDnsQueryTimeout = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.clearDnsQueryTimeout = function() {
  this.setDnsQueryTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.DnsCacheConfig.prototype.hasDnsQueryTimeout = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.RefreshRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfp.options.gloo.solo.io.RefreshRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.RefreshRate.displayName = 'proto.dfp.options.gloo.solo.io.RefreshRate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.RefreshRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.RefreshRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.RefreshRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseInterval: (f = msg.getBaseInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    maxInterval: (f = msg.getMaxInterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.RefreshRate}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.RefreshRate;
  return proto.dfp.options.gloo.solo.io.RefreshRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.RefreshRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.RefreshRate}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setBaseInterval(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setMaxInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.RefreshRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.RefreshRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.RefreshRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseInterval();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getMaxInterval();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration base_interval = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.getBaseInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.setBaseInterval = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dfp.options.gloo.solo.io.RefreshRate.prototype.clearBaseInterval = function() {
  this.setBaseInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.hasBaseInterval = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Duration max_interval = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.getMaxInterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.setMaxInterval = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dfp.options.gloo.solo.io.RefreshRate.prototype.clearMaxInterval = function() {
  this.setMaxInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.RefreshRate.prototype.hasMaxInterval = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_);
};
goog.inherits(proto.dfp.options.gloo.solo.io.PerRouteConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.PerRouteConfig.displayName = 'proto.dfp.options.gloo.solo.io.PerRouteConfig';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.HostRewriteSpecifierCase = {
  HOST_REWRITE_SPECIFIER_NOT_SET: 0,
  HOST_REWRITE: 1,
  AUTO_HOST_REWRITE_HEADER: 2
};

/**
 * @return {proto.dfp.options.gloo.solo.io.PerRouteConfig.HostRewriteSpecifierCase}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.getHostRewriteSpecifierCase = function() {
  return /** @type {proto.dfp.options.gloo.solo.io.PerRouteConfig.HostRewriteSpecifierCase} */(jspb.Message.computeOneofCase(this, proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.PerRouteConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.PerRouteConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostRewrite: jspb.Message.getFieldWithDefault(msg, 1, ""),
    autoHostRewriteHeader: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.PerRouteConfig}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.PerRouteConfig;
  return proto.dfp.options.gloo.solo.io.PerRouteConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.PerRouteConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.PerRouteConfig}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostRewrite(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAutoHostRewriteHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.PerRouteConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.PerRouteConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string host_rewrite = 1;
 * @return {string}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.getHostRewrite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.setHostRewrite = function(value) {
  jspb.Message.setOneofField(this, 1, proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_[0], value);
};


proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.clearHostRewrite = function() {
  jspb.Message.setOneofField(this, 1, proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.hasHostRewrite = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string auto_host_rewrite_header = 2;
 * @return {string}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.getAutoHostRewriteHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.setAutoHostRewriteHeader = function(value) {
  jspb.Message.setOneofField(this, 2, proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_[0], value);
};


proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.clearAutoHostRewriteHeader = function() {
  jspb.Message.setOneofField(this, 2, proto.dfp.options.gloo.solo.io.PerRouteConfig.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.PerRouteConfig.prototype.hasAutoHostRewriteHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfp.options.gloo.solo.io.DnsResolverOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.DnsResolverOptions.displayName = 'proto.dfp.options.gloo.solo.io.DnsResolverOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.DnsResolverOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.DnsResolverOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    useTcpForDnsLookups: jspb.Message.getFieldWithDefault(msg, 1, false),
    noDefaultSearchDomain: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.DnsResolverOptions}
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.DnsResolverOptions;
  return proto.dfp.options.gloo.solo.io.DnsResolverOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.DnsResolverOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.DnsResolverOptions}
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTcpForDnsLookups(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoDefaultSearchDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.DnsResolverOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.DnsResolverOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseTcpForDnsLookups();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNoDefaultSearchDomain();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool use_tcp_for_dns_lookups = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.prototype.getUseTcpForDnsLookups = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.prototype.setUseTcpForDnsLookups = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool no_default_search_domain = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.prototype.getNoDefaultSearchDomain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.dfp.options.gloo.solo.io.DnsResolverOptions.prototype.setNoDefaultSearchDomain = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.repeatedFields_, null);
};
goog.inherits(proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.displayName = 'proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolversList: jspb.Message.toObjectList(msg.getResolversList(),
    github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.Address.toObject, includeInstance),
    dnsResolverOptions: (f = msg.getDnsResolverOptions()) && proto.dfp.options.gloo.solo.io.DnsResolverOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig;
  return proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.Address;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.Address.deserializeBinaryFromReader);
      msg.addResolvers(value);
      break;
    case 2:
      var value = new proto.dfp.options.gloo.solo.io.DnsResolverOptions;
      reader.readMessage(value,proto.dfp.options.gloo.solo.io.DnsResolverOptions.deserializeBinaryFromReader);
      msg.setDnsResolverOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getDnsResolverOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dfp.options.gloo.solo.io.DnsResolverOptions.serializeBinaryToWriter
    );
  }
};


/**
 * repeated solo.io.envoy.config.core.v3.Address resolvers = 1;
 * @return {!Array<!proto.solo.io.envoy.config.core.v3.Address>}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.getResolversList = function() {
  return /** @type{!Array<!proto.solo.io.envoy.config.core.v3.Address>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_address_pb.Address, 1));
};


/** @param {!Array<!proto.solo.io.envoy.config.core.v3.Address>} value */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.setResolversList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.solo.io.envoy.config.core.v3.Address=} opt_value
 * @param {number=} opt_index
 * @return {!proto.solo.io.envoy.config.core.v3.Address}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.addResolvers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.solo.io.envoy.config.core.v3.Address, opt_index);
};


proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.clearResolversList = function() {
  this.setResolversList([]);
};


/**
 * optional DnsResolverOptions dns_resolver_options = 2;
 * @return {?proto.dfp.options.gloo.solo.io.DnsResolverOptions}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.getDnsResolverOptions = function() {
  return /** @type{?proto.dfp.options.gloo.solo.io.DnsResolverOptions} */ (
    jspb.Message.getWrapperField(this, proto.dfp.options.gloo.solo.io.DnsResolverOptions, 2));
};


/** @param {?proto.dfp.options.gloo.solo.io.DnsResolverOptions|undefined} value */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.setDnsResolverOptions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.clearDnsResolverOptions = function() {
  this.setDnsResolverOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dfp.options.gloo.solo.io.CaresDnsResolverConfig.prototype.hasDnsResolverOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.displayName = 'proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig}
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig;
  return proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig}
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dfp.options.gloo.solo.io.AppleDnsResolverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.dfp.options.gloo.solo.io.DnsLookupFamily = {
  V4_PREFERRED: 0,
  V4_ONLY: 1,
  V6_ONLY: 2,
  AUTO: 3,
  ALL: 4
};

goog.object.extend(exports, proto.dfp.options.gloo.solo.io);
