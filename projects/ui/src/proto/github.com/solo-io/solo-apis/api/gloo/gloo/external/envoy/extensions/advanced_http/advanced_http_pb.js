/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var udpa_annotations_status_pb = require('../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/udpa/annotations/status_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_health_check_pb = require('../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/health_check_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var validate_validate_pb = require('../../../../../../../../../../validate/validate_pb.js');
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp', null, global);
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult', null, global);
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.JsonKey', null, global);
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment', null, global);
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions', null, global);
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch', null, global);
goog.exportSymbol('proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.displayName = 'proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpHealthCheck: (f = msg.getHttpHealthCheck()) && github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_health_check_pb.HealthCheck.HttpHealthCheck.toObject(includeInstance, f),
    responseAssertions: (f = msg.getResponseAssertions()) && proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp;
  return proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_health_check_pb.HealthCheck.HttpHealthCheck;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_health_check_pb.HealthCheck.HttpHealthCheck.deserializeBinaryFromReader);
      msg.setHttpHealthCheck(value);
      break;
    case 2:
      var value = new proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions;
      reader.readMessage(value,proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.deserializeBinaryFromReader);
      msg.setResponseAssertions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpHealthCheck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_health_check_pb.HealthCheck.HttpHealthCheck.serializeBinaryToWriter
    );
  }
  f = message.getResponseAssertions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.serializeBinaryToWriter
    );
  }
};


/**
 * optional solo.io.envoy.config.core.v3.HealthCheck.HttpHealthCheck http_health_check = 1;
 * @return {?proto.solo.io.envoy.config.core.v3.HealthCheck.HttpHealthCheck}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.getHttpHealthCheck = function() {
  return /** @type{?proto.solo.io.envoy.config.core.v3.HealthCheck.HttpHealthCheck} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_health_check_pb.HealthCheck.HttpHealthCheck, 1));
};


/** @param {?proto.solo.io.envoy.config.core.v3.HealthCheck.HttpHealthCheck|undefined} value */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.setHttpHealthCheck = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.clearHttpHealthCheck = function() {
  this.setHttpHealthCheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.hasHttpHealthCheck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseAssertions response_assertions = 2;
 * @return {?proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.getResponseAssertions = function() {
  return /** @type{?proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions, 2));
};


/** @param {?proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions|undefined} value */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.setResponseAssertions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.clearResponseAssertions = function() {
  this.setResponseAssertions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.AdvancedHttp.prototype.hasResponseAssertions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.displayName = 'proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseMatchersList: jspb.Message.toObjectList(msg.getResponseMatchersList(),
    proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.toObject, includeInstance),
    noMatchHealth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions;
  return proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher;
      reader.readMessage(value,proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.deserializeBinaryFromReader);
      msg.addResponseMatchers(value);
      break;
    case 2:
      var value = /** @type {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult} */ (reader.readEnum());
      msg.setNoMatchHealth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseMatchersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.serializeBinaryToWriter
    );
  }
  f = message.getNoMatchHealth();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated ResponseMatcher response_matchers = 1;
 * @return {!Array<!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher>}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.getResponseMatchersList = function() {
  return /** @type{!Array<!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher, 1));
};


/** @param {!Array<!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher>} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.setResponseMatchersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.addResponseMatchers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher, opt_index);
};


proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.clearResponseMatchersList = function() {
  this.setResponseMatchersList([]);
};


/**
 * optional HealthCheckResult no_match_health = 2;
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.getNoMatchHealth = function() {
  return /** @type {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseAssertions.prototype.setNoMatchHealth = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.displayName = 'proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseMatch: (f = msg.getResponseMatch()) && proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.toObject(includeInstance, f),
    matchHealth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher;
  return proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch;
      reader.readMessage(value,proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.deserializeBinaryFromReader);
      msg.setResponseMatch(value);
      break;
    case 2:
      var value = /** @type {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult} */ (reader.readEnum());
      msg.setMatchHealth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.serializeBinaryToWriter
    );
  }
  f = message.getMatchHealth();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ResponseMatch response_match = 1;
 * @return {?proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.getResponseMatch = function() {
  return /** @type{?proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch, 1));
};


/** @param {?proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch|undefined} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.setResponseMatch = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.clearResponseMatch = function() {
  this.setResponseMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.hasResponseMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HealthCheckResult match_health = 2;
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.getMatchHealth = function() {
  return /** @type {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatcher.prototype.setMatchHealth = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.oneofGroups_);
};
goog.inherits(proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.displayName = 'proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.SourceCase = {
  SOURCE_NOT_SET: 0,
  HEADER: 3,
  BODY: 4
};

/**
 * @return {proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.SourceCase}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.getSourceCase = function() {
  return /** @type {proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.SourceCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonKey: (f = msg.getJsonKey()) && proto.envoy.config.health_checker.advanced_http.v2.JsonKey.toObject(includeInstance, f),
    ignoreErrorOnParse: jspb.Message.getFieldWithDefault(msg, 2, false),
    header: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: (f = msg.getBody()) && google_protobuf_empty_pb.Empty.toObject(includeInstance, f),
    regex: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch;
  return proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.health_checker.advanced_http.v2.JsonKey;
      reader.readMessage(value,proto.envoy.config.health_checker.advanced_http.v2.JsonKey.deserializeBinaryFromReader);
      msg.setJsonKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnoreErrorOnParse(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeader(value);
      break;
    case 4:
      var value = new google_protobuf_empty_pb.Empty;
      reader.readMessage(value,google_protobuf_empty_pb.Empty.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsonKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.health_checker.advanced_http.v2.JsonKey.serializeBinaryToWriter
    );
  }
  f = message.getIgnoreErrorOnParse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_empty_pb.Empty.serializeBinaryToWriter
    );
  }
  f = message.getRegex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional JsonKey json_key = 1;
 * @return {?proto.envoy.config.health_checker.advanced_http.v2.JsonKey}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.getJsonKey = function() {
  return /** @type{?proto.envoy.config.health_checker.advanced_http.v2.JsonKey} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.health_checker.advanced_http.v2.JsonKey, 1));
};


/** @param {?proto.envoy.config.health_checker.advanced_http.v2.JsonKey|undefined} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.setJsonKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.clearJsonKey = function() {
  this.setJsonKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.hasJsonKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool ignore_error_on_parse = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.getIgnoreErrorOnParse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.setIgnoreErrorOnParse = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string header = 3;
 * @return {string}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.getHeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.setHeader = function(value) {
  jspb.Message.setOneofField(this, 3, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.oneofGroups_[0], value);
};


proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.clearHeader = function() {
  jspb.Message.setOneofField(this, 3, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Empty body = 4;
 * @return {?proto.google.protobuf.Empty}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.getBody = function() {
  return /** @type{?proto.google.protobuf.Empty} */ (
    jspb.Message.getWrapperField(this, google_protobuf_empty_pb.Empty, 4));
};


/** @param {?proto.google.protobuf.Empty|undefined} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.setBody = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.oneofGroups_[0], value);
};


proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.hasBody = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string regex = 5;
 * @return {string}
 */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.envoy.config.health_checker.advanced_http.v2.ResponseMatch.prototype.setRegex = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.health_checker.advanced_http.v2.JsonKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.health_checker.advanced_http.v2.JsonKey.displayName = 'proto.envoy.config.health_checker.advanced_http.v2.JsonKey';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.health_checker.advanced_http.v2.JsonKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.health_checker.advanced_http.v2.JsonKey;
  return proto.envoy.config.health_checker.advanced_http.v2.JsonKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment;
      reader.readMessage(value,proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.health_checker.advanced_http.v2.JsonKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.oneofGroups_);
};
goog.inherits(proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.displayName = 'proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.SegmentCase = {
  SEGMENT_NOT_SET: 0,
  KEY: 1
};

/**
 * @return {proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.SegmentCase}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.getSegmentCase = function() {
  return /** @type {proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.SegmentCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment;
  return proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.setKey = function(value) {
  jspb.Message.setOneofField(this, 1, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.oneofGroups_[0], value);
};


proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.clearKey = function() {
  jspb.Message.setOneofField(this, 1, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PathSegment path = 2;
 * @return {!Array<!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment>}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.prototype.getPathList = function() {
  return /** @type{!Array<!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment, 2));
};


/** @param {!Array<!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment>} value */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.prototype.setPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment}
 */
proto.envoy.config.health_checker.advanced_http.v2.JsonKey.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.envoy.config.health_checker.advanced_http.v2.JsonKey.PathSegment, opt_index);
};


proto.envoy.config.health_checker.advanced_http.v2.JsonKey.prototype.clearPathList = function() {
  this.setPathList([]);
};


/**
 * @enum {number}
 */
proto.envoy.config.health_checker.advanced_http.v2.HealthCheckResult = {
  HEALTHY: 0,
  DEGRADED: 1,
  UNHEALTHY: 2
};

goog.object.extend(exports, proto.envoy.config.health_checker.advanced_http.v2);
