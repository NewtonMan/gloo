/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var udpa_annotations_migrate_pb = require('../../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/udpa/annotations/migrate_pb.js');
var udpa_annotations_status_pb = require('../../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/udpa/annotations/status_pb.js');
var udpa_annotations_versioning_pb = require('../../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/udpa/annotations/versioning_pb.js');
var validate_validate_pb = require('../../../../../../../../../../../validate/validate_pb.js');
var extproto_ext_pb = require('../../../../../../../../../../../extproto/ext_pb.js');
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.ConstantSampler', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.OpenCensusConfig', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.ProbabilitySampler', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.RateLimitingSampler', null, global);
goog.exportSymbol('proto.solo.io.envoy.config.trace.v3.TraceConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.repeatedFields_, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.oneofGroups_);
};
goog.inherits(proto.solo.io.envoy.config.trace.v3.OpenCensusConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.displayName = 'proto.solo.io.envoy.config.trace.v3.OpenCensusConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.repeatedFields_ = [5,6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentAddressCase = {
  OCAGENT_ADDRESS_NOT_SET: 0,
  HTTP_ADDRESS: 3,
  GRPC_ADDRESS: 4
};

/**
 * @return {proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentAddressCase}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getOcagentAddressCase = function() {
  return /** @type {proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentAddressCase} */(jspb.Message.computeOneofCase(this, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    traceConfig: (f = msg.getTraceConfig()) && proto.solo.io.envoy.config.trace.v3.TraceConfig.toObject(includeInstance, f),
    ocagentExporterEnabled: jspb.Message.getFieldWithDefault(msg, 2, false),
    httpAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    grpcAddress: (f = msg.getGrpcAddress()) && proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.toObject(includeInstance, f),
    incomingTraceContextList: jspb.Message.getRepeatedField(msg, 5),
    outgoingTraceContextList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.trace.v3.OpenCensusConfig;
  return proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.solo.io.envoy.config.trace.v3.TraceConfig;
      reader.readMessage(value,proto.solo.io.envoy.config.trace.v3.TraceConfig.deserializeBinaryFromReader);
      msg.setTraceConfig(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOcagentExporterEnabled(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHttpAddress(value);
      break;
    case 4:
      var value = new proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress;
      reader.readMessage(value,proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.deserializeBinaryFromReader);
      msg.setGrpcAddress(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>} */ (reader.readPackedEnum());
      msg.setIncomingTraceContextList(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>} */ (reader.readPackedEnum());
      msg.setOutgoingTraceContextList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraceConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.solo.io.envoy.config.trace.v3.TraceConfig.serializeBinaryToWriter
    );
  }
  f = message.getOcagentExporterEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGrpcAddress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.serializeBinaryToWriter
    );
  }
  f = message.getIncomingTraceContextList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getOutgoingTraceContextList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext = {
  NONE: 0,
  TRACE_CONTEXT: 1,
  GRPC_TRACE_BIN: 2,
  CLOUD_TRACE_CONTEXT: 3,
  B3: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.displayName = 'proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetUri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    statPrefix: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress;
  return proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatPrefix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string target_uri = 1;
 * @return {string}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.prototype.getTargetUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.prototype.setTargetUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string stat_prefix = 2;
 * @return {string}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.prototype.getStatPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress.prototype.setStatPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TraceConfig trace_config = 1;
 * @return {?proto.solo.io.envoy.config.trace.v3.TraceConfig}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getTraceConfig = function() {
  return /** @type{?proto.solo.io.envoy.config.trace.v3.TraceConfig} */ (
    jspb.Message.getWrapperField(this, proto.solo.io.envoy.config.trace.v3.TraceConfig, 1));
};


/** @param {?proto.solo.io.envoy.config.trace.v3.TraceConfig|undefined} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.setTraceConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.clearTraceConfig = function() {
  this.setTraceConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.hasTraceConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool ocagent_exporter_enabled = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getOcagentExporterEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.setOcagentExporterEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string http_address = 3;
 * @return {string}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getHttpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.setHttpAddress = function(value) {
  jspb.Message.setOneofField(this, 3, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.oneofGroups_[0], value);
};


proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.clearHttpAddress = function() {
  jspb.Message.setOneofField(this, 3, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.hasHttpAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OcagentGrpcAddress grpc_address = 4;
 * @return {?proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getGrpcAddress = function() {
  return /** @type{?proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress} */ (
    jspb.Message.getWrapperField(this, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress, 4));
};


/** @param {?proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress|undefined} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.setGrpcAddress = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.oneofGroups_[0], value);
};


proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.clearGrpcAddress = function() {
  this.setGrpcAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.hasGrpcAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated TraceContext incoming_trace_context = 5;
 * @return {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getIncomingTraceContextList = function() {
  return /** @type {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.setIncomingTraceContextList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext} value
 * @param {number=} opt_index
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.addIncomingTraceContext = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.clearIncomingTraceContextList = function() {
  this.setIncomingTraceContextList([]);
};


/**
 * repeated TraceContext outgoing_trace_context = 6;
 * @return {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>}
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.getOutgoingTraceContextList = function() {
  return /** @type {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext>} value */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.setOutgoingTraceContextList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext} value
 * @param {number=} opt_index
 */
proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.addOutgoingTraceContext = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.solo.io.envoy.config.trace.v3.OpenCensusConfig.prototype.clearOutgoingTraceContextList = function() {
  this.setOutgoingTraceContextList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.solo.io.envoy.config.trace.v3.TraceConfig.oneofGroups_);
};
goog.inherits(proto.solo.io.envoy.config.trace.v3.TraceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.trace.v3.TraceConfig.displayName = 'proto.solo.io.envoy.config.trace.v3.TraceConfig';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.SamplerCase = {
  SAMPLER_NOT_SET: 0,
  PROBABILITY_SAMPLER: 1,
  CONSTANT_SAMPLER: 2,
  RATE_LIMITING_SAMPLER: 3
};

/**
 * @return {proto.solo.io.envoy.config.trace.v3.TraceConfig.SamplerCase}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getSamplerCase = function() {
  return /** @type {proto.solo.io.envoy.config.trace.v3.TraceConfig.SamplerCase} */(jspb.Message.computeOneofCase(this, proto.solo.io.envoy.config.trace.v3.TraceConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.trace.v3.TraceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.trace.v3.TraceConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    probabilitySampler: (f = msg.getProbabilitySampler()) && proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.toObject(includeInstance, f),
    constantSampler: (f = msg.getConstantSampler()) && proto.solo.io.envoy.config.trace.v3.ConstantSampler.toObject(includeInstance, f),
    rateLimitingSampler: (f = msg.getRateLimitingSampler()) && proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.toObject(includeInstance, f),
    maxNumberOfAttributes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxNumberOfAnnotations: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxNumberOfMessageEvents: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxNumberOfLinks: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.trace.v3.TraceConfig}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.trace.v3.TraceConfig;
  return proto.solo.io.envoy.config.trace.v3.TraceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.trace.v3.TraceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.trace.v3.TraceConfig}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.solo.io.envoy.config.trace.v3.ProbabilitySampler;
      reader.readMessage(value,proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.deserializeBinaryFromReader);
      msg.setProbabilitySampler(value);
      break;
    case 2:
      var value = new proto.solo.io.envoy.config.trace.v3.ConstantSampler;
      reader.readMessage(value,proto.solo.io.envoy.config.trace.v3.ConstantSampler.deserializeBinaryFromReader);
      msg.setConstantSampler(value);
      break;
    case 3:
      var value = new proto.solo.io.envoy.config.trace.v3.RateLimitingSampler;
      reader.readMessage(value,proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.deserializeBinaryFromReader);
      msg.setRateLimitingSampler(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxNumberOfAttributes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxNumberOfAnnotations(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxNumberOfMessageEvents(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxNumberOfLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.trace.v3.TraceConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.trace.v3.TraceConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProbabilitySampler();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.serializeBinaryToWriter
    );
  }
  f = message.getConstantSampler();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.solo.io.envoy.config.trace.v3.ConstantSampler.serializeBinaryToWriter
    );
  }
  f = message.getRateLimitingSampler();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.serializeBinaryToWriter
    );
  }
  f = message.getMaxNumberOfAttributes();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMaxNumberOfAnnotations();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMaxNumberOfMessageEvents();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMaxNumberOfLinks();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional ProbabilitySampler probability_sampler = 1;
 * @return {?proto.solo.io.envoy.config.trace.v3.ProbabilitySampler}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getProbabilitySampler = function() {
  return /** @type{?proto.solo.io.envoy.config.trace.v3.ProbabilitySampler} */ (
    jspb.Message.getWrapperField(this, proto.solo.io.envoy.config.trace.v3.ProbabilitySampler, 1));
};


/** @param {?proto.solo.io.envoy.config.trace.v3.ProbabilitySampler|undefined} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setProbabilitySampler = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.solo.io.envoy.config.trace.v3.TraceConfig.oneofGroups_[0], value);
};


proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.clearProbabilitySampler = function() {
  this.setProbabilitySampler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.hasProbabilitySampler = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConstantSampler constant_sampler = 2;
 * @return {?proto.solo.io.envoy.config.trace.v3.ConstantSampler}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getConstantSampler = function() {
  return /** @type{?proto.solo.io.envoy.config.trace.v3.ConstantSampler} */ (
    jspb.Message.getWrapperField(this, proto.solo.io.envoy.config.trace.v3.ConstantSampler, 2));
};


/** @param {?proto.solo.io.envoy.config.trace.v3.ConstantSampler|undefined} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setConstantSampler = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.solo.io.envoy.config.trace.v3.TraceConfig.oneofGroups_[0], value);
};


proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.clearConstantSampler = function() {
  this.setConstantSampler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.hasConstantSampler = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RateLimitingSampler rate_limiting_sampler = 3;
 * @return {?proto.solo.io.envoy.config.trace.v3.RateLimitingSampler}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getRateLimitingSampler = function() {
  return /** @type{?proto.solo.io.envoy.config.trace.v3.RateLimitingSampler} */ (
    jspb.Message.getWrapperField(this, proto.solo.io.envoy.config.trace.v3.RateLimitingSampler, 3));
};


/** @param {?proto.solo.io.envoy.config.trace.v3.RateLimitingSampler|undefined} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setRateLimitingSampler = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.solo.io.envoy.config.trace.v3.TraceConfig.oneofGroups_[0], value);
};


proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.clearRateLimitingSampler = function() {
  this.setRateLimitingSampler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.hasRateLimitingSampler = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 max_number_of_attributes = 4;
 * @return {number}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getMaxNumberOfAttributes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setMaxNumberOfAttributes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 max_number_of_annotations = 5;
 * @return {number}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getMaxNumberOfAnnotations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setMaxNumberOfAnnotations = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 max_number_of_message_events = 6;
 * @return {number}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getMaxNumberOfMessageEvents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setMaxNumberOfMessageEvents = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 max_number_of_links = 7;
 * @return {number}
 */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.getMaxNumberOfLinks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.solo.io.envoy.config.trace.v3.TraceConfig.prototype.setMaxNumberOfLinks = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solo.io.envoy.config.trace.v3.ProbabilitySampler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.displayName = 'proto.solo.io.envoy.config.trace.v3.ProbabilitySampler';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.trace.v3.ProbabilitySampler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.toObject = function(includeInstance, msg) {
  var f, obj = {
    samplingprobability: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.trace.v3.ProbabilitySampler}
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.trace.v3.ProbabilitySampler;
  return proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.trace.v3.ProbabilitySampler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.trace.v3.ProbabilitySampler}
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSamplingprobability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.trace.v3.ProbabilitySampler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSamplingprobability();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double samplingProbability = 1;
 * @return {number}
 */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.prototype.getSamplingprobability = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.solo.io.envoy.config.trace.v3.ProbabilitySampler.prototype.setSamplingprobability = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solo.io.envoy.config.trace.v3.ConstantSampler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.trace.v3.ConstantSampler.displayName = 'proto.solo.io.envoy.config.trace.v3.ConstantSampler';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.trace.v3.ConstantSampler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.trace.v3.ConstantSampler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.toObject = function(includeInstance, msg) {
  var f, obj = {
    decision: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.trace.v3.ConstantSampler}
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.trace.v3.ConstantSampler;
  return proto.solo.io.envoy.config.trace.v3.ConstantSampler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.trace.v3.ConstantSampler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.trace.v3.ConstantSampler}
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision} */ (reader.readEnum());
      msg.setDecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.trace.v3.ConstantSampler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.trace.v3.ConstantSampler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecision();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision = {
  ALWAYS_OFF: 0,
  ALWAYS_ON: 1,
  ALWAYS_PARENT: 2
};

/**
 * optional ConstantDecision decision = 1;
 * @return {!proto.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision}
 */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.prototype.getDecision = function() {
  return /** @type {!proto.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision} value */
proto.solo.io.envoy.config.trace.v3.ConstantSampler.prototype.setDecision = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solo.io.envoy.config.trace.v3.RateLimitingSampler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.displayName = 'proto.solo.io.envoy.config.trace.v3.RateLimitingSampler';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.prototype.toObject = function(opt_includeInstance) {
  return proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solo.io.envoy.config.trace.v3.RateLimitingSampler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.toObject = function(includeInstance, msg) {
  var f, obj = {
    qps: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solo.io.envoy.config.trace.v3.RateLimitingSampler}
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solo.io.envoy.config.trace.v3.RateLimitingSampler;
  return proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solo.io.envoy.config.trace.v3.RateLimitingSampler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solo.io.envoy.config.trace.v3.RateLimitingSampler}
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solo.io.envoy.config.trace.v3.RateLimitingSampler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQps();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 qps = 1;
 * @return {number}
 */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.prototype.getQps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.solo.io.envoy.config.trace.v3.RateLimitingSampler.prototype.setQps = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.solo.io.envoy.config.trace.v3);
