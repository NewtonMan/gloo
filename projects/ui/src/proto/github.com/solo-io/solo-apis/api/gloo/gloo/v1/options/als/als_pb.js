/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extproto_ext_pb = require('../../../../../../../../../extproto/ext_pb.js');
var github_com_solo$io_solo$kit_api_v1_ref_pb = require('../../../../../../../../../github.com/solo-io/solo-kit/api/v1/ref_pb.js');
var validate_validate_pb = require('../../../../../../../../../validate/validate_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_base_pb = require('../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/core/v3/base_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_type_v3_percent_pb = require('../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/type/v3/percent_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb = require('../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/route/v3/route_components_pb.js');
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.exportSymbol('proto.als.options.gloo.solo.io.AccessLog', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.AccessLogFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.AccessLoggingService', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.AndFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.ComparisonFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.ComparisonFilter.Op', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.DurationFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.FileSink', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.GrpcService', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.GrpcStatusFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.GrpcStatusFilter.Status', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.HeaderFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.NotHealthCheckFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.OrFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.ResponseFlagFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.RuntimeFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.StatusCodeFilter', null, global);
goog.exportSymbol('proto.als.options.gloo.solo.io.TraceableFilter', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.AccessLoggingService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.options.gloo.solo.io.AccessLoggingService.repeatedFields_, null);
};
goog.inherits(proto.als.options.gloo.solo.io.AccessLoggingService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.AccessLoggingService.displayName = 'proto.als.options.gloo.solo.io.AccessLoggingService';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.options.gloo.solo.io.AccessLoggingService.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.AccessLoggingService.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.AccessLoggingService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.AccessLoggingService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AccessLoggingService.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessLogList: jspb.Message.toObjectList(msg.getAccessLogList(),
    proto.als.options.gloo.solo.io.AccessLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.AccessLoggingService}
 */
proto.als.options.gloo.solo.io.AccessLoggingService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.AccessLoggingService;
  return proto.als.options.gloo.solo.io.AccessLoggingService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.AccessLoggingService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.AccessLoggingService}
 */
proto.als.options.gloo.solo.io.AccessLoggingService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.als.options.gloo.solo.io.AccessLog;
      reader.readMessage(value,proto.als.options.gloo.solo.io.AccessLog.deserializeBinaryFromReader);
      msg.addAccessLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.AccessLoggingService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.AccessLoggingService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.AccessLoggingService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AccessLoggingService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessLogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.als.options.gloo.solo.io.AccessLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessLog access_log = 1;
 * @return {!Array<!proto.als.options.gloo.solo.io.AccessLog>}
 */
proto.als.options.gloo.solo.io.AccessLoggingService.prototype.getAccessLogList = function() {
  return /** @type{!Array<!proto.als.options.gloo.solo.io.AccessLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.als.options.gloo.solo.io.AccessLog, 1));
};


/** @param {!Array<!proto.als.options.gloo.solo.io.AccessLog>} value */
proto.als.options.gloo.solo.io.AccessLoggingService.prototype.setAccessLogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.als.options.gloo.solo.io.AccessLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.als.options.gloo.solo.io.AccessLog}
 */
proto.als.options.gloo.solo.io.AccessLoggingService.prototype.addAccessLog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.als.options.gloo.solo.io.AccessLog, opt_index);
};


proto.als.options.gloo.solo.io.AccessLoggingService.prototype.clearAccessLogList = function() {
  this.setAccessLogList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.AccessLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.als.options.gloo.solo.io.AccessLog.oneofGroups_);
};
goog.inherits(proto.als.options.gloo.solo.io.AccessLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.AccessLog.displayName = 'proto.als.options.gloo.solo.io.AccessLog';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.als.options.gloo.solo.io.AccessLog.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.als.options.gloo.solo.io.AccessLog.OutputdestinationCase = {
  OUTPUTDESTINATION_NOT_SET: 0,
  FILE_SINK: 2,
  GRPC_SERVICE: 3
};

/**
 * @return {proto.als.options.gloo.solo.io.AccessLog.OutputdestinationCase}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.getOutputdestinationCase = function() {
  return /** @type {proto.als.options.gloo.solo.io.AccessLog.OutputdestinationCase} */(jspb.Message.computeOneofCase(this, proto.als.options.gloo.solo.io.AccessLog.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.AccessLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.AccessLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AccessLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileSink: (f = msg.getFileSink()) && proto.als.options.gloo.solo.io.FileSink.toObject(includeInstance, f),
    grpcService: (f = msg.getGrpcService()) && proto.als.options.gloo.solo.io.GrpcService.toObject(includeInstance, f),
    filter: (f = msg.getFilter()) && proto.als.options.gloo.solo.io.AccessLogFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.AccessLog}
 */
proto.als.options.gloo.solo.io.AccessLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.AccessLog;
  return proto.als.options.gloo.solo.io.AccessLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.AccessLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.AccessLog}
 */
proto.als.options.gloo.solo.io.AccessLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.als.options.gloo.solo.io.FileSink;
      reader.readMessage(value,proto.als.options.gloo.solo.io.FileSink.deserializeBinaryFromReader);
      msg.setFileSink(value);
      break;
    case 3:
      var value = new proto.als.options.gloo.solo.io.GrpcService;
      reader.readMessage(value,proto.als.options.gloo.solo.io.GrpcService.deserializeBinaryFromReader);
      msg.setGrpcService(value);
      break;
    case 4:
      var value = new proto.als.options.gloo.solo.io.AccessLogFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.AccessLogFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.AccessLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.AccessLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AccessLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileSink();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.als.options.gloo.solo.io.FileSink.serializeBinaryToWriter
    );
  }
  f = message.getGrpcService();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.als.options.gloo.solo.io.GrpcService.serializeBinaryToWriter
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.als.options.gloo.solo.io.AccessLogFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional FileSink file_sink = 2;
 * @return {?proto.als.options.gloo.solo.io.FileSink}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.getFileSink = function() {
  return /** @type{?proto.als.options.gloo.solo.io.FileSink} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.FileSink, 2));
};


/** @param {?proto.als.options.gloo.solo.io.FileSink|undefined} value */
proto.als.options.gloo.solo.io.AccessLog.prototype.setFileSink = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.als.options.gloo.solo.io.AccessLog.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLog.prototype.clearFileSink = function() {
  this.setFileSink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.hasFileSink = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GrpcService grpc_service = 3;
 * @return {?proto.als.options.gloo.solo.io.GrpcService}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.getGrpcService = function() {
  return /** @type{?proto.als.options.gloo.solo.io.GrpcService} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.GrpcService, 3));
};


/** @param {?proto.als.options.gloo.solo.io.GrpcService|undefined} value */
proto.als.options.gloo.solo.io.AccessLog.prototype.setGrpcService = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.als.options.gloo.solo.io.AccessLog.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLog.prototype.clearGrpcService = function() {
  this.setGrpcService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.hasGrpcService = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccessLogFilter filter = 4;
 * @return {?proto.als.options.gloo.solo.io.AccessLogFilter}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.getFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.AccessLogFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.AccessLogFilter, 4));
};


/** @param {?proto.als.options.gloo.solo.io.AccessLogFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLog.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.als.options.gloo.solo.io.AccessLog.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLog.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.FileSink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.als.options.gloo.solo.io.FileSink.oneofGroups_);
};
goog.inherits(proto.als.options.gloo.solo.io.FileSink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.FileSink.displayName = 'proto.als.options.gloo.solo.io.FileSink';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.als.options.gloo.solo.io.FileSink.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.als.options.gloo.solo.io.FileSink.OutputFormatCase = {
  OUTPUT_FORMAT_NOT_SET: 0,
  STRING_FORMAT: 2,
  JSON_FORMAT: 3
};

/**
 * @return {proto.als.options.gloo.solo.io.FileSink.OutputFormatCase}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.getOutputFormatCase = function() {
  return /** @type {proto.als.options.gloo.solo.io.FileSink.OutputFormatCase} */(jspb.Message.computeOneofCase(this, proto.als.options.gloo.solo.io.FileSink.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.FileSink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.FileSink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.FileSink.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringFormat: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonFormat: (f = msg.getJsonFormat()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.FileSink}
 */
proto.als.options.gloo.solo.io.FileSink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.FileSink;
  return proto.als.options.gloo.solo.io.FileSink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.FileSink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.FileSink}
 */
proto.als.options.gloo.solo.io.FileSink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringFormat(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setJsonFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.FileSink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.FileSink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.FileSink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsonFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.als.options.gloo.solo.io.FileSink.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string_format = 2;
 * @return {string}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.getStringFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.als.options.gloo.solo.io.FileSink.prototype.setStringFormat = function(value) {
  jspb.Message.setOneofField(this, 2, proto.als.options.gloo.solo.io.FileSink.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.FileSink.prototype.clearStringFormat = function() {
  jspb.Message.setOneofField(this, 2, proto.als.options.gloo.solo.io.FileSink.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.hasStringFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Struct json_format = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.getJsonFormat = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.als.options.gloo.solo.io.FileSink.prototype.setJsonFormat = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.als.options.gloo.solo.io.FileSink.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.FileSink.prototype.clearJsonFormat = function() {
  this.setJsonFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.FileSink.prototype.hasJsonFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.GrpcService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.options.gloo.solo.io.GrpcService.repeatedFields_, proto.als.options.gloo.solo.io.GrpcService.oneofGroups_);
};
goog.inherits(proto.als.options.gloo.solo.io.GrpcService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.GrpcService.displayName = 'proto.als.options.gloo.solo.io.GrpcService';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.options.gloo.solo.io.GrpcService.repeatedFields_ = [4,5,6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.als.options.gloo.solo.io.GrpcService.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.als.options.gloo.solo.io.GrpcService.ServiceRefCase = {
  SERVICE_REF_NOT_SET: 0,
  STATIC_CLUSTER_NAME: 2
};

/**
 * @return {proto.als.options.gloo.solo.io.GrpcService.ServiceRefCase}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.getServiceRefCase = function() {
  return /** @type {proto.als.options.gloo.solo.io.GrpcService.ServiceRefCase} */(jspb.Message.computeOneofCase(this, proto.als.options.gloo.solo.io.GrpcService.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.GrpcService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.GrpcService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.GrpcService.toObject = function(includeInstance, msg) {
  var f, obj = {
    logName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    staticClusterName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    additionalRequestHeadersToLogList: jspb.Message.getRepeatedField(msg, 4),
    additionalResponseHeadersToLogList: jspb.Message.getRepeatedField(msg, 5),
    additionalResponseTrailersToLogList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.GrpcService}
 */
proto.als.options.gloo.solo.io.GrpcService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.GrpcService;
  return proto.als.options.gloo.solo.io.GrpcService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.GrpcService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.GrpcService}
 */
proto.als.options.gloo.solo.io.GrpcService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStaticClusterName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAdditionalRequestHeadersToLog(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAdditionalResponseHeadersToLog(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAdditionalResponseTrailersToLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.GrpcService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.GrpcService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.GrpcService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdditionalRequestHeadersToLogList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getAdditionalResponseHeadersToLogList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAdditionalResponseTrailersToLogList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string log_name = 1;
 * @return {string}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.getLogName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.als.options.gloo.solo.io.GrpcService.prototype.setLogName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string static_cluster_name = 2;
 * @return {string}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.getStaticClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.als.options.gloo.solo.io.GrpcService.prototype.setStaticClusterName = function(value) {
  jspb.Message.setOneofField(this, 2, proto.als.options.gloo.solo.io.GrpcService.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.GrpcService.prototype.clearStaticClusterName = function() {
  jspb.Message.setOneofField(this, 2, proto.als.options.gloo.solo.io.GrpcService.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.hasStaticClusterName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string additional_request_headers_to_log = 4;
 * @return {!Array<string>}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.getAdditionalRequestHeadersToLogList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.als.options.gloo.solo.io.GrpcService.prototype.setAdditionalRequestHeadersToLogList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.addAdditionalRequestHeadersToLog = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.als.options.gloo.solo.io.GrpcService.prototype.clearAdditionalRequestHeadersToLogList = function() {
  this.setAdditionalRequestHeadersToLogList([]);
};


/**
 * repeated string additional_response_headers_to_log = 5;
 * @return {!Array<string>}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.getAdditionalResponseHeadersToLogList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.als.options.gloo.solo.io.GrpcService.prototype.setAdditionalResponseHeadersToLogList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.addAdditionalResponseHeadersToLog = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.als.options.gloo.solo.io.GrpcService.prototype.clearAdditionalResponseHeadersToLogList = function() {
  this.setAdditionalResponseHeadersToLogList([]);
};


/**
 * repeated string additional_response_trailers_to_log = 6;
 * @return {!Array<string>}
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.getAdditionalResponseTrailersToLogList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.als.options.gloo.solo.io.GrpcService.prototype.setAdditionalResponseTrailersToLogList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.als.options.gloo.solo.io.GrpcService.prototype.addAdditionalResponseTrailersToLog = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.als.options.gloo.solo.io.GrpcService.prototype.clearAdditionalResponseTrailersToLogList = function() {
  this.setAdditionalResponseTrailersToLogList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.AccessLogFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_);
};
goog.inherits(proto.als.options.gloo.solo.io.AccessLogFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.AccessLogFilter.displayName = 'proto.als.options.gloo.solo.io.AccessLogFilter';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.FilterSpecifierCase = {
  FILTER_SPECIFIER_NOT_SET: 0,
  STATUS_CODE_FILTER: 1,
  DURATION_FILTER: 2,
  NOT_HEALTH_CHECK_FILTER: 3,
  TRACEABLE_FILTER: 4,
  RUNTIME_FILTER: 5,
  AND_FILTER: 6,
  OR_FILTER: 7,
  HEADER_FILTER: 8,
  RESPONSE_FLAG_FILTER: 9,
  GRPC_STATUS_FILTER: 10
};

/**
 * @return {proto.als.options.gloo.solo.io.AccessLogFilter.FilterSpecifierCase}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getFilterSpecifierCase = function() {
  return /** @type {proto.als.options.gloo.solo.io.AccessLogFilter.FilterSpecifierCase} */(jspb.Message.computeOneofCase(this, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.AccessLogFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.AccessLogFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AccessLogFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCodeFilter: (f = msg.getStatusCodeFilter()) && proto.als.options.gloo.solo.io.StatusCodeFilter.toObject(includeInstance, f),
    durationFilter: (f = msg.getDurationFilter()) && proto.als.options.gloo.solo.io.DurationFilter.toObject(includeInstance, f),
    notHealthCheckFilter: (f = msg.getNotHealthCheckFilter()) && proto.als.options.gloo.solo.io.NotHealthCheckFilter.toObject(includeInstance, f),
    traceableFilter: (f = msg.getTraceableFilter()) && proto.als.options.gloo.solo.io.TraceableFilter.toObject(includeInstance, f),
    runtimeFilter: (f = msg.getRuntimeFilter()) && proto.als.options.gloo.solo.io.RuntimeFilter.toObject(includeInstance, f),
    andFilter: (f = msg.getAndFilter()) && proto.als.options.gloo.solo.io.AndFilter.toObject(includeInstance, f),
    orFilter: (f = msg.getOrFilter()) && proto.als.options.gloo.solo.io.OrFilter.toObject(includeInstance, f),
    headerFilter: (f = msg.getHeaderFilter()) && proto.als.options.gloo.solo.io.HeaderFilter.toObject(includeInstance, f),
    responseFlagFilter: (f = msg.getResponseFlagFilter()) && proto.als.options.gloo.solo.io.ResponseFlagFilter.toObject(includeInstance, f),
    grpcStatusFilter: (f = msg.getGrpcStatusFilter()) && proto.als.options.gloo.solo.io.GrpcStatusFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.AccessLogFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.AccessLogFilter;
  return proto.als.options.gloo.solo.io.AccessLogFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.AccessLogFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.AccessLogFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.als.options.gloo.solo.io.StatusCodeFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.StatusCodeFilter.deserializeBinaryFromReader);
      msg.setStatusCodeFilter(value);
      break;
    case 2:
      var value = new proto.als.options.gloo.solo.io.DurationFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.DurationFilter.deserializeBinaryFromReader);
      msg.setDurationFilter(value);
      break;
    case 3:
      var value = new proto.als.options.gloo.solo.io.NotHealthCheckFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.NotHealthCheckFilter.deserializeBinaryFromReader);
      msg.setNotHealthCheckFilter(value);
      break;
    case 4:
      var value = new proto.als.options.gloo.solo.io.TraceableFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.TraceableFilter.deserializeBinaryFromReader);
      msg.setTraceableFilter(value);
      break;
    case 5:
      var value = new proto.als.options.gloo.solo.io.RuntimeFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.RuntimeFilter.deserializeBinaryFromReader);
      msg.setRuntimeFilter(value);
      break;
    case 6:
      var value = new proto.als.options.gloo.solo.io.AndFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.AndFilter.deserializeBinaryFromReader);
      msg.setAndFilter(value);
      break;
    case 7:
      var value = new proto.als.options.gloo.solo.io.OrFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.OrFilter.deserializeBinaryFromReader);
      msg.setOrFilter(value);
      break;
    case 8:
      var value = new proto.als.options.gloo.solo.io.HeaderFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.HeaderFilter.deserializeBinaryFromReader);
      msg.setHeaderFilter(value);
      break;
    case 9:
      var value = new proto.als.options.gloo.solo.io.ResponseFlagFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.ResponseFlagFilter.deserializeBinaryFromReader);
      msg.setResponseFlagFilter(value);
      break;
    case 10:
      var value = new proto.als.options.gloo.solo.io.GrpcStatusFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.GrpcStatusFilter.deserializeBinaryFromReader);
      msg.setGrpcStatusFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.AccessLogFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.AccessLogFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AccessLogFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCodeFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.als.options.gloo.solo.io.StatusCodeFilter.serializeBinaryToWriter
    );
  }
  f = message.getDurationFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.als.options.gloo.solo.io.DurationFilter.serializeBinaryToWriter
    );
  }
  f = message.getNotHealthCheckFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.als.options.gloo.solo.io.NotHealthCheckFilter.serializeBinaryToWriter
    );
  }
  f = message.getTraceableFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.als.options.gloo.solo.io.TraceableFilter.serializeBinaryToWriter
    );
  }
  f = message.getRuntimeFilter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.als.options.gloo.solo.io.RuntimeFilter.serializeBinaryToWriter
    );
  }
  f = message.getAndFilter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.als.options.gloo.solo.io.AndFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrFilter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.als.options.gloo.solo.io.OrFilter.serializeBinaryToWriter
    );
  }
  f = message.getHeaderFilter();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.als.options.gloo.solo.io.HeaderFilter.serializeBinaryToWriter
    );
  }
  f = message.getResponseFlagFilter();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.als.options.gloo.solo.io.ResponseFlagFilter.serializeBinaryToWriter
    );
  }
  f = message.getGrpcStatusFilter();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.als.options.gloo.solo.io.GrpcStatusFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatusCodeFilter status_code_filter = 1;
 * @return {?proto.als.options.gloo.solo.io.StatusCodeFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getStatusCodeFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.StatusCodeFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.StatusCodeFilter, 1));
};


/** @param {?proto.als.options.gloo.solo.io.StatusCodeFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setStatusCodeFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearStatusCodeFilter = function() {
  this.setStatusCodeFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasStatusCodeFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DurationFilter duration_filter = 2;
 * @return {?proto.als.options.gloo.solo.io.DurationFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getDurationFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.DurationFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.DurationFilter, 2));
};


/** @param {?proto.als.options.gloo.solo.io.DurationFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setDurationFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearDurationFilter = function() {
  this.setDurationFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasDurationFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NotHealthCheckFilter not_health_check_filter = 3;
 * @return {?proto.als.options.gloo.solo.io.NotHealthCheckFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getNotHealthCheckFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.NotHealthCheckFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.NotHealthCheckFilter, 3));
};


/** @param {?proto.als.options.gloo.solo.io.NotHealthCheckFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setNotHealthCheckFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearNotHealthCheckFilter = function() {
  this.setNotHealthCheckFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasNotHealthCheckFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TraceableFilter traceable_filter = 4;
 * @return {?proto.als.options.gloo.solo.io.TraceableFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getTraceableFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.TraceableFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.TraceableFilter, 4));
};


/** @param {?proto.als.options.gloo.solo.io.TraceableFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setTraceableFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearTraceableFilter = function() {
  this.setTraceableFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasTraceableFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RuntimeFilter runtime_filter = 5;
 * @return {?proto.als.options.gloo.solo.io.RuntimeFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getRuntimeFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.RuntimeFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.RuntimeFilter, 5));
};


/** @param {?proto.als.options.gloo.solo.io.RuntimeFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setRuntimeFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearRuntimeFilter = function() {
  this.setRuntimeFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasRuntimeFilter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AndFilter and_filter = 6;
 * @return {?proto.als.options.gloo.solo.io.AndFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getAndFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.AndFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.AndFilter, 6));
};


/** @param {?proto.als.options.gloo.solo.io.AndFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setAndFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearAndFilter = function() {
  this.setAndFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasAndFilter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OrFilter or_filter = 7;
 * @return {?proto.als.options.gloo.solo.io.OrFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getOrFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.OrFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.OrFilter, 7));
};


/** @param {?proto.als.options.gloo.solo.io.OrFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setOrFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearOrFilter = function() {
  this.setOrFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasOrFilter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional HeaderFilter header_filter = 8;
 * @return {?proto.als.options.gloo.solo.io.HeaderFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getHeaderFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.HeaderFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.HeaderFilter, 8));
};


/** @param {?proto.als.options.gloo.solo.io.HeaderFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setHeaderFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearHeaderFilter = function() {
  this.setHeaderFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasHeaderFilter = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ResponseFlagFilter response_flag_filter = 9;
 * @return {?proto.als.options.gloo.solo.io.ResponseFlagFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getResponseFlagFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.ResponseFlagFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.ResponseFlagFilter, 9));
};


/** @param {?proto.als.options.gloo.solo.io.ResponseFlagFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setResponseFlagFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearResponseFlagFilter = function() {
  this.setResponseFlagFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasResponseFlagFilter = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional GrpcStatusFilter grpc_status_filter = 10;
 * @return {?proto.als.options.gloo.solo.io.GrpcStatusFilter}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.getGrpcStatusFilter = function() {
  return /** @type{?proto.als.options.gloo.solo.io.GrpcStatusFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.GrpcStatusFilter, 10));
};


/** @param {?proto.als.options.gloo.solo.io.GrpcStatusFilter|undefined} value */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.setGrpcStatusFilter = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.als.options.gloo.solo.io.AccessLogFilter.oneofGroups_[0], value);
};


proto.als.options.gloo.solo.io.AccessLogFilter.prototype.clearGrpcStatusFilter = function() {
  this.setGrpcStatusFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.AccessLogFilter.prototype.hasGrpcStatusFilter = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.ComparisonFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.ComparisonFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.ComparisonFilter.displayName = 'proto.als.options.gloo.solo.io.ComparisonFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.ComparisonFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.ComparisonFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.ComparisonFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: (f = msg.getValue()) && github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_base_pb.RuntimeUInt32.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.ComparisonFilter}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.ComparisonFilter;
  return proto.als.options.gloo.solo.io.ComparisonFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.ComparisonFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.ComparisonFilter}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.als.options.gloo.solo.io.ComparisonFilter.Op} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_base_pb.RuntimeUInt32;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_base_pb.RuntimeUInt32.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.ComparisonFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.ComparisonFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.ComparisonFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_base_pb.RuntimeUInt32.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.Op = {
  EQ: 0,
  GE: 1,
  LE: 2
};

/**
 * optional Op op = 1;
 * @return {!proto.als.options.gloo.solo.io.ComparisonFilter.Op}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.getOp = function() {
  return /** @type {!proto.als.options.gloo.solo.io.ComparisonFilter.Op} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.als.options.gloo.solo.io.ComparisonFilter.Op} value */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.setOp = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional solo.io.envoy.config.core.v3.RuntimeUInt32 value = 2;
 * @return {?proto.solo.io.envoy.config.core.v3.RuntimeUInt32}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.getValue = function() {
  return /** @type{?proto.solo.io.envoy.config.core.v3.RuntimeUInt32} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_core_v3_base_pb.RuntimeUInt32, 2));
};


/** @param {?proto.solo.io.envoy.config.core.v3.RuntimeUInt32|undefined} value */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.als.options.gloo.solo.io.ComparisonFilter.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.ComparisonFilter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.StatusCodeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.StatusCodeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.StatusCodeFilter.displayName = 'proto.als.options.gloo.solo.io.StatusCodeFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.StatusCodeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.StatusCodeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    comparison: (f = msg.getComparison()) && proto.als.options.gloo.solo.io.ComparisonFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.StatusCodeFilter}
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.StatusCodeFilter;
  return proto.als.options.gloo.solo.io.StatusCodeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.StatusCodeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.StatusCodeFilter}
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.als.options.gloo.solo.io.ComparisonFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.ComparisonFilter.deserializeBinaryFromReader);
      msg.setComparison(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.StatusCodeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.StatusCodeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComparison();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.als.options.gloo.solo.io.ComparisonFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional ComparisonFilter comparison = 1;
 * @return {?proto.als.options.gloo.solo.io.ComparisonFilter}
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.prototype.getComparison = function() {
  return /** @type{?proto.als.options.gloo.solo.io.ComparisonFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.ComparisonFilter, 1));
};


/** @param {?proto.als.options.gloo.solo.io.ComparisonFilter|undefined} value */
proto.als.options.gloo.solo.io.StatusCodeFilter.prototype.setComparison = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.als.options.gloo.solo.io.StatusCodeFilter.prototype.clearComparison = function() {
  this.setComparison(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.StatusCodeFilter.prototype.hasComparison = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.DurationFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.DurationFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.DurationFilter.displayName = 'proto.als.options.gloo.solo.io.DurationFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.DurationFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.DurationFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.DurationFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.DurationFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    comparison: (f = msg.getComparison()) && proto.als.options.gloo.solo.io.ComparisonFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.DurationFilter}
 */
proto.als.options.gloo.solo.io.DurationFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.DurationFilter;
  return proto.als.options.gloo.solo.io.DurationFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.DurationFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.DurationFilter}
 */
proto.als.options.gloo.solo.io.DurationFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.als.options.gloo.solo.io.ComparisonFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.ComparisonFilter.deserializeBinaryFromReader);
      msg.setComparison(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.DurationFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.DurationFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.DurationFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.DurationFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComparison();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.als.options.gloo.solo.io.ComparisonFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional ComparisonFilter comparison = 1;
 * @return {?proto.als.options.gloo.solo.io.ComparisonFilter}
 */
proto.als.options.gloo.solo.io.DurationFilter.prototype.getComparison = function() {
  return /** @type{?proto.als.options.gloo.solo.io.ComparisonFilter} */ (
    jspb.Message.getWrapperField(this, proto.als.options.gloo.solo.io.ComparisonFilter, 1));
};


/** @param {?proto.als.options.gloo.solo.io.ComparisonFilter|undefined} value */
proto.als.options.gloo.solo.io.DurationFilter.prototype.setComparison = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.als.options.gloo.solo.io.DurationFilter.prototype.clearComparison = function() {
  this.setComparison(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.DurationFilter.prototype.hasComparison = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.NotHealthCheckFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.NotHealthCheckFilter.displayName = 'proto.als.options.gloo.solo.io.NotHealthCheckFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.NotHealthCheckFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.NotHealthCheckFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.NotHealthCheckFilter}
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.NotHealthCheckFilter;
  return proto.als.options.gloo.solo.io.NotHealthCheckFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.NotHealthCheckFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.NotHealthCheckFilter}
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.NotHealthCheckFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.NotHealthCheckFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.NotHealthCheckFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.TraceableFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.TraceableFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.TraceableFilter.displayName = 'proto.als.options.gloo.solo.io.TraceableFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.TraceableFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.TraceableFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.TraceableFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.TraceableFilter.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.TraceableFilter}
 */
proto.als.options.gloo.solo.io.TraceableFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.TraceableFilter;
  return proto.als.options.gloo.solo.io.TraceableFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.TraceableFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.TraceableFilter}
 */
proto.als.options.gloo.solo.io.TraceableFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.TraceableFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.TraceableFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.TraceableFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.TraceableFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.RuntimeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.RuntimeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.RuntimeFilter.displayName = 'proto.als.options.gloo.solo.io.RuntimeFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.RuntimeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.RuntimeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.RuntimeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    runtimeKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    percentSampled: (f = msg.getPercentSampled()) && github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_type_v3_percent_pb.FractionalPercent.toObject(includeInstance, f),
    useIndependentRandomness: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.RuntimeFilter}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.RuntimeFilter;
  return proto.als.options.gloo.solo.io.RuntimeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.RuntimeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.RuntimeFilter}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuntimeKey(value);
      break;
    case 2:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_type_v3_percent_pb.FractionalPercent;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_type_v3_percent_pb.FractionalPercent.deserializeBinaryFromReader);
      msg.setPercentSampled(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseIndependentRandomness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.RuntimeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.RuntimeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.RuntimeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuntimeKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPercentSampled();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_type_v3_percent_pb.FractionalPercent.serializeBinaryToWriter
    );
  }
  f = message.getUseIndependentRandomness();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string runtime_key = 1;
 * @return {string}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.getRuntimeKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.setRuntimeKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional solo.io.envoy.type.v3.FractionalPercent percent_sampled = 2;
 * @return {?proto.solo.io.envoy.type.v3.FractionalPercent}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.getPercentSampled = function() {
  return /** @type{?proto.solo.io.envoy.type.v3.FractionalPercent} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_type_v3_percent_pb.FractionalPercent, 2));
};


/** @param {?proto.solo.io.envoy.type.v3.FractionalPercent|undefined} value */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.setPercentSampled = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.als.options.gloo.solo.io.RuntimeFilter.prototype.clearPercentSampled = function() {
  this.setPercentSampled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.hasPercentSampled = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool use_independent_randomness = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.getUseIndependentRandomness = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.als.options.gloo.solo.io.RuntimeFilter.prototype.setUseIndependentRandomness = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.AndFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.options.gloo.solo.io.AndFilter.repeatedFields_, null);
};
goog.inherits(proto.als.options.gloo.solo.io.AndFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.AndFilter.displayName = 'proto.als.options.gloo.solo.io.AndFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.options.gloo.solo.io.AndFilter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.AndFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.AndFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.AndFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AndFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.als.options.gloo.solo.io.AccessLogFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.AndFilter}
 */
proto.als.options.gloo.solo.io.AndFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.AndFilter;
  return proto.als.options.gloo.solo.io.AndFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.AndFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.AndFilter}
 */
proto.als.options.gloo.solo.io.AndFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.als.options.gloo.solo.io.AccessLogFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.AccessLogFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.AndFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.AndFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.AndFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.AndFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.als.options.gloo.solo.io.AccessLogFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessLogFilter filters = 1;
 * @return {!Array<!proto.als.options.gloo.solo.io.AccessLogFilter>}
 */
proto.als.options.gloo.solo.io.AndFilter.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.als.options.gloo.solo.io.AccessLogFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.als.options.gloo.solo.io.AccessLogFilter, 1));
};


/** @param {!Array<!proto.als.options.gloo.solo.io.AccessLogFilter>} value */
proto.als.options.gloo.solo.io.AndFilter.prototype.setFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.als.options.gloo.solo.io.AccessLogFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.als.options.gloo.solo.io.AccessLogFilter}
 */
proto.als.options.gloo.solo.io.AndFilter.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.als.options.gloo.solo.io.AccessLogFilter, opt_index);
};


proto.als.options.gloo.solo.io.AndFilter.prototype.clearFiltersList = function() {
  this.setFiltersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.OrFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.options.gloo.solo.io.OrFilter.repeatedFields_, null);
};
goog.inherits(proto.als.options.gloo.solo.io.OrFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.OrFilter.displayName = 'proto.als.options.gloo.solo.io.OrFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.options.gloo.solo.io.OrFilter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.OrFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.OrFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.OrFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.OrFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.als.options.gloo.solo.io.AccessLogFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.OrFilter}
 */
proto.als.options.gloo.solo.io.OrFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.OrFilter;
  return proto.als.options.gloo.solo.io.OrFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.OrFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.OrFilter}
 */
proto.als.options.gloo.solo.io.OrFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.als.options.gloo.solo.io.AccessLogFilter;
      reader.readMessage(value,proto.als.options.gloo.solo.io.AccessLogFilter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.OrFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.OrFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.OrFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.OrFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.als.options.gloo.solo.io.AccessLogFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccessLogFilter filters = 2;
 * @return {!Array<!proto.als.options.gloo.solo.io.AccessLogFilter>}
 */
proto.als.options.gloo.solo.io.OrFilter.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.als.options.gloo.solo.io.AccessLogFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.als.options.gloo.solo.io.AccessLogFilter, 2));
};


/** @param {!Array<!proto.als.options.gloo.solo.io.AccessLogFilter>} value */
proto.als.options.gloo.solo.io.OrFilter.prototype.setFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.als.options.gloo.solo.io.AccessLogFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.als.options.gloo.solo.io.AccessLogFilter}
 */
proto.als.options.gloo.solo.io.OrFilter.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.als.options.gloo.solo.io.AccessLogFilter, opt_index);
};


proto.als.options.gloo.solo.io.OrFilter.prototype.clearFiltersList = function() {
  this.setFiltersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.HeaderFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.als.options.gloo.solo.io.HeaderFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.HeaderFilter.displayName = 'proto.als.options.gloo.solo.io.HeaderFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.HeaderFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.HeaderFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.HeaderFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.HeaderFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.HeaderMatcher.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.HeaderFilter}
 */
proto.als.options.gloo.solo.io.HeaderFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.HeaderFilter;
  return proto.als.options.gloo.solo.io.HeaderFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.HeaderFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.HeaderFilter}
 */
proto.als.options.gloo.solo.io.HeaderFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.HeaderMatcher;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.HeaderMatcher.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.HeaderFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.HeaderFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.HeaderFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.HeaderFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.HeaderMatcher.serializeBinaryToWriter
    );
  }
};


/**
 * optional solo.io.envoy.config.route.v3.HeaderMatcher header = 1;
 * @return {?proto.solo.io.envoy.config.route.v3.HeaderMatcher}
 */
proto.als.options.gloo.solo.io.HeaderFilter.prototype.getHeader = function() {
  return /** @type{?proto.solo.io.envoy.config.route.v3.HeaderMatcher} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.HeaderMatcher, 1));
};


/** @param {?proto.solo.io.envoy.config.route.v3.HeaderMatcher|undefined} value */
proto.als.options.gloo.solo.io.HeaderFilter.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.als.options.gloo.solo.io.HeaderFilter.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.als.options.gloo.solo.io.HeaderFilter.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.options.gloo.solo.io.ResponseFlagFilter.repeatedFields_, null);
};
goog.inherits(proto.als.options.gloo.solo.io.ResponseFlagFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.ResponseFlagFilter.displayName = 'proto.als.options.gloo.solo.io.ResponseFlagFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.ResponseFlagFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.ResponseFlagFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    flagsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.ResponseFlagFilter}
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.ResponseFlagFilter;
  return proto.als.options.gloo.solo.io.ResponseFlagFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.ResponseFlagFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.ResponseFlagFilter}
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.ResponseFlagFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.ResponseFlagFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string flags = 1;
 * @return {!Array<string>}
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.prototype.getFlagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.als.options.gloo.solo.io.ResponseFlagFilter.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.als.options.gloo.solo.io.ResponseFlagFilter.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.als.options.gloo.solo.io.ResponseFlagFilter.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.als.options.gloo.solo.io.GrpcStatusFilter.repeatedFields_, null);
};
goog.inherits(proto.als.options.gloo.solo.io.GrpcStatusFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.als.options.gloo.solo.io.GrpcStatusFilter.displayName = 'proto.als.options.gloo.solo.io.GrpcStatusFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.als.options.gloo.solo.io.GrpcStatusFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.als.options.gloo.solo.io.GrpcStatusFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesList: jspb.Message.getRepeatedField(msg, 1),
    exclude: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.als.options.gloo.solo.io.GrpcStatusFilter}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.als.options.gloo.solo.io.GrpcStatusFilter;
  return proto.als.options.gloo.solo.io.GrpcStatusFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.als.options.gloo.solo.io.GrpcStatusFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.als.options.gloo.solo.io.GrpcStatusFilter}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.als.options.gloo.solo.io.GrpcStatusFilter.Status>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExclude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.als.options.gloo.solo.io.GrpcStatusFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.als.options.gloo.solo.io.GrpcStatusFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getExclude();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.Status = {
  OK: 0,
  CANCELED: 1,
  UNKNOWN: 2,
  INVALID_ARGUMENT: 3,
  DEADLINE_EXCEEDED: 4,
  NOT_FOUND: 5,
  ALREADY_EXISTS: 6,
  PERMISSION_DENIED: 7,
  RESOURCE_EXHAUSTED: 8,
  FAILED_PRECONDITION: 9,
  ABORTED: 10,
  OUT_OF_RANGE: 11,
  UNIMPLEMENTED: 12,
  INTERNAL: 13,
  UNAVAILABLE: 14,
  DATA_LOSS: 15,
  UNAUTHENTICATED: 16
};

/**
 * repeated Status statuses = 1;
 * @return {!Array<!proto.als.options.gloo.solo.io.GrpcStatusFilter.Status>}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.als.options.gloo.solo.io.GrpcStatusFilter.Status>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<!proto.als.options.gloo.solo.io.GrpcStatusFilter.Status>} value */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.setStatusesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.als.options.gloo.solo.io.GrpcStatusFilter.Status} value
 * @param {number=} opt_index
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.addStatuses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};


/**
 * optional bool exclude = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.getExclude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.als.options.gloo.solo.io.GrpcStatusFilter.prototype.setExclude = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.als.options.gloo.solo.io);
