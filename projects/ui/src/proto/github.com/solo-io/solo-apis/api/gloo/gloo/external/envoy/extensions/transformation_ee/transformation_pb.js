/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validate_validate_pb = require('../../../../../../../../../../validate/validate_pb.js');
var envoy_api_v2_route_route_pb = require('../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/api/v2/route/route_pb.js');
var github_com_solo$io_solo$kit_api_external_envoy_type_percent_pb = require('../../../../../../../../../../github.com/solo-io/solo-kit/api/external/envoy/type/percent_pb.js');
var github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb = require('../../../../../../../../../../github.com/solo-io/solo-apis/api/gloo/gloo/external/envoy/config/route/v3/route_components_pb.js');
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.Action', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.RegexAction', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.Transformation', null, global);
goog.exportSymbol('proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.toObject = function(includeInstance, msg) {
  var f, obj = {
    transformationsList: jspb.Message.toObjectList(msg.getTransformationsList(),
    proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations}
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations;
  return proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations}
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.deserializeBinaryFromReader);
      msg.addTransformations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransformationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransformationRule transformations = 1;
 * @return {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule>}
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.prototype.getTransformationsList = function() {
  return /** @type{!Array<!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule, 1));
};


/** @param {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule>} value */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.prototype.setTransformationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule}
 */
proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.prototype.addTransformations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule, opt_index);
};


proto.envoy.config.filter.http.transformation_ee.v2.FilterTransformations.prototype.clearTransformationsList = function() {
  this.setTransformationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    match: (f = msg.getMatch()) && envoy_api_v2_route_route_pb.RouteMatch.toObject(includeInstance, f),
    matchV3: (f = msg.getMatchV3()) && github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.RouteMatch.toObject(includeInstance, f),
    routeTransformations: (f = msg.getRouteTransformations()) && proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule;
  return proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new envoy_api_v2_route_route_pb.RouteMatch;
      reader.readMessage(value,envoy_api_v2_route_route_pb.RouteMatch.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 3:
      var value = new github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.RouteMatch;
      reader.readMessage(value,github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.RouteMatch.deserializeBinaryFromReader);
      msg.setMatchV3(value);
      break;
    case 2:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.deserializeBinaryFromReader);
      msg.setRouteTransformations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      envoy_api_v2_route_route_pb.RouteMatch.serializeBinaryToWriter
    );
  }
  f = message.getMatchV3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.RouteMatch.serializeBinaryToWriter
    );
  }
  f = message.getRouteTransformations();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.serializeBinaryToWriter
    );
  }
};


/**
 * optional solo.io.envoy.api.v2.route.RouteMatch match = 1;
 * @return {?proto.solo.io.envoy.api.v2.route.RouteMatch}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.getMatch = function() {
  return /** @type{?proto.solo.io.envoy.api.v2.route.RouteMatch} */ (
    jspb.Message.getWrapperField(this, envoy_api_v2_route_route_pb.RouteMatch, 1));
};


/** @param {?proto.solo.io.envoy.api.v2.route.RouteMatch|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.setMatch = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.clearMatch = function() {
  this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional solo.io.envoy.config.route.v3.RouteMatch match_v3 = 3;
 * @return {?proto.solo.io.envoy.config.route.v3.RouteMatch}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.getMatchV3 = function() {
  return /** @type{?proto.solo.io.envoy.config.route.v3.RouteMatch} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$apis_api_gloo_gloo_external_envoy_config_route_v3_route_components_pb.RouteMatch, 3));
};


/** @param {?proto.solo.io.envoy.config.route.v3.RouteMatch|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.setMatchV3 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.clearMatchV3 = function() {
  this.setMatchV3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.hasMatchV3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RouteTransformations route_transformations = 2;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.getRouteTransformations = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations, 2));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.setRouteTransformations = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.clearRouteTransformations = function() {
  this.setRouteTransformations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.TransformationRule.prototype.hasRouteTransformations = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestTransformation: (f = msg.getRequestTransformation()) && proto.envoy.config.filter.http.transformation_ee.v2.Transformation.toObject(includeInstance, f),
    clearRouteCache: jspb.Message.getFieldWithDefault(msg, 3, false),
    responseTransformation: (f = msg.getResponseTransformation()) && proto.envoy.config.filter.http.transformation_ee.v2.Transformation.toObject(includeInstance, f),
    onStreamCompletionTransformation: (f = msg.getOnStreamCompletionTransformation()) && proto.envoy.config.filter.http.transformation_ee.v2.Transformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations;
  return proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Transformation;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Transformation.deserializeBinaryFromReader);
      msg.setRequestTransformation(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClearRouteCache(value);
      break;
    case 2:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Transformation;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Transformation.deserializeBinaryFromReader);
      msg.setResponseTransformation(value);
      break;
    case 4:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Transformation;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Transformation.deserializeBinaryFromReader);
      msg.setOnStreamCompletionTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestTransformation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Transformation.serializeBinaryToWriter
    );
  }
  f = message.getClearRouteCache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getResponseTransformation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Transformation.serializeBinaryToWriter
    );
  }
  f = message.getOnStreamCompletionTransformation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Transformation.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transformation request_transformation = 1;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.Transformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.getRequestTransformation = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.Transformation} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Transformation, 1));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.Transformation|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.setRequestTransformation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.clearRequestTransformation = function() {
  this.setRequestTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.hasRequestTransformation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool clear_route_cache = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.getClearRouteCache = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.setClearRouteCache = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Transformation response_transformation = 2;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.Transformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.getResponseTransformation = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.Transformation} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Transformation, 2));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.Transformation|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.setResponseTransformation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.clearResponseTransformation = function() {
  this.setResponseTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.hasResponseTransformation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Transformation on_stream_completion_transformation = 4;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.Transformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.getOnStreamCompletionTransformation = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.Transformation} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Transformation, 4));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.Transformation|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.setOnStreamCompletionTransformation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.clearOnStreamCompletionTransformation = function() {
  this.setOnStreamCompletionTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RouteTransformations.prototype.hasOnStreamCompletionTransformation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.filter.http.transformation_ee.v2.Transformation.oneofGroups_);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.Transformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.Transformation.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.Transformation';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.TransformationTypeCase = {
  TRANSFORMATION_TYPE_NOT_SET: 0,
  DLP_TRANSFORMATION: 1
};

/**
 * @return {proto.envoy.config.filter.http.transformation_ee.v2.Transformation.TransformationTypeCase}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.getTransformationTypeCase = function() {
  return /** @type {proto.envoy.config.filter.http.transformation_ee.v2.Transformation.TransformationTypeCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.filter.http.transformation_ee.v2.Transformation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.Transformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Transformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    dlpTransformation: (f = msg.getDlpTransformation()) && proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Transformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.Transformation;
  return proto.envoy.config.filter.http.transformation_ee.v2.Transformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Transformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Transformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.deserializeBinaryFromReader);
      msg.setDlpTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.Transformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Transformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDlpTransformation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.serializeBinaryToWriter
    );
  }
};


/**
 * optional DlpTransformation dlp_transformation = 1;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.getDlpTransformation = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation, 1));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.setDlpTransformation = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.filter.http.transformation_ee.v2.Transformation.oneofGroups_[0], value);
};


proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.clearDlpTransformation = function() {
  this.setDlpTransformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Transformation.prototype.hasDlpTransformation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.envoy.config.filter.http.transformation_ee.v2.Action.toObject, includeInstance),
    enableHeaderTransformation: jspb.Message.getFieldWithDefault(msg, 2, false),
    enableDynamicMetadataTransformation: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation;
  return proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Action;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableHeaderTransformation(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableDynamicMetadataTransformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Action.serializeBinaryToWriter
    );
  }
  f = message.getEnableHeaderTransformation();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnableDynamicMetadataTransformation();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.Action>}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.envoy.config.filter.http.transformation_ee.v2.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Action, 1));
};


/** @param {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.Action>} value */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.filter.http.transformation_ee.v2.Action, opt_index);
};


proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * optional bool enable_header_transformation = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.getEnableHeaderTransformation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.setEnableHeaderTransformation = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool enable_dynamic_metadata_transformation = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.getEnableDynamicMetadataTransformation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.envoy.config.filter.http.transformation_ee.v2.DlpTransformation.prototype.setEnableDynamicMetadataTransformation = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.transformation_ee.v2.Action.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.Action.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.Action';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    regexList: jspb.Message.getRepeatedField(msg, 2),
    regexActionsList: jspb.Message.toObjectList(msg.getRegexActionsList(),
    proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.toObject, includeInstance),
    shadow: jspb.Message.getFieldWithDefault(msg, 3, false),
    percent: (f = msg.getPercent()) && github_com_solo$io_solo$kit_api_external_envoy_type_percent_pb.Percent.toObject(includeInstance, f),
    maskChar: jspb.Message.getFieldWithDefault(msg, 5, ""),
    matcher: (f = msg.getMatcher()) && proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.Action;
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRegex(value);
      break;
    case 6:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.RegexAction;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.deserializeBinaryFromReader);
      msg.addRegexActions(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShadow(value);
      break;
    case 4:
      var value = new github_com_solo$io_solo$kit_api_external_envoy_type_percent_pb.Percent;
      reader.readMessage(value,github_com_solo$io_solo$kit_api_external_envoy_type_percent_pb.Percent.deserializeBinaryFromReader);
      msg.setPercent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaskChar(value);
      break;
    case 7:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.deserializeBinaryFromReader);
      msg.setMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegexList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRegexActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.serializeBinaryToWriter
    );
  }
  f = message.getShadow();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPercent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      github_com_solo$io_solo$kit_api_external_envoy_type_percent_pb.Percent.serializeBinaryToWriter
    );
  }
  f = message.getMaskChar();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMatcher();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    regexActionsList: jspb.Message.toObjectList(msg.getRegexActionsList(),
    proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher;
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.RegexAction;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.deserializeBinaryFromReader);
      msg.addRegexActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegexActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RegexAction regex_actions = 1;
 * @return {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction>}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.prototype.getRegexActionsList = function() {
  return /** @type{!Array<!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.RegexAction, 1));
};


/** @param {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction>} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.prototype.setRegexActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.prototype.addRegexActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.envoy.config.filter.http.transformation_ee.v2.RegexAction, opt_index);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.prototype.clearRegexActionsList = function() {
  this.setRegexActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.repeatedFields_, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher;
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string keys = 1;
 * @return {!Array<string>}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.oneofGroups_);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.MatcherCase = {
  MATCHER_NOT_SET: 0,
  REGEX_MATCHER: 1,
  KEY_VALUE_MATCHER: 2
};

/**
 * @return {proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.MatcherCase}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.getMatcherCase = function() {
  return /** @type {proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.MatcherCase} */(jspb.Message.computeOneofCase(this, proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    regexMatcher: (f = msg.getRegexMatcher()) && proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.toObject(includeInstance, f),
    keyValueMatcher: (f = msg.getKeyValueMatcher()) && proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher;
  return proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.deserializeBinaryFromReader);
      msg.setRegexMatcher(value);
      break;
    case 2:
      var value = new proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher;
      reader.readMessage(value,proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.deserializeBinaryFromReader);
      msg.setKeyValueMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegexMatcher();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher.serializeBinaryToWriter
    );
  }
  f = message.getKeyValueMatcher();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher.serializeBinaryToWriter
    );
  }
};


/**
 * optional RegexMatcher regex_matcher = 1;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.getRegexMatcher = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher, 1));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.Action.RegexMatcher|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.setRegexMatcher = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.oneofGroups_[0], value);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.clearRegexMatcher = function() {
  this.setRegexMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.hasRegexMatcher = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KeyValueMatcher key_value_matcher = 2;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.getKeyValueMatcher = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher, 2));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.Action.KeyValueMatcher|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.setKeyValueMatcher = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.oneofGroups_[0], value);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.clearKeyValueMatcher = function() {
  this.setKeyValueMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher.prototype.hasKeyValueMatcher = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string regex = 2;
 * @return {!Array<string>}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getRegexList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setRegexList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.addRegex = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.clearRegexList = function() {
  this.setRegexList([]);
};


/**
 * repeated RegexAction regex_actions = 6;
 * @return {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction>}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getRegexActionsList = function() {
  return /** @type{!Array<!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.RegexAction, 6));
};


/** @param {!Array<!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction>} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setRegexActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.addRegexActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.envoy.config.filter.http.transformation_ee.v2.RegexAction, opt_index);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.clearRegexActionsList = function() {
  this.setRegexActionsList([]);
};


/**
 * optional bool shadow = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getShadow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setShadow = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional solo.io.envoy.type.Percent percent = 4;
 * @return {?proto.solo.io.envoy.type.Percent}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getPercent = function() {
  return /** @type{?proto.solo.io.envoy.type.Percent} */ (
    jspb.Message.getWrapperField(this, github_com_solo$io_solo$kit_api_external_envoy_type_percent_pb.Percent, 4));
};


/** @param {?proto.solo.io.envoy.type.Percent|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setPercent = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.clearPercent = function() {
  this.setPercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.hasPercent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string mask_char = 5;
 * @return {string}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getMaskChar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setMaskChar = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional DlpMatcher matcher = 7;
 * @return {?proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.getMatcher = function() {
  return /** @type{?proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher} */ (
    jspb.Message.getWrapperField(this, proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher, 7));
};


/** @param {?proto.envoy.config.filter.http.transformation_ee.v2.Action.DlpMatcher|undefined} value */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.setMatcher = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.clearMatcher = function() {
  this.setMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.envoy.config.filter.http.transformation_ee.v2.Action.prototype.hasMatcher = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.filter.http.transformation_ee.v2.RegexAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.displayName = 'proto.envoy.config.filter.http.transformation_ee.v2.RegexAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    regex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subgroup: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.http.transformation_ee.v2.RegexAction;
  return proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.http.transformation_ee.v2.RegexAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubgroup();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string regex = 1;
 * @return {string}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.prototype.setRegex = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 subgroup = 2;
 * @return {number}
 */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.prototype.getSubgroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.envoy.config.filter.http.transformation_ee.v2.RegexAction.prototype.setSubgroup = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.envoy.config.filter.http.transformation_ee.v2);
