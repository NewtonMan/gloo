syntax = "proto3";
package licensing.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/licensingserver/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";


service LicenseValidation {
    // Returns the validity of a given License key
    rpc ValidateKey(ValidateKeyRequest) returns (ValidateKeyReponse) {}
}


message ValidateKeyRequest {
    LicenseKey key = 1;
}

message ValidateKeyReponse {
    bool valid = 1;
}

/*
Interface exported by the server.
*/
message LicenseKey {

    option (core.solo.io.resource).short_name = "lc";
    option (core.solo.io.resource).plural_name = "licenses";
    // TODO: remove when we are ready to include this resource in the docs
    option (core.solo.io.resource).skip_docs_gen = true;

    string key =1;

    enum Type {
        GLOO = 0;
        SQUASH = 1;
    }

    Type type = 2;
    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 4 [(gogoproto.nullable) = false];
}
