// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/licensingserver/api/v1/license.proto

package v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LicenseKey_Type int32

const (
	LicenseKey_GLOO   LicenseKey_Type = 0
	LicenseKey_SQUASH LicenseKey_Type = 1
)

var LicenseKey_Type_name = map[int32]string{
	0: "GLOO",
	1: "SQUASH",
}

var LicenseKey_Type_value = map[string]int32{
	"GLOO":   0,
	"SQUASH": 1,
}

func (x LicenseKey_Type) String() string {
	return proto.EnumName(LicenseKey_Type_name, int32(x))
}

func (LicenseKey_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_78577e8929be66a3, []int{2, 0}
}

type ValidateKeyRequest struct {
	Key                  *LicenseKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ValidateKeyRequest) Reset()         { *m = ValidateKeyRequest{} }
func (m *ValidateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateKeyRequest) ProtoMessage()    {}
func (*ValidateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78577e8929be66a3, []int{0}
}
func (m *ValidateKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateKeyRequest.Unmarshal(m, b)
}
func (m *ValidateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateKeyRequest.Marshal(b, m, deterministic)
}
func (m *ValidateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateKeyRequest.Merge(m, src)
}
func (m *ValidateKeyRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateKeyRequest.Size(m)
}
func (m *ValidateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateKeyRequest proto.InternalMessageInfo

func (m *ValidateKeyRequest) GetKey() *LicenseKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type ValidateKeyReponse struct {
	Valid                bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateKeyReponse) Reset()         { *m = ValidateKeyReponse{} }
func (m *ValidateKeyReponse) String() string { return proto.CompactTextString(m) }
func (*ValidateKeyReponse) ProtoMessage()    {}
func (*ValidateKeyReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78577e8929be66a3, []int{1}
}
func (m *ValidateKeyReponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateKeyReponse.Unmarshal(m, b)
}
func (m *ValidateKeyReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateKeyReponse.Marshal(b, m, deterministic)
}
func (m *ValidateKeyReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateKeyReponse.Merge(m, src)
}
func (m *ValidateKeyReponse) XXX_Size() int {
	return xxx_messageInfo_ValidateKeyReponse.Size(m)
}
func (m *ValidateKeyReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateKeyReponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateKeyReponse proto.InternalMessageInfo

func (m *ValidateKeyReponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

//
//Interface exported by the server.
type LicenseKey struct {
	Key  string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type LicenseKey_Type `protobuf:"varint,2,opt,name=type,proto3,enum=licensing.solo.io.LicenseKey_Type" json:"type,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata             core.Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LicenseKey) Reset()         { *m = LicenseKey{} }
func (m *LicenseKey) String() string { return proto.CompactTextString(m) }
func (*LicenseKey) ProtoMessage()    {}
func (*LicenseKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_78577e8929be66a3, []int{2}
}
func (m *LicenseKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseKey.Unmarshal(m, b)
}
func (m *LicenseKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseKey.Marshal(b, m, deterministic)
}
func (m *LicenseKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseKey.Merge(m, src)
}
func (m *LicenseKey) XXX_Size() int {
	return xxx_messageInfo_LicenseKey.Size(m)
}
func (m *LicenseKey) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseKey.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseKey proto.InternalMessageInfo

func (m *LicenseKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LicenseKey) GetType() LicenseKey_Type {
	if m != nil {
		return m.Type
	}
	return LicenseKey_GLOO
}

func (m *LicenseKey) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func init() {
	proto.RegisterEnum("licensing.solo.io.LicenseKey_Type", LicenseKey_Type_name, LicenseKey_Type_value)
	proto.RegisterType((*ValidateKeyRequest)(nil), "licensing.solo.io.ValidateKeyRequest")
	proto.RegisterType((*ValidateKeyReponse)(nil), "licensing.solo.io.ValidateKeyReponse")
	proto.RegisterType((*LicenseKey)(nil), "licensing.solo.io.LicenseKey")
}

func init() {
	proto.RegisterFile("github.com/solo-io/solo-projects/projects/licensingserver/api/v1/license.proto", fileDescriptor_78577e8929be66a3)
}

var fileDescriptor_78577e8929be66a3 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xf2, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0xce, 0xcf, 0xc9, 0xd7, 0xcd, 0xcc, 0x87, 0xd0,
	0x05, 0x45, 0xf9, 0x59, 0xa9, 0xc9, 0x25, 0xc5, 0xfa, 0x70, 0x46, 0x4e, 0x66, 0x72, 0x6a, 0x5e,
	0x71, 0x66, 0x5e, 0x7a, 0x71, 0x6a, 0x51, 0x59, 0x6a, 0x91, 0x7e, 0x62, 0x41, 0xa6, 0x7e, 0x99,
	0x21, 0x54, 0x38, 0x55, 0xaf, 0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x48, 0x10, 0xae, 0x4a, 0x0f, 0x64,
	0x8c, 0x5e, 0x66, 0xbe, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x58, 0x56, 0x1f, 0xc4, 0x82, 0x28,
	0x94, 0x32, 0xc4, 0x65, 0x71, 0x76, 0x66, 0x09, 0xcc, 0xe8, 0xdc, 0xd4, 0x92, 0xc4, 0x94, 0xc4,
	0x92, 0x44, 0x12, 0xb4, 0xc0, 0xf8, 0x10, 0x2d, 0x4a, 0xae, 0x5c, 0x42, 0x61, 0x89, 0x39, 0x99,
	0x29, 0x89, 0x25, 0xa9, 0xde, 0xa9, 0x95, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0xfa,
	0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xb2, 0x7a, 0x18, 0x4e,
	0xd6, 0xf3, 0x81, 0xf8, 0x09, 0xa4, 0x05, 0xa4, 0x52, 0x49, 0x0b, 0xcd, 0x98, 0x82, 0xfc, 0xbc,
	0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0x32, 0x90, 0x28, 0xd8, 0x20, 0x8e, 0x20, 0x08, 0x47, 0xe9,
	0x0c, 0x23, 0x17, 0x17, 0x42, 0xbf, 0x90, 0x00, 0xc2, 0x2e, 0x4e, 0xb0, 0x61, 0x42, 0x66, 0x5c,
	0x2c, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x4a, 0x78, 0xad, 0xd7,
	0x0b, 0xa9, 0x2c, 0x48, 0x0d, 0x02, 0xab, 0x17, 0xb2, 0xe0, 0xe2, 0x80, 0x05, 0x88, 0x04, 0x0b,
	0xd8, 0xe9, 0x62, 0x7a, 0xc9, 0xf9, 0x45, 0xa9, 0x70, 0x6d, 0xbe, 0x50, 0x59, 0x27, 0x96, 0x13,
	0xf7, 0xe4, 0x19, 0x82, 0xe0, 0xaa, 0x95, 0x64, 0xb8, 0x58, 0x40, 0xe6, 0x08, 0x71, 0x70, 0xb1,
	0xb8, 0xfb, 0xf8, 0xfb, 0x0b, 0x30, 0x08, 0x71, 0x71, 0xb1, 0x05, 0x07, 0x86, 0x3a, 0x06, 0x7b,
	0x08, 0x30, 0x5a, 0xc9, 0x34, 0x7d, 0x64, 0x61, 0xe1, 0x62, 0xca, 0x49, 0x6e, 0xfa, 0xc8, 0xc2,
	0x25, 0xc4, 0x01, 0x8d, 0xcf, 0xe2, 0xa6, 0x8f, 0x2c, 0x4c, 0x0a, 0x8c, 0x46, 0x45, 0x5c, 0x82,
	0x50, 0xe7, 0x40, 0x43, 0x20, 0x33, 0x3f, 0x4f, 0x28, 0x96, 0x8b, 0x1b, 0x29, 0x3c, 0x84, 0x54,
	0xb1, 0xf8, 0x01, 0x33, 0xd8, 0xa5, 0x08, 0x2a, 0x03, 0x07, 0xab, 0x12, 0x83, 0x93, 0xd7, 0x8a,
	0x47, 0x72, 0x8c, 0x51, 0x2e, 0xe4, 0x27, 0xcd, 0x82, 0xec, 0x74, 0x68, 0x82, 0x48, 0x62, 0x03,
	0x27, 0x04, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x06, 0x84, 0xf8, 0xe9, 0x02, 0x00,
	0x00,
}

func (this *ValidateKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateKeyRequest)
	if !ok {
		that2, ok := that.(ValidateKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ValidateKeyReponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateKeyReponse)
	if !ok {
		that2, ok := that.(ValidateKeyReponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Valid != that1.Valid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LicenseKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LicenseKey)
	if !ok {
		that2, ok := that.(LicenseKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicenseValidationClient is the client API for LicenseValidation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseValidationClient interface {
	// Returns the validity of a given License key
	ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyReponse, error)
}

type licenseValidationClient struct {
	cc *grpc.ClientConn
}

func NewLicenseValidationClient(cc *grpc.ClientConn) LicenseValidationClient {
	return &licenseValidationClient{cc}
}

func (c *licenseValidationClient) ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyReponse, error) {
	out := new(ValidateKeyReponse)
	err := c.cc.Invoke(ctx, "/licensing.solo.io.LicenseValidation/ValidateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseValidationServer is the server API for LicenseValidation service.
type LicenseValidationServer interface {
	// Returns the validity of a given License key
	ValidateKey(context.Context, *ValidateKeyRequest) (*ValidateKeyReponse, error)
}

// UnimplementedLicenseValidationServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseValidationServer struct {
}

func (*UnimplementedLicenseValidationServer) ValidateKey(ctx context.Context, req *ValidateKeyRequest) (*ValidateKeyReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateKey not implemented")
}

func RegisterLicenseValidationServer(s *grpc.Server, srv LicenseValidationServer) {
	s.RegisterService(&_LicenseValidation_serviceDesc, srv)
}

func _LicenseValidation_ValidateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseValidationServer).ValidateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/licensing.solo.io.LicenseValidation/ValidateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseValidationServer).ValidateKey(ctx, req.(*ValidateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LicenseValidation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "licensing.solo.io.LicenseValidation",
	HandlerType: (*LicenseValidationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateKey",
			Handler:    _LicenseValidation_ValidateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/solo-io/solo-projects/projects/licensingserver/api/v1/license.proto",
}
