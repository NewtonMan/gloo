// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type LicenseKeyClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*LicenseKey, error)
	Write(resource *LicenseKey, opts clients.WriteOpts) (*LicenseKey, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (LicenseKeyList, error)
	Watch(namespace string, opts clients.WatchOpts) (<-chan LicenseKeyList, <-chan error, error)
}

type licenseKeyClient struct {
	rc clients.ResourceClient
}

func NewLicenseKeyClient(rcFactory factory.ResourceClientFactory) (LicenseKeyClient, error) {
	return NewLicenseKeyClientWithToken(rcFactory, "")
}

func NewLicenseKeyClientWithToken(rcFactory factory.ResourceClientFactory, token string) (LicenseKeyClient, error) {
	rc, err := rcFactory.NewResourceClient(factory.NewResourceClientParams{
		ResourceType: &LicenseKey{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base LicenseKey resource client")
	}
	return NewLicenseKeyClientWithBase(rc), nil
}

func NewLicenseKeyClientWithBase(rc clients.ResourceClient) LicenseKeyClient {
	return &licenseKeyClient{
		rc: rc,
	}
}

func (client *licenseKeyClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *licenseKeyClient) Register() error {
	return client.rc.Register()
}

func (client *licenseKeyClient) Read(namespace, name string, opts clients.ReadOpts) (*LicenseKey, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*LicenseKey), nil
}

func (client *licenseKeyClient) Write(licenseKey *LicenseKey, opts clients.WriteOpts) (*LicenseKey, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(licenseKey, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*LicenseKey), nil
}

func (client *licenseKeyClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *licenseKeyClient) List(namespace string, opts clients.ListOpts) (LicenseKeyList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToLicenseKey(resourceList), nil
}

func (client *licenseKeyClient) Watch(namespace string, opts clients.WatchOpts) (<-chan LicenseKeyList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	licensesChan := make(chan LicenseKeyList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				licensesChan <- convertToLicenseKey(resourceList)
			case <-opts.Ctx.Done():
				close(licensesChan)
				return
			}
		}
	}()
	return licensesChan, errs, nil
}

func convertToLicenseKey(resources resources.ResourceList) LicenseKeyList {
	var licenseKeyList LicenseKeyList
	for _, resource := range resources {
		licenseKeyList = append(licenseKeyList, resource.(*LicenseKey))
	}
	return licenseKeyList
}
