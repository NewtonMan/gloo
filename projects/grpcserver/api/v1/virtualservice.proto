syntax = "proto3";
package glooeeapi.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/grpcserver/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/gloo/projects/gateway/api/v1/virtual_service.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto";
import "github.com/solo-io/solo-projects/projects/gloo/api/v1/plugins/extauth/extauth.proto";
import "github.com/solo-io/solo-projects/projects/gloo/api/v1/plugins/ratelimit/ratelimit.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

message GetVirtualServiceRequest {
    core.solo.io.ResourceRef ref = 1;
}

message GetVirtualServiceResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message ListVirtualServicesRequest {
    repeated string namespace_list = 1;
}

message ListVirtualServicesResponse {
    repeated gateway.solo.io.VirtualService virtual_service = 1;
}

message StreamVirtualServiceListRequest {
    string namespace = 1;
    map<string, string> selector = 2;
}

message StreamVirtualServiceListResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message VirtualServiceInput {
    core.solo.io.ResourceRef ref = 1;
    string display_name = 2;
    repeated string domains = 3;
    repeated gloo.solo.io.Route routes = 4;
    core.solo.io.ResourceRef secret_ref = 5;
    ratelimit.plugins.gloo.solo.io.IngressRateLimit rate_limit_config = 6;

    message BasicAuthInput {
        string realm = 1;
        string spec_csv = 2;
    }

    oneof ext_auth_config {
        BasicAuthInput basic_auth = 7;
        extauth.plugins.gloo.solo.io.OAuth oauth = 8;
        extauth.plugins.gloo.solo.io.CustomAuth custom_auth = 9;
    }
}

message CreateVirtualServiceRequest {
    VirtualServiceInput input = 1;
}

message CreateVirtualServiceResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message UpdateVirtualServiceRequest {
    VirtualServiceInput input = 1;
}

message UpdateVirtualServiceResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message DeleteVirtualServiceRequest {
    core.solo.io.ResourceRef ref = 1;
}

message DeleteVirtualServiceResponse {}

message RouteInput {
    core.solo.io.ResourceRef virtual_service_ref = 1;
    uint32 index = 2;
    gloo.solo.io.Route route = 3;
}

message CreateRouteRequest {
    RouteInput input = 1;
}

message CreateRouteResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message UpdateRouteRequest {
    RouteInput input = 1;
}

message UpdateRouteResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message DeleteRouteRequest {
    core.solo.io.ResourceRef virtual_service_ref = 1;
    uint32 index = 2;
}

message DeleteRouteResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message SwapRoutesRequest {
    core.solo.io.ResourceRef virtual_service_ref = 1;
    uint32 index1 = 2;
    uint32 index2 = 3;
}

message SwapRoutesResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

message ShiftRoutesRequest {
    core.solo.io.ResourceRef virtual_service_ref = 1;
    uint32 from_index = 2;
    uint32 to_index = 3;
}

message ShiftRoutesResponse {
    gateway.solo.io.VirtualService virtual_service = 1;
}

service VirtualServiceApi {
    rpc GetVirtualService(GetVirtualServiceRequest) returns (GetVirtualServiceResponse) {}
    rpc ListVirtualServices(ListVirtualServicesRequest) returns (ListVirtualServicesResponse) {}
    rpc StreamVirtualServiceList(StreamVirtualServiceListRequest) returns (StreamVirtualServiceListResponse) {}
    rpc CreateVirtualService(CreateVirtualServiceRequest) returns (CreateVirtualServiceResponse) {}
    rpc UpdateVirtualService(UpdateVirtualServiceRequest) returns (UpdateVirtualServiceResponse) {}
    rpc DeleteVirtualService(DeleteVirtualServiceRequest) returns (DeleteVirtualServiceResponse) {}
    rpc CreateRoute(CreateRouteRequest) returns (CreateRouteResponse) {}
    rpc UpdateRoute(UpdateRouteRequest) returns (UpdateRouteResponse) {}
    rpc DeleteRoute(DeleteRouteRequest) returns (DeleteRouteResponse) {}
    rpc SwapRoutes(SwapRoutesRequest) returns (SwapRoutesResponse) {}
    rpc ShiftRoutes(ShiftRoutesRequest) returns (ShiftRoutesResponse) {}
}
