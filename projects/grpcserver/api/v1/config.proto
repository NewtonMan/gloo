syntax = "proto3";
package glooeeapi.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/grpcserver/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "google/protobuf/empty.proto";
import "gloo/projects/gloo/api/v1/settings.proto";
import "solo-projects/projects/grpcserver/api/v1/types.proto";

message OAuthEndpoint {
    string url = 1;
    string client_name = 2;
}

message GetVersionRequest {}

message GetVersionResponse {
    string version = 1;
}

message GetOAuthEndpointRequest {}

message GetOAuthEndpointResponse {
    OAuthEndpoint o_auth_endpoint = 1;
}

message SettingsDetails {
    gloo.solo.io.Settings settings = 1;
    Raw raw = 2;
}

message GetSettingsRequest {}

message GetSettingsResponse {
    SettingsDetails settings_details = 1;
}

message UpdateSettingsRequest {
    gloo.solo.io.Settings settings = 1;
}

message UpdateSettingsResponse {
    SettingsDetails settings_details = 1;
}

message UpdateSettingsYamlRequest {
    EditedResourceYaml edited_yaml_data = 1;
}

message GetIsLicenseValidRequest {}

message GetIsLicenseValidResponse {
    bool is_license_valid = 1;
    string invalid_reason = 2;
}

message GetPodNamespaceRequest {}

message GetPodNamespaceResponse {
    string namespace = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
    repeated string namespaces = 1;
}

message IsDeveloperPortalEnabledResponse {
    bool enabled = 1;
    string disabled_reason = 2;
}

service ConfigApi {
    rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
    rpc GetOAuthEndpoint(GetOAuthEndpointRequest) returns (GetOAuthEndpointResponse) {}
    rpc GetIsLicenseValid(GetIsLicenseValidRequest) returns (GetIsLicenseValidResponse) {}
    // Used by the UI to determine whether to enable the developer portal features
    rpc IsDeveloperPortalEnabled(google.protobuf.Empty) returns (IsDeveloperPortalEnabledResponse) {}

    rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {}
    rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {}
    rpc UpdateSettingsYaml(UpdateSettingsYamlRequest) returns (UpdateSettingsResponse) {}

    // Returns a list of all available namespaces on the cluster.
    // This is NOT the same as WatchNamespaces in Settings.
    rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {}
    rpc GetPodNamespace(GetPodNamespaceRequest) returns (GetPodNamespaceResponse) {}
}
