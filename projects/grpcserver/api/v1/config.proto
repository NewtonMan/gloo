syntax = "proto3";
package glooeeapi.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/grpcserver/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "google/protobuf/duration.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

message OAuthEndpoint {
    string url = 1;
    string client_name = 2;
}

message GetVersionRequest {}

message GetVersionResponse {
    string version = 1;
}

message GetOAuthEndpointRequest {}

message GetOAuthEndpointResponse {
    OAuthEndpoint o_auth_endpoint = 1;
}

message GetSettingsRequest {}

message GetSettingsResponse {
    gloo.solo.io.Settings settings = 1;
}

message UpdateSettingsRequest {
    // Deprecated
    core.solo.io.ResourceRef ref = 1 [deprecated=true];
    // Deprecated
    repeated string watch_namespaces = 2 [deprecated=true];
    // Deprecated
    google.protobuf.Duration refresh_rate = 3;
    gloo.solo.io.Settings settings = 4;
}

message UpdateSettingsResponse {
    gloo.solo.io.Settings settings = 1;
}

message GetIsLicenseValidRequest {}

message GetIsLicenseValidResponse {
    bool is_license_valid = 1;
}

message GetPodNamespaceRequest {}

message GetPodNamespaceResponse {
    string namespace = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
    repeated string namespaces = 1;
}

service ConfigApi {
    rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
    rpc GetOAuthEndpoint(GetOAuthEndpointRequest) returns (GetOAuthEndpointResponse) {}
    rpc GetIsLicenseValid(GetIsLicenseValidRequest) returns (GetIsLicenseValidResponse) {}

    rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {}
    rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {}

    rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {}
    rpc GetPodNamespace(GetPodNamespaceRequest) returns (GetPodNamespaceResponse) {}
}
