// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/grpcserver/api/v1/artifact.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GetArtifactRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetArtifactRequest)
	if !ok {
		that2, ok := that.(GetArtifactRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetArtifactResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetArtifactResponse)
	if !ok {
		that2, ok := that.(GetArtifactResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetArtifact()).(equality.Equalizer); ok {
		if !h.Equal(target.GetArtifact()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetArtifact(), target.GetArtifact()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListArtifactsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListArtifactsRequest)
	if !ok {
		that2, ok := that.(ListArtifactsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListArtifactsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListArtifactsResponse)
	if !ok {
		that2, ok := that.(ListArtifactsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetArtifacts()) != len(target.GetArtifacts()) {
		return false
	}
	for idx, v := range m.GetArtifacts() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetArtifacts()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetArtifacts()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CreateArtifactRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateArtifactRequest)
	if !ok {
		that2, ok := that.(CreateArtifactRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetArtifact()).(equality.Equalizer); ok {
		if !h.Equal(target.GetArtifact()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetArtifact(), target.GetArtifact()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CreateArtifactResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateArtifactResponse)
	if !ok {
		that2, ok := that.(CreateArtifactResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetArtifact()).(equality.Equalizer); ok {
		if !h.Equal(target.GetArtifact()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetArtifact(), target.GetArtifact()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateArtifactRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateArtifactRequest)
	if !ok {
		that2, ok := that.(UpdateArtifactRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetArtifact()).(equality.Equalizer); ok {
		if !h.Equal(target.GetArtifact()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetArtifact(), target.GetArtifact()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateArtifactResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateArtifactResponse)
	if !ok {
		that2, ok := that.(UpdateArtifactResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetArtifact()).(equality.Equalizer); ok {
		if !h.Equal(target.GetArtifact()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetArtifact(), target.GetArtifact()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteArtifactRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteArtifactRequest)
	if !ok {
		that2, ok := that.(DeleteArtifactRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteArtifactResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteArtifactResponse)
	if !ok {
		that2, ok := that.(DeleteArtifactResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
