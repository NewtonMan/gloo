// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/grpcserver/api/v1/upstream.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *UpstreamDetails) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamDetails)
	if !ok {
		that2, ok := that.(UpstreamDetails)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstream()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstream()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstream(), target.GetUpstream()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRaw()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRaw()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRaw(), target.GetRaw()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetUpstreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetUpstreamRequest)
	if !ok {
		that2, ok := that.(GetUpstreamRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetUpstreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetUpstreamResponse)
	if !ok {
		that2, ok := that.(GetUpstreamResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamDetails(), target.GetUpstreamDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListUpstreamsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListUpstreamsRequest)
	if !ok {
		that2, ok := that.(ListUpstreamsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListUpstreamsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListUpstreamsResponse)
	if !ok {
		that2, ok := that.(ListUpstreamsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetUpstreamDetails()) != len(target.GetUpstreamDetails()) {
		return false
	}
	for idx, v := range m.GetUpstreamDetails() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUpstreamDetails()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUpstreamDetails()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CreateUpstreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateUpstreamRequest)
	if !ok {
		that2, ok := that.(CreateUpstreamRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamInput()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamInput()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamInput(), target.GetUpstreamInput()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CreateUpstreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateUpstreamResponse)
	if !ok {
		that2, ok := that.(CreateUpstreamResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamDetails(), target.GetUpstreamDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateUpstreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateUpstreamRequest)
	if !ok {
		that2, ok := that.(UpdateUpstreamRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamInput()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamInput()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamInput(), target.GetUpstreamInput()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateUpstreamYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateUpstreamYamlRequest)
	if !ok {
		that2, ok := that.(UpdateUpstreamYamlRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEditedYamlData()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEditedYamlData()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEditedYamlData(), target.GetEditedYamlData()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateUpstreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateUpstreamResponse)
	if !ok {
		that2, ok := that.(UpdateUpstreamResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamDetails(), target.GetUpstreamDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteUpstreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteUpstreamRequest)
	if !ok {
		that2, ok := that.(DeleteUpstreamRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteUpstreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteUpstreamResponse)
	if !ok {
		that2, ok := that.(DeleteUpstreamResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
