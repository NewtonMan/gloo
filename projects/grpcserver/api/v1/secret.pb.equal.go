// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/grpcserver/api/v1/secret.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *GetSecretRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetSecretRequest)
	if !ok {
		that2, ok := that.(GetSecretRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetSecretResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetSecretResponse)
	if !ok {
		that2, ok := that.(GetSecretResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSecret()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecret()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecret(), target.GetSecret()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListSecretsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListSecretsRequest)
	if !ok {
		that2, ok := that.(ListSecretsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListSecretsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListSecretsResponse)
	if !ok {
		that2, ok := that.(ListSecretsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetSecrets()) != len(target.GetSecrets()) {
		return false
	}
	for idx, v := range m.GetSecrets() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetSecrets()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetSecrets()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CreateSecretRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateSecretRequest)
	if !ok {
		that2, ok := that.(CreateSecretRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSecret()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecret()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecret(), target.GetSecret()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CreateSecretResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateSecretResponse)
	if !ok {
		that2, ok := that.(CreateSecretResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSecret()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecret()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecret(), target.GetSecret()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateSecretRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateSecretRequest)
	if !ok {
		that2, ok := that.(UpdateSecretRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSecret()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecret()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecret(), target.GetSecret()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateSecretResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateSecretResponse)
	if !ok {
		that2, ok := that.(UpdateSecretResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSecret()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSecret()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSecret(), target.GetSecret()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteSecretRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteSecretRequest)
	if !ok {
		that2, ok := that.(DeleteSecretRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteSecretResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteSecretResponse)
	if !ok {
		that2, ok := that.(DeleteSecretResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
