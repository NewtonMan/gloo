// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/grpcserver/api/v1/config.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *OAuthEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OAuthEndpoint)
	if !ok {
		that2, ok := that.(OAuthEndpoint)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUrl(), target.GetUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientName(), target.GetClientName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GetVersionRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetVersionRequest)
	if !ok {
		that2, ok := that.(GetVersionRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *GetVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetVersionResponse)
	if !ok {
		that2, ok := that.(GetVersionResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetVersion(), target.GetVersion()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GetOAuthEndpointRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetOAuthEndpointRequest)
	if !ok {
		that2, ok := that.(GetOAuthEndpointRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *GetOAuthEndpointResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetOAuthEndpointResponse)
	if !ok {
		that2, ok := that.(GetOAuthEndpointResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetOAuthEndpoint()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOAuthEndpoint()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOAuthEndpoint(), target.GetOAuthEndpoint()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *SettingsDetails) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*SettingsDetails)
	if !ok {
		that2, ok := that.(SettingsDetails)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSettings()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSettings()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSettings(), target.GetSettings()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRaw()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRaw()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRaw(), target.GetRaw()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetSettingsRequest)
	if !ok {
		that2, ok := that.(GetSettingsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *GetSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetSettingsResponse)
	if !ok {
		that2, ok := that.(GetSettingsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSettingsDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSettingsDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSettingsDetails(), target.GetSettingsDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSettings()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSettings()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSettings(), target.GetSettings()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateSettingsResponse)
	if !ok {
		that2, ok := that.(UpdateSettingsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSettingsDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSettingsDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSettingsDetails(), target.GetSettingsDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateSettingsYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateSettingsYamlRequest)
	if !ok {
		that2, ok := that.(UpdateSettingsYamlRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEditedYamlData()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEditedYamlData()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEditedYamlData(), target.GetEditedYamlData()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetIsLicenseValidRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetIsLicenseValidRequest)
	if !ok {
		that2, ok := that.(GetIsLicenseValidRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *GetIsLicenseValidResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetIsLicenseValidResponse)
	if !ok {
		that2, ok := that.(GetIsLicenseValidResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetIsLicenseValid() != target.GetIsLicenseValid() {
		return false
	}

	if strings.Compare(m.GetInvalidReason(), target.GetInvalidReason()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *GetPodNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetPodNamespaceRequest)
	if !ok {
		that2, ok := that.(GetPodNamespaceRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *GetPodNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetPodNamespaceResponse)
	if !ok {
		that2, ok := that.(GetPodNamespaceResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetNamespace(), target.GetNamespace()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ListNamespacesRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListNamespacesRequest)
	if !ok {
		that2, ok := that.(ListNamespacesRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListNamespacesResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListNamespacesResponse)
	if !ok {
		that2, ok := that.(ListNamespacesResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetNamespaces()) != len(target.GetNamespaces()) {
		return false
	}
	for idx, v := range m.GetNamespaces() {

		if strings.Compare(v, target.GetNamespaces()[idx]) != 0 {
			return false
		}

	}

	return true
}
