// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/solo-projects/projects/grpcserver/api/v1/upstreamgroup.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *UpstreamGroupDetails) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpstreamGroupDetails)
	if !ok {
		that2, ok := that.(UpstreamGroupDetails)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamGroup()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamGroup()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamGroup(), target.GetUpstreamGroup()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRaw()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRaw()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRaw(), target.GetRaw()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetUpstreamGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetUpstreamGroupRequest)
	if !ok {
		that2, ok := that.(GetUpstreamGroupRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *GetUpstreamGroupResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GetUpstreamGroupResponse)
	if !ok {
		that2, ok := that.(GetUpstreamGroupResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamGroupDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamGroupDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamGroupDetails(), target.GetUpstreamGroupDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ListUpstreamGroupsRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListUpstreamGroupsRequest)
	if !ok {
		that2, ok := that.(ListUpstreamGroupsRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ListUpstreamGroupsResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ListUpstreamGroupsResponse)
	if !ok {
		that2, ok := that.(ListUpstreamGroupsResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetUpstreamGroupDetails()) != len(target.GetUpstreamGroupDetails()) {
		return false
	}
	for idx, v := range m.GetUpstreamGroupDetails() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUpstreamGroupDetails()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUpstreamGroupDetails()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CreateUpstreamGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateUpstreamGroupRequest)
	if !ok {
		that2, ok := that.(CreateUpstreamGroupRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamGroup()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamGroup()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamGroup(), target.GetUpstreamGroup()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CreateUpstreamGroupResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CreateUpstreamGroupResponse)
	if !ok {
		that2, ok := that.(CreateUpstreamGroupResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamGroupDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamGroupDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamGroupDetails(), target.GetUpstreamGroupDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateUpstreamGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateUpstreamGroupRequest)
	if !ok {
		that2, ok := that.(UpdateUpstreamGroupRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamGroup()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamGroup()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamGroup(), target.GetUpstreamGroup()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateUpstreamGroupYamlRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateUpstreamGroupYamlRequest)
	if !ok {
		that2, ok := that.(UpdateUpstreamGroupYamlRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetEditedYamlData()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEditedYamlData()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEditedYamlData(), target.GetEditedYamlData()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *UpdateUpstreamGroupResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*UpdateUpstreamGroupResponse)
	if !ok {
		that2, ok := that.(UpdateUpstreamGroupResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpstreamGroupDetails()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpstreamGroupDetails()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpstreamGroupDetails(), target.GetUpstreamGroupDetails()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteUpstreamGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteUpstreamGroupRequest)
	if !ok {
		that2, ok := that.(DeleteUpstreamGroupRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetRef()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRef()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRef(), target.GetRef()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DeleteUpstreamGroupResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DeleteUpstreamGroupResponse)
	if !ok {
		that2, ok := that.(DeleteUpstreamGroupResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
