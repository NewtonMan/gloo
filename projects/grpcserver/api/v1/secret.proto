syntax = "proto3";
package glooeeapi.solo.io;
option go_package = "github.com/solo-io/solo-projects/projects/grpcserver/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/secret.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

message GetSecretRequest {
    core.solo.io.ResourceRef ref = 1;
}

message GetSecretResponse {
    gloo.solo.io.Secret secret = 1;
}

message ListSecretsRequest {
    // Deprecated. `List` calls will now query all WatchNamespaces.
    repeated string namespaces = 1;
}

message ListSecretsResponse {
    repeated gloo.solo.io.Secret secrets = 1;
}

message CreateSecretRequest {
    // Deprecated
    core.solo.io.ResourceRef ref = 1;
    // Deprecated
    oneof kind {
        gloo.solo.io.AwsSecret aws = 2;
        gloo.solo.io.AzureSecret azure = 3;
        gloo.solo.io.TlsSecret tls = 4;
        gloo.solo.io.Extension extension = 5;
    }
    gloo.solo.io.Secret secret = 6;
}

message CreateSecretResponse {
    gloo.solo.io.Secret secret = 1;
}

message UpdateSecretRequest {
    // Deprecated
    core.solo.io.ResourceRef ref = 1;
    // Deprecated
    oneof kind {
        gloo.solo.io.AwsSecret aws = 2;
        gloo.solo.io.AzureSecret azure = 3;
        gloo.solo.io.TlsSecret tls = 4;
        gloo.solo.io.Extension extension = 5;
    }

    gloo.solo.io.Secret secret = 6;
}

message UpdateSecretResponse {
    gloo.solo.io.Secret secret = 1;
}

message DeleteSecretRequest {
    core.solo.io.ResourceRef ref = 1;
}

message DeleteSecretResponse {}

service SecretApi {
    rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {}
    rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {}
    rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {}
    rpc UpdateSecret(UpdateSecretRequest) returns (UpdateSecretResponse) {}
    rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {}
}
