// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-projects/projects/grpcserver/server/service/upstreamsvc/truncate (interfaces: UpstreamTruncator)

// Package mock_truncate is a generated GoMock package.
package mock_truncate

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
)

// MockUpstreamTruncator is a mock of UpstreamTruncator interface
type MockUpstreamTruncator struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamTruncatorMockRecorder
}

// MockUpstreamTruncatorMockRecorder is the mock recorder for MockUpstreamTruncator
type MockUpstreamTruncatorMockRecorder struct {
	mock *MockUpstreamTruncator
}

// NewMockUpstreamTruncator creates a new mock instance
func NewMockUpstreamTruncator(ctrl *gomock.Controller) *MockUpstreamTruncator {
	mock := &MockUpstreamTruncator{ctrl: ctrl}
	mock.recorder = &MockUpstreamTruncatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstreamTruncator) EXPECT() *MockUpstreamTruncatorMockRecorder {
	return m.recorder
}

// Truncate mocks base method
func (m *MockUpstreamTruncator) Truncate(arg0 *v1.Upstream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Truncate", arg0)
}

// Truncate indicates an expected call of Truncate
func (mr *MockUpstreamTruncatorMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockUpstreamTruncator)(nil).Truncate), arg0)
}
