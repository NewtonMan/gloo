// Code generated by MockGen. DO NOT EDIT.
// Source: ./projects/grpcserver/server/service/upstreamsvc/converter/converter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	v10 "github.com/solo-io/solo-projects/projects/grpcserver/api/v1"
)

// MockUpstreamInputConverter is a mock of UpstreamInputConverter interface
type MockUpstreamInputConverter struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamInputConverterMockRecorder
}

// MockUpstreamInputConverterMockRecorder is the mock recorder for MockUpstreamInputConverter
type MockUpstreamInputConverterMockRecorder struct {
	mock *MockUpstreamInputConverter
}

// NewMockUpstreamInputConverter creates a new mock instance
func NewMockUpstreamInputConverter(ctrl *gomock.Controller) *MockUpstreamInputConverter {
	mock := &MockUpstreamInputConverter{ctrl: ctrl}
	mock.recorder = &MockUpstreamInputConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstreamInputConverter) EXPECT() *MockUpstreamInputConverterMockRecorder {
	return m.recorder
}

// ConvertInputToUpstreamSpec mocks base method
func (m *MockUpstreamInputConverter) ConvertInputToUpstreamSpec(input *v10.UpstreamInput) *v1.UpstreamSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertInputToUpstreamSpec", input)
	ret0, _ := ret[0].(*v1.UpstreamSpec)
	return ret0
}

// ConvertInputToUpstreamSpec indicates an expected call of ConvertInputToUpstreamSpec
func (mr *MockUpstreamInputConverterMockRecorder) ConvertInputToUpstreamSpec(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertInputToUpstreamSpec", reflect.TypeOf((*MockUpstreamInputConverter)(nil).ConvertInputToUpstreamSpec), input)
}
