// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-projects/projects/grpcserver/server/service/upstreamsvc/search (interfaces: UpstreamSearcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// MockUpstreamSearcher is a mock of UpstreamSearcher interface
type MockUpstreamSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamSearcherMockRecorder
}

// MockUpstreamSearcherMockRecorder is the mock recorder for MockUpstreamSearcher
type MockUpstreamSearcherMockRecorder struct {
	mock *MockUpstreamSearcher
}

// NewMockUpstreamSearcher creates a new mock instance
func NewMockUpstreamSearcher(ctrl *gomock.Controller) *MockUpstreamSearcher {
	mock := &MockUpstreamSearcher{ctrl: ctrl}
	mock.recorder = &MockUpstreamSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstreamSearcher) EXPECT() *MockUpstreamSearcherMockRecorder {
	return m.recorder
}

// FindContainingVirtualServices mocks base method
func (m *MockUpstreamSearcher) FindContainingVirtualServices(arg0 context.Context, arg1 *core.ResourceRef) ([]*core.ResourceRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindContainingVirtualServices", arg0, arg1)
	ret0, _ := ret[0].([]*core.ResourceRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindContainingVirtualServices indicates an expected call of FindContainingVirtualServices
func (mr *MockUpstreamSearcherMockRecorder) FindContainingVirtualServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindContainingVirtualServices", reflect.TypeOf((*MockUpstreamSearcher)(nil).FindContainingVirtualServices), arg0, arg1)
}
