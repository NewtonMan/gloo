// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/solo-projects/projects/grpcserver/server/service/envoysvc/envoydetails (interfaces: HttpGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpGetter is a mock of HttpGetter interface.
type MockHttpGetter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpGetterMockRecorder
}

// MockHttpGetterMockRecorder is the mock recorder for MockHttpGetter.
type MockHttpGetterMockRecorder struct {
	mock *MockHttpGetter
}

// NewMockHttpGetter creates a new mock instance.
func NewMockHttpGetter(ctrl *gomock.Controller) *MockHttpGetter {
	mock := &MockHttpGetter{ctrl: ctrl}
	mock.recorder = &MockHttpGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpGetter) EXPECT() *MockHttpGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHttpGetter) Get(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpGetterMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpGetter)(nil).Get), arg0, arg1, arg2)
}
