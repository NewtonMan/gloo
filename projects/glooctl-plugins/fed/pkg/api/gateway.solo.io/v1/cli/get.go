// Code generated by skv2. DO NOT EDIT.

package gateway_cli_client

import (
	"context"
	"flag"
	"fmt"
	"os"
	"time"

	"github.com/olekukonko/tablewriter"
	"github.com/solo-io/gloo/pkg/cliutil"
	rpc_v1 "github.com/solo-io/solo-projects/projects/apiserver/pkg/api/fed.rpc/v1"
	"github.com/solo-io/solo-projects/projects/glooctl-plugins/fed/pkg/cmd/options"
	"github.com/solo-io/solo-projects/projects/glooctl-plugins/fed/pkg/constants"
	"github.com/spf13/cobra"
	"google.golang.org/grpc"
)

func Gateway(opts *options.Options) *cobra.Command {
	cmd := &cobra.Command{
		Use:     constants.GATEWAY_COMMAND.Use,
		Aliases: constants.GATEWAY_COMMAND.Aliases,
		Short:   "list Gateways across all clusters",
		Long:    "usage: glooctl fed get gateway [NAME] [--namespace=namespace] [-o FORMAT]",
		RunE: func(cmd *cobra.Command, args []string) error {
			flag.Parse()
			portFwd, err := cliutil.PortForward(opts.Namespace, "deploy/gloo-fed-console", opts.ApiserverPort, opts.ApiserverPort, false)
			if err != nil {
				return err
			}
			defer func() {
				if portFwd.Process != nil {
					portFwd.Process.Kill()
					portFwd.Process.Release()
				}
			}()
			grpcOpts := []grpc.DialOption{
				grpc.WithInsecure(),
				grpc.WithBlock(),
			}
			serverAddr := "localhost:" + opts.ApiserverPort
			ctx, _ := context.WithTimeout(opts.Ctx, 10*time.Second)
			conn, err := grpc.DialContext(ctx, serverAddr, grpcOpts...)
			if err != nil {
				return err
			}
			defer conn.Close()
			client := rpc_v1.NewGatewayResourceApiClient(conn)
			gateways, err := client.ListGateways(opts.Ctx, &rpc_v1.ListGatewaysRequest{})
			if err != nil {
				return err
			}

			table := tablewriter.NewWriter(os.Stdout)
			table.SetHeader([]string{"CLUSTER", "NAMESPACE", "NAME"})
			for _, v := range gateways.GetGateways() {
				table.Append([]string{v.GetMetadata().GetClusterName(), v.GetMetadata().GetNamespace(), v.GetMetadata().GetName()})
			}
			if table.NumLines() == 0 {
				fmt.Printf("No resources found.\n")
			} else {
				table.Render()
			}
			return nil
		},
	}
	return cmd
}

func VirtualService(opts *options.Options) *cobra.Command {
	cmd := &cobra.Command{
		Use:     constants.VIRTUAL_SERVICE_COMMAND.Use,
		Aliases: constants.VIRTUAL_SERVICE_COMMAND.Aliases,
		Short:   "list VirtualServices across all clusters",
		Long:    "usage: glooctl fed get virtualservice [NAME] [--namespace=namespace] [-o FORMAT]",
		RunE: func(cmd *cobra.Command, args []string) error {
			flag.Parse()
			portFwd, err := cliutil.PortForward(opts.Namespace, "deploy/gloo-fed-console", opts.ApiserverPort, opts.ApiserverPort, false)
			if err != nil {
				return err
			}
			defer func() {
				if portFwd.Process != nil {
					portFwd.Process.Kill()
					portFwd.Process.Release()
				}
			}()
			grpcOpts := []grpc.DialOption{
				grpc.WithInsecure(),
				grpc.WithBlock(),
			}
			serverAddr := "localhost:" + opts.ApiserverPort
			ctx, _ := context.WithTimeout(opts.Ctx, 10*time.Second)
			conn, err := grpc.DialContext(ctx, serverAddr, grpcOpts...)
			if err != nil {
				return err
			}
			defer conn.Close()
			client := rpc_v1.NewGatewayResourceApiClient(conn)
			virtualServices, err := client.ListVirtualServices(opts.Ctx, &rpc_v1.ListVirtualServicesRequest{})
			if err != nil {
				return err
			}

			table := tablewriter.NewWriter(os.Stdout)
			table.SetHeader([]string{"CLUSTER", "NAMESPACE", "NAME"})
			for _, v := range virtualServices.GetVirtualServices() {
				table.Append([]string{v.GetMetadata().GetClusterName(), v.GetMetadata().GetNamespace(), v.GetMetadata().GetName()})
			}
			if table.NumLines() == 0 {
				fmt.Printf("No resources found.\n")
			} else {
				table.Render()
			}
			return nil
		},
	}
	return cmd
}

func RouteTable(opts *options.Options) *cobra.Command {
	cmd := &cobra.Command{
		Use:     constants.ROUTE_TABLE_COMMAND.Use,
		Aliases: constants.ROUTE_TABLE_COMMAND.Aliases,
		Short:   "list RouteTables across all clusters",
		Long:    "usage: glooctl fed get routetable [NAME] [--namespace=namespace] [-o FORMAT]",
		RunE: func(cmd *cobra.Command, args []string) error {
			flag.Parse()
			portFwd, err := cliutil.PortForward(opts.Namespace, "deploy/gloo-fed-console", opts.ApiserverPort, opts.ApiserverPort, false)
			if err != nil {
				return err
			}
			defer func() {
				if portFwd.Process != nil {
					portFwd.Process.Kill()
					portFwd.Process.Release()
				}
			}()
			grpcOpts := []grpc.DialOption{
				grpc.WithInsecure(),
				grpc.WithBlock(),
			}
			serverAddr := "localhost:" + opts.ApiserverPort
			ctx, _ := context.WithTimeout(opts.Ctx, 10*time.Second)
			conn, err := grpc.DialContext(ctx, serverAddr, grpcOpts...)
			if err != nil {
				return err
			}
			defer conn.Close()
			client := rpc_v1.NewGatewayResourceApiClient(conn)
			routeTables, err := client.ListRouteTables(opts.Ctx, &rpc_v1.ListRouteTablesRequest{})
			if err != nil {
				return err
			}

			table := tablewriter.NewWriter(os.Stdout)
			table.SetHeader([]string{"CLUSTER", "NAMESPACE", "NAME"})
			for _, v := range routeTables.GetRouteTables() {
				table.Append([]string{v.GetMetadata().GetClusterName(), v.GetMetadata().GetNamespace(), v.GetMetadata().GetName()})
			}
			if table.NumLines() == 0 {
				fmt.Printf("No resources found.\n")
			} else {
				table.Render()
			}
			return nil
		},
	}
	return cmd
}
