// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mock_resources.proto

package mocks // import "github.com/solo-io/solo-kit/test/mocks"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// @solo-kit:resource.short_name=mk
// @solo-kit:resource.plural_name=mocks
// @solo-kit:resource.resource_groups=testing.solo.io,festing.solo.io
type MockResource struct {
	Data                 string        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status               core.Status   `protobuf:"bytes,6,opt,name=status" json:"status"`
	Metadata             core.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MockResource) Reset()         { *m = MockResource{} }
func (m *MockResource) String() string { return proto.CompactTextString(m) }
func (*MockResource) ProtoMessage()    {}
func (*MockResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_mock_resources_0dfe144a376b18b7, []int{0}
}
func (m *MockResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockResource.Unmarshal(m, b)
}
func (m *MockResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockResource.Marshal(b, m, deterministic)
}
func (dst *MockResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockResource.Merge(dst, src)
}
func (m *MockResource) XXX_Size() int {
	return xxx_messageInfo_MockResource.Size(m)
}
func (m *MockResource) XXX_DiscardUnknown() {
	xxx_messageInfo_MockResource.DiscardUnknown(m)
}

var xxx_messageInfo_MockResource proto.InternalMessageInfo

func (m *MockResource) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *MockResource) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *MockResource) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

//
// @solo-kit:resource.short_name=fk
// @solo-kit:resource.plural_name=fakes
// @solo-kit:resource.resource_groups=testing.solo.io,blesting.solo.io
type FakeResource struct {
	Count                uint32        `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Status               core.Status   `protobuf:"bytes,6,opt,name=status" json:"status"`
	Metadata             core.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FakeResource) Reset()         { *m = FakeResource{} }
func (m *FakeResource) String() string { return proto.CompactTextString(m) }
func (*FakeResource) ProtoMessage()    {}
func (*FakeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_mock_resources_0dfe144a376b18b7, []int{1}
}
func (m *FakeResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FakeResource.Unmarshal(m, b)
}
func (m *FakeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FakeResource.Marshal(b, m, deterministic)
}
func (dst *FakeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeResource.Merge(dst, src)
}
func (m *FakeResource) XXX_Size() int {
	return xxx_messageInfo_FakeResource.Size(m)
}
func (m *FakeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeResource.DiscardUnknown(m)
}

var xxx_messageInfo_FakeResource proto.InternalMessageInfo

func (m *FakeResource) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FakeResource) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *FakeResource) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func init() {
	proto.RegisterType((*MockResource)(nil), "mocks.api.v1.MockResource")
	proto.RegisterType((*FakeResource)(nil), "mocks.api.v1.FakeResource")
}
func (this *MockResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MockResource)
	if !ok {
		that2, ok := that.(MockResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FakeResource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeResource)
	if !ok {
		that2, ok := that.(FakeResource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() {
	proto.RegisterFile("mock_resources.proto", fileDescriptor_mock_resources_0dfe144a376b18b7)
}

var fileDescriptor_mock_resources_0dfe144a376b18b7 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xcd, 0x4f, 0xce,
	0x8e, 0x2f, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x01, 0x89, 0x16, 0xeb, 0x25, 0x16, 0x64, 0xea, 0x95, 0x19, 0x4a, 0x89, 0xa4, 0xe7,
	0xa7, 0xe7, 0x83, 0x25, 0xf4, 0x41, 0x2c, 0x88, 0x1a, 0x29, 0xc3, 0xf4, 0xcc, 0x92, 0x8c, 0xd2,
	0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xe2, 0xfc, 0x9c, 0x7c, 0xdd, 0xcc, 0x7c, 0x08, 0x9d, 0x9d,
	0x59, 0xa2, 0x9f, 0x58, 0x90, 0xa9, 0x5f, 0x66, 0xa8, 0x9f, 0x9b, 0x5a, 0x92, 0x98, 0x92, 0x58,
	0x92, 0x08, 0xd5, 0xa2, 0x4f, 0x84, 0x96, 0xe2, 0x92, 0xc4, 0x92, 0x52, 0xa8, 0x3b, 0x94, 0x26,
	0x30, 0x72, 0xf1, 0xf8, 0xe6, 0x27, 0x67, 0x07, 0x41, 0xdd, 0x27, 0x24, 0xc4, 0xc5, 0x02, 0x32,
	0x4f, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16, 0x32, 0xe2, 0x62, 0x83, 0x68, 0x92,
	0x60, 0x53, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd1, 0x4b, 0xce, 0x2f, 0x4a, 0xd5, 0x03, 0x19, 0xac,
	0x97, 0x99, 0xaf, 0x17, 0x0c, 0x96, 0x73, 0x62, 0x39, 0x71, 0x4f, 0x9e, 0x21, 0x08, 0xaa, 0x52,
	0xc8, 0x82, 0x8b, 0x03, 0xe6, 0x36, 0x09, 0x76, 0xb0, 0x2e, 0x31, 0x54, 0x5d, 0xbe, 0x50, 0x59,
	0xa8, 0x3e, 0xb8, 0x6a, 0xa5, 0x49, 0x8c, 0x5c, 0x3c, 0x6e, 0x89, 0xd9, 0xa9, 0x70, 0x27, 0x89,
	0x70, 0xb1, 0x26, 0xe7, 0x97, 0xe6, 0x95, 0x80, 0xdd, 0xc4, 0x1b, 0x04, 0xe1, 0xd0, 0xd7, 0x51,
	0x4e, 0x3a, 0x2b, 0x1e, 0xc9, 0x31, 0x46, 0xa9, 0xe1, 0x0b, 0xde, 0x92, 0xd4, 0xe2, 0x12, 0x7d,
	0x70, 0xb4, 0x26, 0xb1, 0x81, 0x03, 0xd7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x7e, 0xd9,
	0x5d, 0xfc, 0x01, 0x00, 0x00,
}
