########################################################################
###                                                                  ###
###                        Settings                                  ###
###                                                                  ###
########################################################################

# Enable creation of the GlooE settings template, disable the Gloo one (see below)
settings:
  create: true
  # Gloo allows you to directly reference a Kubernetes service as a routing destination. To enable this feature,
  # Gloo scans the cluster for Kubernetes services and creates a special type of in-memory Upstream to represent them.
  # If the cluster contains a lot of services and you do not restrict the namespaces Gloo is watching, this can result
  # in significant overhead. If you do not plan on using this feature, you can set this flag to true to turn it off.
  disableKubernetesDestinations: false
  # Set this value to a an array of ratelimit descriptors to have rate limits on the gloo instance's installation namespace.
  # For more info, see https://docs.solo.io/gloo/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto.sk/#servicesettings
  rateLimit: {}

########################################################################
###                                                                  ###
###                        Gloo                                      ###
###                                                                  ###
########################################################################

license_key: ""
create_license_secret: true
gloo:
  settings:
    # Do not render the Gloo settings template. We would need to template out 'namespace' in a subchart value file,
    # which is hard. We will provide out own settings template as part of the GlooE chart.
    create: false
    integrations:
      knative:
        enabled: false
        version: "0.10.0"
        proxy:
          image:
            repository: gloo-ee-envoy-wrapper
  gloo:
    deployment:
      xdsPort: 9977
      validationPort: 9988
      runAsUser: 10101
      serviceAccount: {}
      image:
        repository: gloo-ee
      replicas: 1
  gatewayProxies:
    gatewayProxy:
      kind:
        deployment:
          replicas: 1
      podTemplate:
        httpPort: 8080
        httpsPort: 8443
        runAsUser: 10101
        fsGroup: 10101
        runUnprivileged: true
        disableNetBind: true
        gracefulShutdown:
          enabled: false
          sleepTimeSeconds: 25
        customReadinessProbe: {}
        image:
          repository: gloo-ee-envoy-wrapper
      service:
        customPorts: []
        type: LoadBalancer
        # clusterIP: None
        httpPort: 80
        httpsPort: 443
        extraAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/path: /metrics
          prometheus.io/port: "8081"
        extraPorts:
          - containerPort: 8081
            name: stats
            protocol: TCP
  discovery:
    enabled: true
    fdsMode: WHITELIST
    serviceAccount: {}
    deployment:
      runAsUser: 10101
      image:
        repository: discovery
        registry: quay.io/solo-io
  gateway:
    deployment:
      runAsUser: 10101
      image:
        repository: gateway
        registry: quay.io/solo-io
    enabled: true
    updateValues: true
    validation:
      enabled: true
      failurePolicy: "Ignore"
      secretName: gateway-validation-certs
      alwaysAcceptResources: true
      allowWarnings: true
      webhook:
        enabled: true
    certGenJob:
      enabled: true
      image:
        repository: certgen
        registry: quay.io/solo-io
      restartPolicy: OnFailure
      setTtlAfterFinished: true
      ttlSecondsAfterFinished: 60
      runAsUser: 10101
    proxyServiceAccount: {}
    serviceAccount: {}
  ingressProxy:
    deployment:
      image:
        repository: gloo-ee-envoy-wrapper

########################################################################
###                                                                  ###
###                        Apiserver                                 ###
###                                                                  ###
########################################################################
apiServer:
  enterprise: true
  enable: true
  enableBeta: true
  deployment:
    name: "grpcserver-ui"
    runAsUser: 10101
    server:
      image:
        name: apiserver
        repository: grpcserver-ee
      grpcPort: 10101
      oauth: {}
    ui:
      image:
        name: "gloo-ui"
        repository: grpcserver-ui
      staticPort: 8080
    envoy:
      image:
        name: "grpcserver-envoy"
        repository: grpcserver-envoy
      bootstrapConfig:
        configMapName: default-apiserver-envoy-config
  service:
    name: "apiserver-ui"
    serviceType: ClusterIP

########################################################################
###                                                                  ###
###                        Rate Limit                                ###
###                                                                  ###
########################################################################

rateLimit:
  # setting to false will disable rate limiting
  enabled: true
  deployment:
    name: "rate-limit"
    image:
      repository: rate-limit-ee
    glooAddress: gloo:9977
    dynamodb:
      region: us-east-2
      tableName: rate-limits
      consistentReads: true
      batchSize: 100
    runAsUser: 10101
  service:
    port: 18081
    name: rate-limit

redis:
  deployment:
    name: redis
    image:
      tag: "5"
      repository: redis
      registry: docker.io
    staticPort: 6379
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
  service:
    port: 6379
    name: redis

########################################################################
###                                                                  ###
###                        Observability                             ###
###                                                                  ###
########################################################################

observability:
  enabled: true
  deployment:
    name: observability
    image:
      repository: observability-ee
    runAsUser: 10101
  customGrafana:
    enabled: false

########################################################################
###                                                                  ###
###                        GLOBAL                                    ###
###                                                                  ###
########################################################################

global:
  image:
    registry: quay.io/solo-io
    pullPolicy: IfNotPresent
  glooStats:
    enabled: true
  glooRbac:
    create: true
  extensions:
    extAuth:
      enabled: true
      standaloneDeployment: true
      envoySidecar: false
      serviceName: ext-auth
      userIdHeader: x-user-id
      deployment:
        name: "extauth"
        image:
          repository: extauth-ee
        port: 8083
        replicas: 1
        runAsUser: 10101
        fsGroup: 10101
      service:
        port: 8083
        name: extauth
      signingKey:
        name: extauth-signing-key
        signing-key: ""
  glooMtls:
    enabled: false
    sds:
      image:
        repository: sds
    envoy:
      image:
        repository: gloo-ee-envoy-wrapper
########################################################################
###                                                                  ###
###                        Prometheus                                ###
###                                                                  ###
########################################################################

prometheus:
  # setting to false will disable prometheus, removing it from gloo's chart dependencies
  enabled: true
  # setting these name overrides ensures that the pods get deleted when `glooctl uninstall` is run
  nameOverride: glooe-prometheus
  pushgateway:
    enabled: false
  alertmanager:
    enabled: false
  nodeExporter:
    enabled: false
  kubeStateMetrics:
    fullnameOverride: glooe-prometheus-kube-state-metrics
  server:
    fullnameOverride: glooe-prometheus-server
    persistentVolume:
      size: 16Gi
    global:
      scrape_interval: 10s
      evaluation_interval: 10s

########################################################################
###                                                                  ###
###                        Grafana                                   ###
###                                                                  ###
########################################################################

grafana:
  # setting to false will disable grafana, removing it from gloo's chart dependencies
  defaultInstallationEnabled: true
  adminUser: admin
  adminPassword: admin
  persistence:
    enabled: true
    size: 100Mi
  rbac:
    create: false
    pspEnabled: false
  # setting these name overrides ensures that the pods get deleted when `glooctl uninstall` is run
  nameOverride: glooe-grafana
  fullnameOverride: glooe-grafana
  initChownData:
    enabled: false
  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
  datasources:
    datasources.yaml:
      # config file version
      apiVersion: 1
      # list of datasources to insert/update depending
      # what's available in the database
      datasources:
        # <string, required> name of the datasource. Required
        - name: gloo
          # <string, required> datasource type. Required
          type: prometheus
          access: proxy
          url: http://glooe-prometheus-server:80
          isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "gloo"
          orgId: 1
          folder: "gloo"
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/gloo
  dashboardsConfigMaps:
    gloo: glooe-grafana-custom-dashboards
  testFramework:
    enabled: false
