{{- if .Values.rateLimit.enabled }}
{{- $statsConfig := coalesce .Values.rateLimit.deployment.stats .Values.global.glooStats -}}
{{- $image := merge .Values.rateLimit.deployment.image .Values.global.image }}
{{- include "gloo.dataplaneperproxyhelper" $ }}
{{- range $name, $spec := $.ProxiesToCreateDataplaneFor }}
{{- $rateLimitName := $.Values.rateLimit.deployment.name }}
{{- $redisName := $.Values.redis.service.name }}
{{- if $.Values.global.extensions.dataplanePerProxy }}
{{- $rateLimitName = printf "%s-%s" $rateLimitName ($name | kebabcase) }}
{{- $redisName = printf "%s-%s" $redisName ($name | kebabcase) }}
{{- end }} # .Values.global.extensions.dataplanePerProxy
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: {{ $rateLimitName }}
  name: {{ $rateLimitName }}
  namespace: {{ $.Release.Namespace }}
spec:
{{- if not (kindIs "invalid" $.Values.rateLimit.deployment.replicas) }}
  replicas: {{ $.Values.rateLimit.deployment.replicas }}
{{- end }}
  selector:
    matchLabels:
      gloo: {{ $rateLimitName }}
  template:
    metadata:
      labels:
        gloo: {{ $rateLimitName }}
        {{- if $.Values.rateLimit.deployment.extraRateLimitLabels }}
        {{- range $key, $value :=  $.Values.rateLimit.deployment.extraRateLimitLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      {{- if $statsConfig.enabled }}
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      {{- end}}
    spec:
      serviceAccountName: {{ $.Values.rateLimit.service.name }}
      containers:
        - image: {{template "gloo.image" $image}}
          imagePullPolicy: {{ $image.pullPolicy }}
          name: rate-limit
          {{- if $.Values.rateLimit.deployment.resources }}
          resources:
{{ toYaml $.Values.rateLimit.deployment.resources | indent 12}}
          {{- end}}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GLOO_ADDRESS
              {{- if $.Values.global.glooMtls.enabled }}
              value: "127.0.0.1:9955"
              {{- else }}
              value: {{ $.Values.rateLimit.deployment.glooAddress }}
              {{- end }}
            {{- if $statsConfig.enabled }}
            - name: START_STATS_SERVER
              value: "true"
            {{- end}}
            {{- if $.Values.rateLimit.deployment.dynamodb.secretName }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.rateLimit.deployment.dynamodb.secretName }}
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.rateLimit.deployment.dynamodb.secretName }}
                  key: aws_secret_access_key
            - name: AWS_REGION
              value: {{ $.Values.rateLimit.deployment.dynamodb.region }}
            - name: DYNAMODB_RATE_LIMIT_TABLE_NAME
              value: {{ $.Values.rateLimit.deployment.dynamodb.tableName }}
            - name: DYNAMODB_CONSISTENT_READS
              value: {{ $.Values.rateLimit.deployment.dynamodb.consistentReads | quote }}
            - name: DYNAMODB_BATCH_SIZE
              value: {{ $.Values.rateLimit.deployment.dynamodb.batchSize | quote }}
            {{- else }} # .Values.rateLimit.deployment.dynamodb.secretName
            - name: REDIS_URL
              value: {{ printf "%s:%v" $redisName $.Values.redis.service.port }}
            - name: REDIS_SOCKET_TYPE
              value: tcp
            {{- end }} # .Values.rateLimit.deployment.dynamodb.secretName
        {{- if $.Values.global.glooMtls.enabled }}
        {{- $sdsImage := merge $.Values.global.glooMtls.sds.image $.Values.global.image }}
        {{- $envoyImage := merge $.Values.global.glooMtls.envoy.image $.Values.global.image}}
        - name: envoy-sidecar
          env:
            - name: ENVOY_SIDECAR
              value: "true"
          image: {{ template "gloo.image" $envoyImage }}
          imagePullPolicy: {{ $envoyImage.pullPolicy }}
          volumeMounts:
            - mountPath: /etc/envoy
              name: rate-limit-sidecar-config
            - mountPath: /etc/envoy/ssl
              name: gloo-mtls-certs
              readOnly: true
          {{- if $.Values.global.glooMtls.envoySidecarResources }}
          resources:
{{ toYaml $.Values.global.glooMtls.envoySidecarResources | indent 12}}
          {{- end}}
        - name: sds
          image: {{ template "gloo.image" $sdsImage }}
          imagePullPolicy: {{ $sdsImage.pullPolicy }}
          env:
            - name: GLOO_MTLS_SDS_ENABLED
              value: "true"
          volumeMounts:
            - mountPath: /etc/envoy/ssl
              name: gloo-mtls-certs
              readOnly: true
          {{- if $.Values.global.glooMtls.sdsResources }}
          resources:
{{ toYaml $.Values.global.glooMtls.sdsResources | indent 12}}
        {{- end}}
        {{- end }}
      {{- if $image.pullSecret }}
      imagePullSecrets:
        - name: {{ $image.pullSecret }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        {{- /* set floatingUserId to true in the helm install to let the pod be assigned a dynamic user ID */ -}}
        {{- /* see https://github.com/helm/helm/issues/1707#issuecomment-520357573 */ -}}
        {{- /* the user id may be set quite high -- openshift wants userids that may get printed as scientific notation */}}
        {{- if not $.Values.rateLimit.deployment.floatingUserId }}
        runAsUser: {{ printf "%.0f" (float64 $.Values.rateLimit.deployment.runAsUser) -}}
        {{- end }}
      {{- if $.Values.global.glooMtls.enabled }}
      volumes:
        - name: gloo-mtls-certs
          secret:
            defaultMode: 420
            secretName: gloo-mtls-certs
        - name: rate-limit-sidecar-config
          configMap:
            name: rate-limit-sidecar-config
      {{- end }} # .Values.global.glooMtls.enabled
---
{{- end }} # range $name, $spec := $.ProxiesToCreateDataplaneFor
{{- end }}
